{
  "name": "@chakra-ui/select",
  "version": "2.0.8",
  "description": "description",
  "keywords": [
    "theme",
    "theming",
    "ui mode",
    "ui",
    "select",
    "form control",
    "html select"
  ],
  "sideEffects": false,
  "author": "Segun Adebayo <sage@adebayosegun.com>",
  "homepage": "https://github.com/chakra-ui/chakra-ui#readme",
  "license": "MIT",
  "main": "dist/index.cjs.js",
  "module": "dist/index.esm.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "publishConfig": {
    "access": "public"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chakra-ui/chakra-ui.git",
    "directory": "packages/select"
  },
  "bugs": {
    "url": "https://github.com/chakra-ui/chakra-ui/issues"
  },
  "dependencies": {
    "@chakra-ui/form-control": "2.0.8",
    "@chakra-ui/utils": "2.0.8"
  },
  "devDependencies": {
    "@chakra-ui/system": "2.2.6",
    "@chakra-ui/layout": "2.1.5",
    "react": "^18.0.0"
  },
  "peerDependencies": {
    "@chakra-ui/system": ">=2.0.0",
    "react": ">=18"
  },
  "scripts": {
    "build": "JSX=1 tsup src/index.ts --dts",
    "dev": "pnpm build -- --watch",
    "clean": "rimraf dist .turbo",
    "typecheck": "tsc --noEmit",
    "build:fast": "JSX=1 tsup src/index.ts"
  },
  "readme": "# Select\n\nThe Select component is a component that allows users pick a value from\npredefined options.\n\nIdeally, it should be used when there are more than 5 options, otherwise you\nmight consider using a radio group instead.\n\n## Installation\n\n```sh\nyarn add @chakra-ui/select\n\n# or\n\nnpm i @chakra-ui/select\n```\n\n## Import component\n\n```jsx\nimport { Select } from \"@chakra-ui/select\"\n```\n\n## Usage\n\n```jsx\n<Select placeholder=\"A simple select component\">\n  <option value=\"1\">Option 1</option>\n  <option value=\"2\">Option 2</option>\n  <option value=\"3\">Option 3</option>\n</Select>\n```\n\n## States\n\n### Disabled\n\nPass the `isDisabled` prop to put the select component in an invalid state\n\n```jsx\n<Select placeholder=\"Select option\" isDisabled>\n  <option value=\"Option 1\">Option 1</option>\n  <option value=\"Option 2\">Option 2</option>\n  <option value=\"Option 3\">Option 3</option>\n</Select>\n```\n\n### Invalid\n\nPass the `isInvalid` prop to put the select component in an invalid state\n\n```jsx\n<Select placeholder=\"Select option\" isInvalid>\n  <option value=\"Option 1\">Option 1</option>\n  <option value=\"Option 2\">Option 2</option>\n  <option value=\"Option 3\">Option 3</option>\n</Select>\n```\n\n## Variants\n\nControl the visual appearance of the select component by passing the `variant`\nprop.\n\nThe following values are allowed: **outline, filled, flushed, unstyled**\n\n```jsx\n<Stack>\n  <Select placeholder=\"Select option\" variant=\"outline\">\n    <option value=\"Option 1\">Option 1</option>\n    <option value=\"Option 2\">Option 2</option>\n    <option value=\"Option 3\">Option 3</option>\n  </Select>\n\n  <Select placeholder=\"Select option\" variant=\"filled\">\n    <option value=\"Option 1\">Option 1</option>\n    <option value=\"Option 2\">Option 2</option>\n    <option value=\"Option 3\">Option 3</option>\n  </Select>\n\n  <Select placeholder=\"Select option\" variant=\"flushed\">\n    <option value=\"Option 1\">Option 1</option>\n    <option value=\"Option 2\">Option 2</option>\n    <option value=\"Option 3\">Option 3</option>\n  </Select>\n\n  <Select placeholder=\"Select option\" variant=\"unstyled\">\n    <option value=\"Option 1\">Option 1</option>\n    <option value=\"Option 2\">Option 2</option>\n    <option value=\"Option 3\">Option 3</option>\n  </Select>\n</Stack>\n```\n\n## Sizes\n\nPass the `size` prop to change the size and height of the select component.\n\nThe following values are allowed: **sm, md, lg**\n\n```jsx\n<Stack spacing={4}>\n  {[\"sm\", \"md\", \"lg\"].map((size) => (\n    <Select key={size} placeholder=\"Select option\" size={size}>\n      <option value=\"Option 1\">Option 1</option>\n      <option value=\"Option 2\">Option 2</option>\n      <option value=\"Option 3\">Option 3</option>\n    </Select>\n  ))}\n</Stack>\n```\n\n## Controlled Select\n\n```tsx\nconst ControlledSelectExample = () => {\n  const [value, setValue] = React.useState(\"\")\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value)\n  }\n\n  return (\n    <Select\n      value={value}\n      onChange={handleChange}\n      placeholder=\"Controlled select\"\n    >\n      <option value=\"Option 1\">Option 1</option>\n      <option value=\"Option 2\">Option 2</option>\n      <option value=\"Option 3\">Option 3</option>\n    </Select>\n  )\n}\n```\n\n## Changing the icon in the Select\n\nPass the `icon` prop to change the arrow icon of the select component to a\ncustom icon.\n\nYou also have access to the `iconSize` prop to change the size of the custom\narrow icon.\n\n```jsx\nconst CustomSelectIconExample = () => {\n  const SelectIcon = () => (\n    <Icon viewBox=\"0 0 24 24\">\n      <path\n        fill=\"currentColor\"\n        d=\"M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z\"\n      />\n    </Icon>\n  )\n  return <Select icon={SelectIcon} placeholder=\"Placeholder\" size=\"md\" />\n}\n```\n\n## Focus border color and error border color\n\nPass the `focusBorderColor` prop to change the border color of the select\ncomponent in the focused state.\n\nPass the `errorBorderColor` prop to change the border color of the select\ncomponent in the invalid state.\n\nThe value of these props can be set to a color in the theme object, or a raw CSS\nvalue.\n\n```jsx\n<Stack>\n  <Select focusBorderColor=\"lime\" placeholder=\"Here is a sample placeholder\" />\n\n  <Select\n    isInvalid\n    errorBorderColor=\"crimson\"\n    placeholder=\"Here is a sample placeholder\"\n  />\n</Stack>\n```\n\n## Overriding the Select styles\n\nEven though the select comes with predefined styles, you can override pretty\nmuch any property. Here's we'll override the background color.\n\n```jsx\n<Select\n  color=\"white\"\n  borderColor=\"tomato\"\n  backgroundColor=\"tomato\"\n  placeholder=\"Woohoo! A new background color!\"\n/>\n```\n"
}
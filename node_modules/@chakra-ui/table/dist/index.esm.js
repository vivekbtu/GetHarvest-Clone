// ../../react-shim.js
import React from "react";

// src/table.tsx
import {
  chakra,
  forwardRef,
  omitThemingProps,
  useMultiStyleConfig
} from "@chakra-ui/system";
import { cx, __DEV__ } from "@chakra-ui/utils";
import { createContext } from "@chakra-ui/react-utils";
var [TableStylesProvider, useTableStyles] = createContext({
  name: `TableStylesContext`,
  errorMessage: `useTableStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Table />" `
});
var TableContainer = forwardRef((props, ref) => {
  const { overflow, overflowX, className, ...rest } = props;
  return /* @__PURE__ */ React.createElement(chakra.div, {
    ref,
    className: cx("chakra-table__container", className),
    ...rest,
    __css: {
      display: "block",
      whiteSpace: "nowrap",
      WebkitOverflowScrolling: "touch",
      overflowX: overflow ?? overflowX ?? "auto",
      overflowY: "hidden",
      maxWidth: "100%"
    }
  });
});
var Table = forwardRef((props, ref) => {
  const styles = useMultiStyleConfig("Table", props);
  const { className, ...tableProps } = omitThemingProps(props);
  return /* @__PURE__ */ React.createElement(TableStylesProvider, {
    value: styles
  }, /* @__PURE__ */ React.createElement(chakra.table, {
    role: "table",
    ref,
    __css: styles.table,
    className: cx("chakra-table", className),
    ...tableProps
  }));
});
if (__DEV__) {
  Table.displayName = "Table";
}
var TableCaption = forwardRef((props, ref) => {
  const { placement = "bottom", ...rest } = props;
  const styles = useTableStyles();
  return /* @__PURE__ */ React.createElement(chakra.caption, {
    ...rest,
    ref,
    __css: {
      ...styles.caption,
      captionSide: placement
    }
  });
});
if (__DEV__) {
  TableCaption.displayName = "TableCaption";
}
var Thead = forwardRef((props, ref) => {
  const styles = useTableStyles();
  return /* @__PURE__ */ React.createElement(chakra.thead, {
    ...props,
    ref,
    __css: styles.thead
  });
});
var Tbody = forwardRef((props, ref) => {
  const styles = useTableStyles();
  return /* @__PURE__ */ React.createElement(chakra.tbody, {
    ...props,
    ref,
    __css: styles.tbody
  });
});
var Tfoot = forwardRef((props, ref) => {
  const styles = useTableStyles();
  return /* @__PURE__ */ React.createElement(chakra.tfoot, {
    ...props,
    ref,
    __css: styles.tfoot
  });
});
var Th = forwardRef(({ isNumeric, ...rest }, ref) => {
  const styles = useTableStyles();
  return /* @__PURE__ */ React.createElement(chakra.th, {
    ...rest,
    ref,
    __css: styles.th,
    "data-is-numeric": isNumeric
  });
});
var Tr = forwardRef((props, ref) => {
  const styles = useTableStyles();
  return /* @__PURE__ */ React.createElement(chakra.tr, {
    role: "row",
    ...props,
    ref,
    __css: styles.tr
  });
});
var Td = forwardRef(({ isNumeric, ...rest }, ref) => {
  const styles = useTableStyles();
  return /* @__PURE__ */ React.createElement(chakra.td, {
    role: "gridcell",
    ...rest,
    ref,
    __css: styles.td,
    "data-is-numeric": isNumeric
  });
});
export {
  Table,
  TableCaption,
  TableContainer,
  Tbody,
  Td,
  Tfoot,
  Th,
  Thead,
  Tr,
  useTableStyles
};

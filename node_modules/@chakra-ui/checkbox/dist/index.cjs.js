"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Checkbox: () => Checkbox,
  CheckboxGroup: () => CheckboxGroup,
  useCheckbox: () => useCheckbox,
  useCheckboxGroup: () => useCheckboxGroup
});
module.exports = __toCommonJS(src_exports);

// ../../react-shim.js
var import_react = __toESM(require("react"));

// src/checkbox-group.tsx
var import_utils2 = require("@chakra-ui/utils");
var import_react3 = require("react");

// src/checkbox-context.ts
var import_react_utils = require("@chakra-ui/react-utils");
var [CheckboxGroupProvider, useCheckboxGroupContext] = (0, import_react_utils.createContext)({
  name: "CheckboxGroupContext",
  strict: false
});

// src/use-checkbox-group.ts
var import_hooks = require("@chakra-ui/hooks");
var import_utils = require("@chakra-ui/utils");
var import_react2 = require("react");
function useCheckboxGroup(props = {}) {
  const {
    defaultValue,
    value: valueProp,
    onChange,
    isDisabled,
    isNative
  } = props;
  const onChangeProp = (0, import_hooks.useCallbackRef)(onChange);
  const [value, setValue] = (0, import_hooks.useControllableState)({
    value: valueProp,
    defaultValue: defaultValue || [],
    onChange: onChangeProp
  });
  const handleChange = (0, import_react2.useCallback)((eventOrValue) => {
    if (!value)
      return;
    const isChecked = (0, import_utils.isInputEvent)(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);
    const selectedValue = (0, import_utils.isInputEvent)(eventOrValue) ? eventOrValue.target.value : eventOrValue;
    const nextValue = isChecked ? (0, import_utils.addItem)(value, selectedValue) : value.filter((v) => String(v) !== String(selectedValue));
    setValue(nextValue);
  }, [setValue, value]);
  const getCheckboxProps = (0, import_react2.useCallback)((props2 = {}) => {
    const checkedKey = isNative ? "checked" : "isChecked";
    return {
      ...props2,
      [checkedKey]: value.some((val) => String(props2.value) === String(val)),
      onChange: handleChange
    };
  }, [handleChange, isNative, value]);
  return {
    value,
    isDisabled,
    onChange: handleChange,
    setValue,
    getCheckboxProps
  };
}

// src/checkbox-group.tsx
function CheckboxGroup(props) {
  const { colorScheme, size, variant, children, isDisabled } = props;
  const { value, onChange } = useCheckboxGroup(props);
  const group = (0, import_react3.useMemo)(() => ({
    size,
    onChange,
    colorScheme,
    value,
    variant,
    isDisabled
  }), [size, onChange, colorScheme, value, variant, isDisabled]);
  return /* @__PURE__ */ import_react.default.createElement(CheckboxGroupProvider, {
    value: group,
    children
  });
}
if (import_utils2.__DEV__) {
  CheckboxGroup.displayName = "CheckboxGroup";
}

// src/checkbox.tsx
var import_system2 = require("@chakra-ui/system");
var import_utils4 = require("@chakra-ui/utils");
var import_react5 = require("react");

// src/checkbox-icon.tsx
var import_system = require("@chakra-ui/system");
var import_framer_motion = require("framer-motion");
function __motion(el) {
  const m = import_framer_motion.motion;
  if ("custom" in m && typeof m.custom === "function") {
    return m.custom(el);
  }
  return m(el);
}
var MotionSvg = __motion(import_system.chakra.svg);
function CheckIcon(props) {
  return /* @__PURE__ */ import_react.default.createElement(MotionSvg, {
    width: "1.2em",
    viewBox: "0 0 12 10",
    variants: {
      unchecked: {
        opacity: 0,
        strokeDashoffset: 16
      },
      checked: {
        opacity: 1,
        strokeDashoffset: 0,
        transition: { duration: 0.2 }
      }
    },
    style: {
      fill: "none",
      strokeWidth: 2,
      stroke: "currentColor",
      strokeDasharray: 16
    },
    ...props
  }, /* @__PURE__ */ import_react.default.createElement("polyline", {
    points: "1.5 6 4.5 9 10.5 1"
  }));
}
function IndeterminateIcon(props) {
  return /* @__PURE__ */ import_react.default.createElement(MotionSvg, {
    width: "1.2em",
    viewBox: "0 0 24 24",
    variants: {
      unchecked: {
        scaleX: 0.65,
        opacity: 0
      },
      checked: {
        scaleX: 1,
        opacity: 1,
        transition: {
          scaleX: { duration: 0 },
          opacity: { duration: 0.02 }
        }
      }
    },
    style: { stroke: "currentColor", strokeWidth: 4 },
    ...props
  }, /* @__PURE__ */ import_react.default.createElement("line", {
    x1: "21",
    x2: "3",
    y1: "12",
    y2: "12"
  }));
}
function CheckboxTransition({ open, children }) {
  return /* @__PURE__ */ import_react.default.createElement(import_framer_motion.AnimatePresence, {
    initial: false
  }, open && /* @__PURE__ */ import_react.default.createElement(import_framer_motion.motion.div, {
    variants: {
      unchecked: { scale: 0.5 },
      checked: { scale: 1 }
    },
    initial: "unchecked",
    animate: "checked",
    exit: "unchecked",
    style: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      height: "100%"
    }
  }, children));
}
function CheckboxIcon(props) {
  const { isIndeterminate, isChecked, ...rest } = props;
  const BaseIcon = isIndeterminate ? IndeterminateIcon : CheckIcon;
  return /* @__PURE__ */ import_react.default.createElement(CheckboxTransition, {
    open: isChecked || isIndeterminate
  }, /* @__PURE__ */ import_react.default.createElement(BaseIcon, {
    ...rest
  }));
}

// src/use-checkbox.ts
var import_form_control = require("@chakra-ui/form-control");
var import_hooks2 = require("@chakra-ui/hooks");
var import_react_utils2 = require("@chakra-ui/react-utils");
var import_utils3 = require("@chakra-ui/utils");
var import_visually_hidden = require("@chakra-ui/visually-hidden");
var import_focus_visible = require("@zag-js/focus-visible");
var import_react4 = require("react");
function useCheckbox(props = {}) {
  const formControlProps = (0, import_form_control.useFormControlProps)(props);
  const {
    isDisabled,
    isReadOnly,
    isRequired,
    isInvalid,
    id,
    onBlur,
    onFocus,
    "aria-describedby": ariaDescribedBy
  } = formControlProps;
  const {
    defaultChecked,
    isChecked: checkedProp,
    isFocusable,
    onChange,
    isIndeterminate,
    name,
    value,
    tabIndex = void 0,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    "aria-invalid": ariaInvalid,
    ...rest
  } = props;
  const htmlProps = (0, import_utils3.omit)(rest, [
    "isDisabled",
    "isReadOnly",
    "isRequired",
    "isInvalid",
    "id",
    "onBlur",
    "onFocus",
    "aria-describedby"
  ]);
  const onChangeProp = (0, import_hooks2.useCallbackRef)(onChange);
  const onBlurProp = (0, import_hooks2.useCallbackRef)(onBlur);
  const onFocusProp = (0, import_hooks2.useCallbackRef)(onFocus);
  const [isFocusVisible, setIsFocusVisible] = (0, import_react4.useState)(false);
  const [isFocused, setFocused] = (0, import_hooks2.useBoolean)();
  const [isHovered, setHovered] = (0, import_hooks2.useBoolean)();
  const [isActive, setActive] = (0, import_hooks2.useBoolean)();
  (0, import_react4.useEffect)(() => {
    return (0, import_focus_visible.trackFocusVisible)(setIsFocusVisible);
  }, []);
  const inputRef = (0, import_react4.useRef)(null);
  const [rootIsLabelElement, setRootIsLabelElement] = (0, import_react4.useState)(true);
  const [checkedState, setCheckedState] = (0, import_react4.useState)(!!defaultChecked);
  const [isControlled, isChecked] = (0, import_hooks2.useControllableProp)(checkedProp, checkedState);
  const handleChange = (0, import_react4.useCallback)((event) => {
    if (isReadOnly || isDisabled) {
      event.preventDefault();
      return;
    }
    if (!isControlled) {
      if (isChecked) {
        setCheckedState(event.target.checked);
      } else {
        setCheckedState(isIndeterminate ? true : event.target.checked);
      }
    }
    onChangeProp == null ? void 0 : onChangeProp(event);
  }, [
    isReadOnly,
    isDisabled,
    isChecked,
    isControlled,
    isIndeterminate,
    onChangeProp
  ]);
  (0, import_hooks2.useSafeLayoutEffect)(() => {
    if (inputRef.current) {
      inputRef.current.indeterminate = Boolean(isIndeterminate);
    }
  }, [isIndeterminate]);
  (0, import_hooks2.useUpdateEffect)(() => {
    if (isDisabled) {
      setFocused.off();
    }
  }, [isDisabled, setFocused]);
  (0, import_hooks2.useSafeLayoutEffect)(() => {
    const el = inputRef.current;
    if (!(el == null ? void 0 : el.form))
      return;
    el.form.onreset = () => {
      setCheckedState(!!defaultChecked);
    };
  }, []);
  const trulyDisabled = isDisabled && !isFocusable;
  const onKeyDown = (0, import_react4.useCallback)((event) => {
    if (event.key === " ") {
      setActive.on();
    }
  }, [setActive]);
  const onKeyUp = (0, import_react4.useCallback)((event) => {
    if (event.key === " ") {
      setActive.off();
    }
  }, [setActive]);
  (0, import_hooks2.useSafeLayoutEffect)(() => {
    if (!inputRef.current)
      return;
    const notInSync = inputRef.current.checked !== isChecked;
    if (notInSync) {
      setCheckedState(inputRef.current.checked);
    }
  }, [inputRef.current]);
  const getCheckboxProps = (0, import_react4.useCallback)((props2 = {}, forwardedRef = null) => {
    const onPressDown = (event) => {
      if (isFocused) {
        event.preventDefault();
      }
      setActive.on();
    };
    return {
      ...props2,
      ref: forwardedRef,
      "data-active": (0, import_utils3.dataAttr)(isActive),
      "data-hover": (0, import_utils3.dataAttr)(isHovered),
      "data-checked": (0, import_utils3.dataAttr)(isChecked),
      "data-focus": (0, import_utils3.dataAttr)(isFocused),
      "data-focus-visible": (0, import_utils3.dataAttr)(isFocused && isFocusVisible),
      "data-indeterminate": (0, import_utils3.dataAttr)(isIndeterminate),
      "data-disabled": (0, import_utils3.dataAttr)(isDisabled),
      "data-invalid": (0, import_utils3.dataAttr)(isInvalid),
      "data-readonly": (0, import_utils3.dataAttr)(isReadOnly),
      "aria-hidden": true,
      onMouseDown: (0, import_utils3.callAllHandlers)(props2.onMouseDown, onPressDown),
      onMouseUp: (0, import_utils3.callAllHandlers)(props2.onMouseUp, setActive.off),
      onMouseEnter: (0, import_utils3.callAllHandlers)(props2.onMouseEnter, setHovered.on),
      onMouseLeave: (0, import_utils3.callAllHandlers)(props2.onMouseLeave, setHovered.off)
    };
  }, [
    isActive,
    isChecked,
    isDisabled,
    isFocused,
    isFocusVisible,
    isHovered,
    isIndeterminate,
    isInvalid,
    isReadOnly,
    setActive,
    setHovered.off,
    setHovered.on
  ]);
  const getRootProps = (0, import_react4.useCallback)((props2 = {}, forwardedRef = null) => ({
    ...htmlProps,
    ...props2,
    ref: (0, import_react_utils2.mergeRefs)(forwardedRef, (node) => {
      if (!node)
        return;
      setRootIsLabelElement(node.tagName === "LABEL");
    }),
    onClick: (0, import_utils3.callAllHandlers)(props2.onClick, () => {
      var _a;
      if (!rootIsLabelElement) {
        (_a = inputRef.current) == null ? void 0 : _a.click();
        (0, import_utils3.focus)(inputRef.current, { nextTick: true });
      }
    }),
    "data-disabled": (0, import_utils3.dataAttr)(isDisabled),
    "data-checked": (0, import_utils3.dataAttr)(isChecked),
    "data-invalid": (0, import_utils3.dataAttr)(isInvalid)
  }), [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement]);
  const getInputProps = (0, import_react4.useCallback)((props2 = {}, forwardedRef = null) => {
    return {
      ...props2,
      ref: (0, import_react_utils2.mergeRefs)(inputRef, forwardedRef),
      type: "checkbox",
      name,
      value,
      id,
      tabIndex,
      onChange: (0, import_utils3.callAllHandlers)(props2.onChange, handleChange),
      onBlur: (0, import_utils3.callAllHandlers)(props2.onBlur, onBlurProp, setFocused.off),
      onFocus: (0, import_utils3.callAllHandlers)(props2.onFocus, onFocusProp, setFocused.on),
      onKeyDown: (0, import_utils3.callAllHandlers)(props2.onKeyDown, onKeyDown),
      onKeyUp: (0, import_utils3.callAllHandlers)(props2.onKeyUp, onKeyUp),
      required: isRequired,
      checked: isChecked,
      disabled: trulyDisabled,
      readOnly: isReadOnly,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      "aria-invalid": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,
      "aria-describedby": ariaDescribedBy,
      "aria-disabled": isDisabled,
      style: import_visually_hidden.visuallyHiddenStyle
    };
  }, [
    name,
    value,
    id,
    handleChange,
    setFocused.off,
    setFocused.on,
    onBlurProp,
    onFocusProp,
    onKeyDown,
    onKeyUp,
    isRequired,
    isChecked,
    trulyDisabled,
    isReadOnly,
    ariaLabel,
    ariaLabelledBy,
    ariaInvalid,
    isInvalid,
    ariaDescribedBy,
    isDisabled,
    tabIndex
  ]);
  const getLabelProps = (0, import_react4.useCallback)((props2 = {}, forwardedRef = null) => ({
    ...props2,
    ref: forwardedRef,
    onMouseDown: (0, import_utils3.callAllHandlers)(props2.onMouseDown, stopEvent),
    onTouchStart: (0, import_utils3.callAllHandlers)(props2.onTouchStart, stopEvent),
    "data-disabled": (0, import_utils3.dataAttr)(isDisabled),
    "data-checked": (0, import_utils3.dataAttr)(isChecked),
    "data-invalid": (0, import_utils3.dataAttr)(isInvalid)
  }), [isChecked, isDisabled, isInvalid]);
  const state = {
    isInvalid,
    isFocused,
    isChecked,
    isActive,
    isHovered,
    isIndeterminate,
    isDisabled,
    isReadOnly,
    isRequired
  };
  return {
    state,
    getRootProps,
    getCheckboxProps,
    getInputProps,
    getLabelProps,
    htmlProps
  };
}
function stopEvent(event) {
  event.preventDefault();
  event.stopPropagation();
}

// src/checkbox.tsx
var CheckboxControl = (0, import_system2.chakra)("span", {
  baseStyle: {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    verticalAlign: "top",
    userSelect: "none",
    flexShrink: 0
  }
});
var CheckboxRoot = (0, import_system2.chakra)("label", {
  baseStyle: {
    cursor: "pointer",
    display: "inline-flex",
    alignItems: "center",
    verticalAlign: "top",
    position: "relative"
  }
});
var Checkbox = (0, import_system2.forwardRef)(function Checkbox2(props, ref) {
  const group = useCheckboxGroupContext();
  const mergedProps = { ...group, ...props };
  const styles = (0, import_system2.useMultiStyleConfig)("Checkbox", mergedProps);
  const ownProps = (0, import_system2.omitThemingProps)(props);
  const {
    spacing = "0.5rem",
    className,
    children,
    iconColor,
    iconSize,
    icon = /* @__PURE__ */ import_react.default.createElement(CheckboxIcon, null),
    isChecked: isCheckedProp,
    isDisabled = group == null ? void 0 : group.isDisabled,
    onChange: onChangeProp,
    inputProps,
    ...rest
  } = ownProps;
  let isChecked = isCheckedProp;
  if ((group == null ? void 0 : group.value) && ownProps.value) {
    isChecked = group.value.includes(ownProps.value);
  }
  let onChange = onChangeProp;
  if ((group == null ? void 0 : group.onChange) && ownProps.value) {
    onChange = (0, import_utils4.callAll)(group.onChange, onChangeProp);
  }
  const {
    state,
    getInputProps,
    getCheckboxProps,
    getLabelProps,
    getRootProps
  } = useCheckbox({
    ...rest,
    isDisabled,
    isChecked,
    onChange
  });
  const iconStyles = (0, import_react5.useMemo)(() => ({
    opacity: state.isChecked || state.isIndeterminate ? 1 : 0,
    transform: state.isChecked || state.isIndeterminate ? "scale(1)" : "scale(0.95)",
    fontSize: iconSize,
    color: iconColor,
    ...styles.icon
  }), [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles.icon]);
  const clonedIcon = (0, import_react5.cloneElement)(icon, {
    __css: iconStyles,
    isIndeterminate: state.isIndeterminate,
    isChecked: state.isChecked
  });
  return /* @__PURE__ */ import_react.default.createElement(CheckboxRoot, {
    __css: styles.container,
    className: (0, import_utils4.cx)("chakra-checkbox", className),
    ...getRootProps()
  }, /* @__PURE__ */ import_react.default.createElement("input", {
    className: "chakra-checkbox__input",
    ...getInputProps(inputProps, ref)
  }), /* @__PURE__ */ import_react.default.createElement(CheckboxControl, {
    __css: styles.control,
    className: "chakra-checkbox__control",
    ...getCheckboxProps()
  }, clonedIcon), children && /* @__PURE__ */ import_react.default.createElement(import_system2.chakra.span, {
    className: "chakra-checkbox__label",
    ...getLabelProps(),
    __css: {
      marginStart: spacing,
      ...styles.label
    }
  }, children));
});
if (import_utils4.__DEV__) {
  Checkbox.displayName = "Checkbox";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Checkbox,
  CheckboxGroup,
  useCheckbox,
  useCheckboxGroup
});

"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AbsoluteCenter: () => AbsoluteCenter,
  AspectRatio: () => AspectRatio,
  Badge: () => Badge,
  Box: () => Box,
  Center: () => Center,
  Circle: () => Circle,
  Code: () => Code,
  Container: () => Container,
  Divider: () => Divider,
  Flex: () => Flex,
  Grid: () => Grid,
  GridItem: () => GridItem,
  HStack: () => HStack,
  Heading: () => Heading,
  Highlight: () => Highlight,
  Kbd: () => Kbd,
  Link: () => Link,
  LinkBox: () => LinkBox,
  LinkOverlay: () => LinkOverlay,
  List: () => List,
  ListIcon: () => ListIcon,
  ListItem: () => ListItem,
  Mark: () => Mark,
  OrderedList: () => OrderedList,
  SimpleGrid: () => SimpleGrid,
  Spacer: () => Spacer,
  Square: () => Square,
  Stack: () => Stack,
  StackDivider: () => StackDivider,
  StackItem: () => StackItem,
  Text: () => Text,
  UnorderedList: () => UnorderedList,
  VStack: () => VStack,
  Wrap: () => Wrap,
  WrapItem: () => WrapItem,
  useHighlight: () => useHighlight,
  useListStyles: () => useListStyles
});
module.exports = __toCommonJS(src_exports);

// ../../react-shim.js
var import_react = __toESM(require("react"));

// src/aspect-ratio.tsx
var import_system = require("@chakra-ui/system");
var import_utils = require("@chakra-ui/utils");
var import_react2 = require("react");
var AspectRatio = (0, import_system.forwardRef)(function(props, ref) {
  const { ratio = 4 / 3, children, className, ...rest } = props;
  const child = import_react2.Children.only(children);
  const _className = (0, import_utils.cx)("chakra-aspect-ratio", className);
  return /* @__PURE__ */ import_react.default.createElement(import_system.chakra.div, {
    ref,
    position: "relative",
    className: _className,
    _before: {
      height: 0,
      content: `""`,
      display: "block",
      paddingBottom: (0, import_utils.mapResponsive)(ratio, (r) => `${1 / r * 100}%`)
    },
    __css: {
      "& > *:not(style)": {
        overflow: "hidden",
        position: "absolute",
        top: "0",
        right: "0",
        bottom: "0",
        left: "0",
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        width: "100%",
        height: "100%"
      },
      "& > img, & > video": {
        objectFit: "cover"
      }
    },
    ...rest
  }, child);
});
if (import_utils.__DEV__) {
  AspectRatio.displayName = "AspectRatio";
}

// src/badge.tsx
var import_system2 = require("@chakra-ui/system");
var import_utils2 = require("@chakra-ui/utils");
var Badge = (0, import_system2.forwardRef)(function Badge2(props, ref) {
  const styles = (0, import_system2.useStyleConfig)("Badge", props);
  const { className, ...rest } = (0, import_system2.omitThemingProps)(props);
  return /* @__PURE__ */ import_react.default.createElement(import_system2.chakra.span, {
    ref,
    className: (0, import_utils2.cx)("chakra-badge", props.className),
    ...rest,
    __css: {
      display: "inline-block",
      whiteSpace: "nowrap",
      verticalAlign: "middle",
      ...styles
    }
  });
});
if (import_utils2.__DEV__) {
  Badge.displayName = "Badge";
}

// src/box.tsx
var import_system3 = require("@chakra-ui/system");
var import_utils3 = require("@chakra-ui/utils");
var Box = (0, import_system3.chakra)("div");
if (import_utils3.__DEV__) {
  Box.displayName = "Box";
}
var Square = (0, import_system3.forwardRef)(function Square2(props, ref) {
  const { size, centerContent = true, ...rest } = props;
  const styles = centerContent ? { display: "flex", alignItems: "center", justifyContent: "center" } : {};
  return /* @__PURE__ */ import_react.default.createElement(Box, {
    ref,
    boxSize: size,
    __css: {
      ...styles,
      flexShrink: 0,
      flexGrow: 0
    },
    ...rest
  });
});
if (import_utils3.__DEV__) {
  Square.displayName = "Square";
}
var Circle = (0, import_system3.forwardRef)(function Circle2(props, ref) {
  const { size, ...rest } = props;
  return /* @__PURE__ */ import_react.default.createElement(Square, {
    size,
    ref,
    borderRadius: "9999px",
    ...rest
  });
});
if (import_utils3.__DEV__) {
  Circle.displayName = "Circle";
}

// src/center.tsx
var import_system4 = require("@chakra-ui/system");
var import_utils4 = require("@chakra-ui/utils");
var Center = (0, import_system4.chakra)("div", {
  baseStyle: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }
});
if (import_utils4.__DEV__) {
  Center.displayName = "Center";
}
var centerStyles = {
  horizontal: {
    insetStart: "50%",
    transform: "translateX(-50%)"
  },
  vertical: {
    top: "50%",
    transform: "translateY(-50%)"
  },
  both: {
    insetStart: "50%",
    top: "50%",
    transform: "translate(-50%, -50%)"
  }
};
var AbsoluteCenter = (0, import_system4.forwardRef)(function AbsoluteCenter2(props, ref) {
  const { axis = "both", ...rest } = props;
  return /* @__PURE__ */ import_react.default.createElement(import_system4.chakra.div, {
    ref,
    __css: centerStyles[axis],
    ...rest,
    position: "absolute"
  });
});

// src/code.tsx
var import_system5 = require("@chakra-ui/system");
var import_utils5 = require("@chakra-ui/utils");
var Code = (0, import_system5.forwardRef)(function Code2(props, ref) {
  const styles = (0, import_system5.useStyleConfig)("Code", props);
  const { className, ...rest } = (0, import_system5.omitThemingProps)(props);
  return /* @__PURE__ */ import_react.default.createElement(import_system5.chakra.code, {
    ref,
    className: (0, import_utils5.cx)("chakra-code", props.className),
    ...rest,
    __css: {
      display: "inline-block",
      ...styles
    }
  });
});
if (import_utils5.__DEV__) {
  Code.displayName = "Code";
}

// src/container.tsx
var import_system6 = require("@chakra-ui/system");
var import_utils6 = require("@chakra-ui/utils");
var Container = (0, import_system6.forwardRef)(function Container2(props, ref) {
  const { className, centerContent, ...rest } = (0, import_system6.omitThemingProps)(props);
  const styles = (0, import_system6.useStyleConfig)("Container", props);
  return /* @__PURE__ */ import_react.default.createElement(import_system6.chakra.div, {
    ref,
    className: (0, import_utils6.cx)("chakra-container", className),
    ...rest,
    __css: {
      ...styles,
      ...centerContent && {
        display: "flex",
        flexDirection: "column",
        alignItems: "center"
      }
    }
  });
});
if (import_utils6.__DEV__) {
  Container.displayName = "Container";
}

// src/divider.tsx
var import_system7 = require("@chakra-ui/system");
var import_utils7 = require("@chakra-ui/utils");
var Divider = (0, import_system7.forwardRef)(function Divider2(props, ref) {
  const {
    borderLeftWidth,
    borderBottomWidth,
    borderTopWidth,
    borderRightWidth,
    borderWidth,
    borderStyle,
    borderColor,
    ...styles
  } = (0, import_system7.useStyleConfig)("Divider", props);
  const {
    className,
    orientation = "horizontal",
    __css,
    ...rest
  } = (0, import_system7.omitThemingProps)(props);
  const dividerStyles = {
    vertical: {
      borderLeftWidth: borderLeftWidth || borderRightWidth || borderWidth || "1px",
      height: "100%"
    },
    horizontal: {
      borderBottomWidth: borderBottomWidth || borderTopWidth || borderWidth || "1px",
      width: "100%"
    }
  };
  return /* @__PURE__ */ import_react.default.createElement(import_system7.chakra.hr, {
    ref,
    "aria-orientation": orientation,
    ...rest,
    __css: {
      ...styles,
      border: "0",
      borderColor,
      borderStyle,
      ...dividerStyles[orientation],
      ...__css
    },
    className: (0, import_utils7.cx)("chakra-divider", className)
  });
});
if (import_utils7.__DEV__) {
  Divider.displayName = "Divider";
}

// src/flex.tsx
var import_system8 = require("@chakra-ui/system");
var import_utils8 = require("@chakra-ui/utils");
var Flex = (0, import_system8.forwardRef)(function Flex2(props, ref) {
  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } = props;
  const styles = {
    display: "flex",
    flexDirection: direction,
    alignItems: align,
    justifyContent: justify,
    flexWrap: wrap,
    flexBasis: basis,
    flexGrow: grow,
    flexShrink: shrink
  };
  return /* @__PURE__ */ import_react.default.createElement(import_system8.chakra.div, {
    ref,
    __css: styles,
    ...rest
  });
});
if (import_utils8.__DEV__) {
  Flex.displayName = "Flex";
}

// src/grid.tsx
var import_system9 = require("@chakra-ui/system");
var import_utils9 = require("@chakra-ui/utils");
var Grid = (0, import_system9.forwardRef)(function Grid2(props, ref) {
  const {
    templateAreas,
    gap,
    rowGap,
    columnGap,
    column,
    row,
    autoFlow,
    autoRows,
    templateRows,
    autoColumns,
    templateColumns,
    ...rest
  } = props;
  const styles = {
    display: "grid",
    gridTemplateAreas: templateAreas,
    gridGap: gap,
    gridRowGap: rowGap,
    gridColumnGap: columnGap,
    gridAutoColumns: autoColumns,
    gridColumn: column,
    gridRow: row,
    gridAutoFlow: autoFlow,
    gridAutoRows: autoRows,
    gridTemplateRows: templateRows,
    gridTemplateColumns: templateColumns
  };
  return /* @__PURE__ */ import_react.default.createElement(import_system9.chakra.div, {
    ref,
    __css: styles,
    ...rest
  });
});
if (import_utils9.__DEV__) {
  Grid.displayName = "Grid";
}
function spanFn(span) {
  return (0, import_utils9.mapResponsive)(span, (value) => value === "auto" ? "auto" : `span ${value}/span ${value}`);
}
var GridItem = (0, import_system9.forwardRef)(function GridItem2(props, ref) {
  const {
    area,
    colSpan,
    colStart,
    colEnd,
    rowEnd,
    rowSpan,
    rowStart,
    ...rest
  } = props;
  const styles = (0, import_utils9.filterUndefined)({
    gridArea: area,
    gridColumn: spanFn(colSpan),
    gridRow: spanFn(rowSpan),
    gridColumnStart: colStart,
    gridColumnEnd: colEnd,
    gridRowStart: rowStart,
    gridRowEnd: rowEnd
  });
  return /* @__PURE__ */ import_react.default.createElement(import_system9.chakra.div, {
    ref,
    __css: styles,
    ...rest
  });
});

// src/heading.tsx
var import_system10 = require("@chakra-ui/system");
var import_utils10 = require("@chakra-ui/utils");
var Heading = (0, import_system10.forwardRef)(function Heading2(props, ref) {
  const styles = (0, import_system10.useStyleConfig)("Heading", props);
  const { className, ...rest } = (0, import_system10.omitThemingProps)(props);
  return /* @__PURE__ */ import_react.default.createElement(import_system10.chakra.h2, {
    ref,
    className: (0, import_utils10.cx)("chakra-heading", props.className),
    ...rest,
    __css: styles
  });
});
if (import_utils10.__DEV__) {
  Heading.displayName = "Heading";
}

// src/highlight.tsx
var import_system11 = require("@chakra-ui/system");
var import_react3 = require("react");
var escapeRegexp = (term) => term.replace(/[|\\{}()[\]^$+*?.-]/g, (char) => `\\${char}`);
function buildRegex(query) {
  const _query = query.filter((text) => text.length !== 0).map((text) => escapeRegexp(text.trim()));
  if (!_query.length) {
    return null;
  }
  return new RegExp(`(${_query.join("|")})`, "ig");
}
function highlightWords({ text, query }) {
  const regex = buildRegex(Array.isArray(query) ? query : [query]);
  if (!regex) {
    return [];
  }
  const result = text.split(regex).filter(Boolean);
  return result.map((str) => ({ text: str, match: regex.test(str) }));
}
function useHighlight(props) {
  const { text, query } = props;
  return (0, import_react3.useMemo)(() => highlightWords({ text, query }), [text, query]);
}
var Mark = (0, import_system11.forwardRef)(function Mark2(props, ref) {
  const styles = (0, import_system11.useStyleConfig)("Mark", props);
  const ownProps = (0, import_system11.omitThemingProps)(props);
  return /* @__PURE__ */ import_react.default.createElement(Box, {
    ref,
    ...ownProps,
    as: "mark",
    __css: { bg: "transparent", whiteSpace: "nowrap", ...styles }
  });
});
function Highlight(props) {
  const { children, query, styles } = props;
  if (typeof children !== "string") {
    throw new Error("The children prop of Highlight must be a string");
  }
  const chunks = useHighlight({ query, text: children });
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, chunks.map((chunk, index) => {
    return chunk.match ? /* @__PURE__ */ import_react.default.createElement(Mark, {
      key: index,
      sx: styles
    }, chunk.text) : /* @__PURE__ */ import_react.default.createElement(import_react3.Fragment, {
      key: index
    }, chunk.text);
  }));
}

// src/kbd.tsx
var import_system12 = require("@chakra-ui/system");
var import_utils11 = require("@chakra-ui/utils");
var Kbd = (0, import_system12.forwardRef)(function Kbd2(props, ref) {
  const styles = (0, import_system12.useStyleConfig)("Kbd", props);
  const { className, ...rest } = (0, import_system12.omitThemingProps)(props);
  return /* @__PURE__ */ import_react.default.createElement(import_system12.chakra.kbd, {
    ref,
    className: (0, import_utils11.cx)("chakra-kbd", className),
    ...rest,
    __css: {
      fontFamily: "mono",
      ...styles
    }
  });
});
if (import_utils11.__DEV__) {
  Kbd.displayName = "Kbd";
}

// src/link.tsx
var import_system13 = require("@chakra-ui/system");
var import_utils12 = require("@chakra-ui/utils");
var Link = (0, import_system13.forwardRef)(function Link2(props, ref) {
  const styles = (0, import_system13.useStyleConfig)("Link", props);
  const { className, isExternal, ...rest } = (0, import_system13.omitThemingProps)(props);
  return /* @__PURE__ */ import_react.default.createElement(import_system13.chakra.a, {
    target: isExternal ? "_blank" : void 0,
    rel: isExternal ? "noopener" : void 0,
    ref,
    className: (0, import_utils12.cx)("chakra-link", className),
    ...rest,
    __css: styles
  });
});
if (import_utils12.__DEV__) {
  Link.displayName = "Link";
}

// src/link-box.tsx
var import_system14 = require("@chakra-ui/system");
var import_utils13 = require("@chakra-ui/utils");
var LinkOverlay = (0, import_system14.forwardRef)(function LinkOverlay2(props, ref) {
  const { isExternal, target, rel, className, ...rest } = props;
  return /* @__PURE__ */ import_react.default.createElement(import_system14.chakra.a, {
    ...rest,
    ref,
    className: (0, import_utils13.cx)("chakra-linkbox__overlay", className),
    rel: isExternal ? "noopener noreferrer" : rel,
    target: isExternal ? "_blank" : target,
    __css: {
      position: "static",
      "&::before": {
        content: "''",
        cursor: "inherit",
        display: "block",
        position: "absolute",
        top: 0,
        left: 0,
        zIndex: 0,
        width: "100%",
        height: "100%"
      }
    }
  });
});
var LinkBox = (0, import_system14.forwardRef)(function LinkBox2(props, ref) {
  const { className, ...rest } = props;
  return /* @__PURE__ */ import_react.default.createElement(import_system14.chakra.div, {
    ref,
    position: "relative",
    ...rest,
    className: (0, import_utils13.cx)("chakra-linkbox", className),
    __css: {
      "a[href]:not(.chakra-linkbox__overlay), abbr[title]": {
        position: "relative",
        zIndex: 1
      }
    }
  });
});

// src/list.tsx
var import_icon = require("@chakra-ui/icon");
var import_react_utils = require("@chakra-ui/react-utils");
var import_system15 = require("@chakra-ui/system");
var import_utils14 = require("@chakra-ui/utils");
var [ListStylesProvider, useListStyles] = (0, import_react_utils.createContext)({
  name: `ListStylesContext`,
  errorMessage: `useListStyles returned is 'undefined'. Seems you forgot to wrap the components in "<List />" `
});
var List = (0, import_system15.forwardRef)(function List2(props, ref) {
  const styles = (0, import_system15.useMultiStyleConfig)("List", props);
  const {
    children,
    styleType = "none",
    stylePosition,
    spacing,
    ...rest
  } = (0, import_system15.omitThemingProps)(props);
  const validChildren = (0, import_react_utils.getValidChildren)(children);
  const selector2 = "& > *:not(style) ~ *:not(style)";
  const spacingStyle = spacing ? { [selector2]: { mt: spacing } } : {};
  return /* @__PURE__ */ import_react.default.createElement(ListStylesProvider, {
    value: styles
  }, /* @__PURE__ */ import_react.default.createElement(import_system15.chakra.ul, {
    ref,
    listStyleType: styleType,
    listStylePosition: stylePosition,
    role: "list",
    __css: { ...styles.container, ...spacingStyle },
    ...rest
  }, validChildren));
});
if (import_utils14.__DEV__) {
  List.displayName = "List";
}
var OrderedList = (0, import_system15.forwardRef)((props, ref) => {
  const { as, ...rest } = props;
  return /* @__PURE__ */ import_react.default.createElement(List, {
    ref,
    as: "ol",
    styleType: "decimal",
    marginStart: "1em",
    ...rest
  });
});
if (import_utils14.__DEV__) {
  OrderedList.displayName = "OrderedList";
}
var UnorderedList = (0, import_system15.forwardRef)(function UnorderedList2(props, ref) {
  const { as, ...rest } = props;
  return /* @__PURE__ */ import_react.default.createElement(List, {
    ref,
    as: "ul",
    styleType: "initial",
    marginStart: "1em",
    ...rest
  });
});
if (import_utils14.__DEV__) {
  UnorderedList.displayName = "UnorderedList";
}
var ListItem = (0, import_system15.forwardRef)(function ListItem2(props, ref) {
  const styles = useListStyles();
  return /* @__PURE__ */ import_react.default.createElement(import_system15.chakra.li, {
    ref,
    ...props,
    __css: styles.item
  });
});
if (import_utils14.__DEV__) {
  ListItem.displayName = "ListItem";
}
var ListIcon = (0, import_system15.forwardRef)(function ListIcon2(props, ref) {
  const styles = useListStyles();
  return /* @__PURE__ */ import_react.default.createElement(import_icon.Icon, {
    ref,
    role: "presentation",
    ...props,
    __css: styles.icon
  });
});
if (import_utils14.__DEV__) {
  ListIcon.displayName = "ListIcon";
}

// src/simple-grid.tsx
var import_system16 = require("@chakra-ui/system");
var import_utils15 = require("@chakra-ui/utils");
var SimpleGrid = (0, import_system16.forwardRef)(function SimpleGrid2(props, ref) {
  const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props;
  const theme = (0, import_system16.useTheme)();
  const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);
  return /* @__PURE__ */ import_react.default.createElement(Grid, {
    ref,
    gap: spacing,
    columnGap: spacingX,
    rowGap: spacingY,
    templateColumns,
    ...rest
  });
});
if (import_utils15.__DEV__) {
  SimpleGrid.displayName = "SimpleGrid";
}
function toPx(n) {
  return (0, import_utils15.isNumber)(n) ? `${n}px` : n;
}
function widthToColumns(width, theme) {
  return (0, import_utils15.mapResponsive)(width, (value) => {
    const _value = (0, import_system16.getToken)("sizes", value, toPx(value))(theme);
    return (0, import_utils15.isNull)(value) ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;
  });
}
function countToColumns(count) {
  return (0, import_utils15.mapResponsive)(count, (value) => (0, import_utils15.isNull)(value) ? null : `repeat(${value}, minmax(0, 1fr))`);
}

// src/spacer.tsx
var import_system17 = require("@chakra-ui/system");
var import_utils16 = require("@chakra-ui/utils");
var Spacer = (0, import_system17.chakra)("div", {
  baseStyle: {
    flex: 1,
    justifySelf: "stretch",
    alignSelf: "stretch"
  }
});
if (import_utils16.__DEV__) {
  Spacer.displayName = "Spacer";
}

// src/stack.tsx
var import_system18 = require("@chakra-ui/system");
var import_utils18 = require("@chakra-ui/utils");
var import_react_utils2 = require("@chakra-ui/react-utils");

// src/stack.utils.tsx
var import_utils17 = require("@chakra-ui/utils");
var selector = "& > *:not(style) ~ *:not(style)";
function getStackStyles(options) {
  const { spacing, direction } = options;
  const directionStyles = {
    column: {
      marginTop: spacing,
      marginEnd: 0,
      marginBottom: 0,
      marginStart: 0
    },
    row: { marginTop: 0, marginEnd: 0, marginBottom: 0, marginStart: spacing },
    "column-reverse": {
      marginTop: 0,
      marginEnd: 0,
      marginBottom: spacing,
      marginStart: 0
    },
    "row-reverse": {
      marginTop: 0,
      marginEnd: spacing,
      marginBottom: 0,
      marginStart: 0
    }
  };
  return {
    flexDirection: direction,
    [selector]: (0, import_utils17.mapResponsive)(direction, (value) => directionStyles[value])
  };
}
function getDividerStyles(options) {
  const { spacing, direction } = options;
  const dividerStyles = {
    column: {
      my: spacing,
      mx: 0,
      borderLeftWidth: 0,
      borderBottomWidth: "1px"
    },
    "column-reverse": {
      my: spacing,
      mx: 0,
      borderLeftWidth: 0,
      borderBottomWidth: "1px"
    },
    row: {
      mx: spacing,
      my: 0,
      borderLeftWidth: "1px",
      borderBottomWidth: 0
    },
    "row-reverse": {
      mx: spacing,
      my: 0,
      borderLeftWidth: "1px",
      borderBottomWidth: 0
    }
  };
  return {
    "&": (0, import_utils17.mapResponsive)(direction, (value) => dividerStyles[value])
  };
}

// src/stack.tsx
var import_react4 = require("react");
var StackDivider = (props) => /* @__PURE__ */ import_react.default.createElement(import_system18.chakra.div, {
  className: "chakra-stack__divider",
  ...props,
  __css: {
    ...props["__css"],
    borderWidth: 0,
    alignSelf: "stretch",
    borderColor: "inherit",
    width: "auto",
    height: "auto"
  }
});
var StackItem = (props) => /* @__PURE__ */ import_react.default.createElement(import_system18.chakra.div, {
  className: "chakra-stack__item",
  ...props,
  __css: {
    display: "inline-block",
    flex: "0 0 auto",
    minWidth: 0,
    ...props["__css"]
  }
});
var Stack = (0, import_system18.forwardRef)((props, ref) => {
  const {
    isInline,
    direction: directionProp,
    align,
    justify,
    spacing = "0.5rem",
    wrap,
    children,
    divider,
    className,
    shouldWrapChildren,
    ...rest
  } = props;
  const direction = isInline ? "row" : directionProp ?? "column";
  const styles = (0, import_react4.useMemo)(() => getStackStyles({ direction, spacing }), [direction, spacing]);
  const dividerStyle = (0, import_react4.useMemo)(() => getDividerStyles({ spacing, direction }), [spacing, direction]);
  const hasDivider = !!divider;
  const shouldUseChildren = !shouldWrapChildren && !hasDivider;
  const validChildren = (0, import_react_utils2.getValidChildren)(children);
  const clones = shouldUseChildren ? validChildren : validChildren.map((child, index) => {
    const key = typeof child.key !== "undefined" ? child.key : index;
    const isLast = index + 1 === validChildren.length;
    const wrappedChild = /* @__PURE__ */ import_react.default.createElement(StackItem, {
      key
    }, child);
    const _child = shouldWrapChildren ? wrappedChild : child;
    if (!hasDivider)
      return _child;
    const clonedDivider = (0, import_react4.cloneElement)(divider, {
      __css: dividerStyle
    });
    const _divider = isLast ? null : clonedDivider;
    return /* @__PURE__ */ import_react.default.createElement(import_react4.Fragment, {
      key
    }, _child, _divider);
  });
  const _className = (0, import_utils18.cx)("chakra-stack", className);
  return /* @__PURE__ */ import_react.default.createElement(import_system18.chakra.div, {
    ref,
    display: "flex",
    alignItems: align,
    justifyContent: justify,
    flexDirection: styles.flexDirection,
    flexWrap: wrap,
    className: _className,
    __css: hasDivider ? {} : { [selector]: styles[selector] },
    ...rest
  }, clones);
});
if (import_utils18.__DEV__) {
  Stack.displayName = "Stack";
}
var HStack = (0, import_system18.forwardRef)((props, ref) => /* @__PURE__ */ import_react.default.createElement(Stack, {
  align: "center",
  ...props,
  direction: "row",
  ref
}));
if (import_utils18.__DEV__) {
  HStack.displayName = "HStack";
}
var VStack = (0, import_system18.forwardRef)((props, ref) => /* @__PURE__ */ import_react.default.createElement(Stack, {
  align: "center",
  ...props,
  direction: "column",
  ref
}));
if (import_utils18.__DEV__) {
  VStack.displayName = "VStack";
}

// src/text.tsx
var import_system19 = require("@chakra-ui/system");
var import_utils19 = require("@chakra-ui/utils");
var Text = (0, import_system19.forwardRef)(function Text2(props, ref) {
  const styles = (0, import_system19.useStyleConfig)("Text", props);
  const { className, align, decoration, casing, ...rest } = (0, import_system19.omitThemingProps)(props);
  const aliasedProps = (0, import_utils19.filterUndefined)({
    textAlign: props.align,
    textDecoration: props.decoration,
    textTransform: props.casing
  });
  return /* @__PURE__ */ import_react.default.createElement(import_system19.chakra.p, {
    ref,
    className: (0, import_utils19.cx)("chakra-text", props.className),
    ...aliasedProps,
    ...rest,
    __css: styles
  });
});
if (import_utils19.__DEV__) {
  Text.displayName = "Text";
}

// src/wrap.tsx
var import_system20 = require("@chakra-ui/system");
var import_utils20 = require("@chakra-ui/utils");
var import_react5 = require("react");
function px(value) {
  return typeof value === "number" ? `${value}px` : value;
}
var Wrap = (0, import_system20.forwardRef)(function Wrap2(props, ref) {
  const {
    spacing = "0.5rem",
    spacingX,
    spacingY,
    children,
    justify,
    direction,
    align,
    className,
    shouldWrapChildren,
    ...rest
  } = props;
  const styles = (0, import_react5.useMemo)(() => {
    const { spacingX: x = spacing, spacingY: y = spacing } = {
      spacingX,
      spacingY
    };
    return {
      "--chakra-wrap-x-spacing": (theme) => (0, import_utils20.mapResponsive)(x, (value) => px((0, import_system20.tokenToCSSVar)("space", value)(theme))),
      "--chakra-wrap-y-spacing": (theme) => (0, import_utils20.mapResponsive)(y, (value) => px((0, import_system20.tokenToCSSVar)("space", value)(theme))),
      "--wrap-x-spacing": "calc(var(--chakra-wrap-x-spacing) / 2)",
      "--wrap-y-spacing": "calc(var(--chakra-wrap-y-spacing) / 2)",
      display: "flex",
      flexWrap: "wrap",
      justifyContent: justify,
      alignItems: align,
      flexDirection: direction,
      listStyleType: "none",
      padding: "0",
      margin: "calc(var(--wrap-y-spacing) * -1) calc(var(--wrap-x-spacing) * -1)",
      "& > *:not(style)": {
        margin: "var(--wrap-y-spacing) var(--wrap-x-spacing)"
      }
    };
  }, [spacing, spacingX, spacingY, justify, align, direction]);
  const childrenToRender = shouldWrapChildren ? import_react5.Children.map(children, (child, index) => /* @__PURE__ */ import_react.default.createElement(WrapItem, {
    key: index
  }, child)) : children;
  return /* @__PURE__ */ import_react.default.createElement(import_system20.chakra.div, {
    ref,
    className: (0, import_utils20.cx)("chakra-wrap", className),
    overflow: "hidden",
    ...rest
  }, /* @__PURE__ */ import_react.default.createElement(import_system20.chakra.ul, {
    className: "chakra-wrap__list",
    __css: styles
  }, childrenToRender));
});
if (import_utils20.__DEV__) {
  Wrap.displayName = "Wrap";
}
var WrapItem = (0, import_system20.forwardRef)(function WrapItem2(props, ref) {
  const { className, ...rest } = props;
  return /* @__PURE__ */ import_react.default.createElement(import_system20.chakra.li, {
    ref,
    __css: { display: "flex", alignItems: "flex-start" },
    className: (0, import_utils20.cx)("chakra-wrap__listitem", className),
    ...rest
  });
});
if (import_utils20.__DEV__) {
  WrapItem.displayName = "WrapItem";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AbsoluteCenter,
  AspectRatio,
  Badge,
  Box,
  Center,
  Circle,
  Code,
  Container,
  Divider,
  Flex,
  Grid,
  GridItem,
  HStack,
  Heading,
  Highlight,
  Kbd,
  Link,
  LinkBox,
  LinkOverlay,
  List,
  ListIcon,
  ListItem,
  Mark,
  OrderedList,
  SimpleGrid,
  Spacer,
  Square,
  Stack,
  StackDivider,
  StackItem,
  Text,
  UnorderedList,
  VStack,
  Wrap,
  WrapItem,
  useHighlight,
  useListStyles
});

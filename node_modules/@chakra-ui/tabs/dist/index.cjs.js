"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Tab: () => Tab,
  TabIndicator: () => TabIndicator,
  TabList: () => TabList,
  TabPanel: () => TabPanel,
  TabPanels: () => TabPanels,
  Tabs: () => Tabs,
  TabsDescendantsProvider: () => TabsDescendantsProvider,
  TabsProvider: () => TabsProvider,
  useTab: () => useTab,
  useTabIndicator: () => useTabIndicator,
  useTabList: () => useTabList,
  useTabPanel: () => useTabPanel,
  useTabPanels: () => useTabPanels,
  useTabs: () => useTabs,
  useTabsContext: () => useTabsContext,
  useTabsDescendant: () => useTabsDescendant,
  useTabsDescendants: () => useTabsDescendants,
  useTabsDescendantsContext: () => useTabsDescendantsContext,
  useTabsStyles: () => useTabsStyles
});
module.exports = __toCommonJS(src_exports);

// ../../react-shim.js
var import_react = __toESM(require("react"));

// src/tabs.tsx
var import_react_utils2 = require("@chakra-ui/react-utils");
var import_system = require("@chakra-ui/system");
var import_utils2 = require("@chakra-ui/utils");
var import_react3 = require("react");

// src/use-tabs.ts
var import_clickable = require("@chakra-ui/clickable");
var import_descendant = require("@chakra-ui/descendant");
var import_hooks = require("@chakra-ui/hooks");
var import_react_utils = require("@chakra-ui/react-utils");
var import_utils = require("@chakra-ui/utils");
var import_react2 = require("react");
var [
  TabsDescendantsProvider,
  useTabsDescendantsContext,
  useTabsDescendants,
  useTabsDescendant
] = (0, import_descendant.createDescendantContext)();
function useTabs(props) {
  const {
    defaultIndex,
    onChange,
    index,
    isManual,
    isLazy,
    lazyBehavior = "unmount",
    orientation = "horizontal",
    direction = "ltr",
    ...htmlProps
  } = props;
  const [focusedIndex, setFocusedIndex] = (0, import_react2.useState)(defaultIndex ?? 0);
  const [selectedIndex, setSelectedIndex] = (0, import_hooks.useControllableState)({
    defaultValue: defaultIndex ?? 0,
    value: index,
    onChange
  });
  (0, import_react2.useEffect)(() => {
    if (index != null) {
      setFocusedIndex(index);
    }
  }, [index]);
  const descendants = useTabsDescendants();
  const id = (0, import_hooks.useId)(props.id, `tabs`);
  return {
    id,
    selectedIndex,
    focusedIndex,
    setSelectedIndex,
    setFocusedIndex,
    isManual,
    isLazy,
    lazyBehavior,
    orientation,
    descendants,
    direction,
    htmlProps
  };
}
var [TabsProvider, useTabsContext] = (0, import_react_utils.createContext)({
  name: "TabsContext",
  errorMessage: "useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />"
});
function useTabList(props) {
  const { focusedIndex, orientation, direction } = useTabsContext();
  const descendants = useTabsDescendantsContext();
  const onKeyDown = (0, import_react2.useCallback)((event) => {
    const nextTab = () => {
      const next = descendants.nextEnabled(focusedIndex);
      if (next)
        (0, import_utils.focus)(next.node);
    };
    const prevTab = () => {
      const prev = descendants.prevEnabled(focusedIndex);
      if (prev)
        (0, import_utils.focus)(prev.node);
    };
    const firstTab = () => {
      const first = descendants.firstEnabled();
      if (first)
        (0, import_utils.focus)(first.node);
    };
    const lastTab = () => {
      const last = descendants.lastEnabled();
      if (last)
        (0, import_utils.focus)(last.node);
    };
    const isHorizontal = orientation === "horizontal";
    const isVertical = orientation === "vertical";
    const eventKey = (0, import_utils.normalizeEventKey)(event);
    const ArrowStart = direction === "ltr" ? "ArrowLeft" : "ArrowRight";
    const ArrowEnd = direction === "ltr" ? "ArrowRight" : "ArrowLeft";
    const keyMap = {
      [ArrowStart]: () => isHorizontal && prevTab(),
      [ArrowEnd]: () => isHorizontal && nextTab(),
      ArrowDown: () => isVertical && nextTab(),
      ArrowUp: () => isVertical && prevTab(),
      Home: firstTab,
      End: lastTab
    };
    const action = keyMap[eventKey];
    if (action) {
      event.preventDefault();
      action(event);
    }
  }, [descendants, focusedIndex, orientation, direction]);
  return {
    ...props,
    role: "tablist",
    "aria-orientation": orientation,
    onKeyDown: (0, import_utils.callAllHandlers)(props.onKeyDown, onKeyDown)
  };
}
function useTab(props) {
  const { isDisabled, isFocusable, ...htmlProps } = props;
  const { setSelectedIndex, isManual, id, setFocusedIndex, selectedIndex } = useTabsContext();
  const { index, register } = useTabsDescendant({
    disabled: isDisabled && !isFocusable
  });
  const isSelected = index === selectedIndex;
  const onClick = () => {
    setSelectedIndex(index);
  };
  const onFocus = () => {
    setFocusedIndex(index);
    const isDisabledButFocusable = isDisabled && isFocusable;
    const shouldSelect = !isManual && !isDisabledButFocusable;
    if (shouldSelect) {
      setSelectedIndex(index);
    }
  };
  const clickableProps = (0, import_clickable.useClickable)({
    ...htmlProps,
    ref: (0, import_react_utils.mergeRefs)(register, props.ref),
    isDisabled,
    isFocusable,
    onClick: (0, import_utils.callAllHandlers)(props.onClick, onClick)
  });
  const type = "button";
  return {
    ...clickableProps,
    id: makeTabId(id, index),
    role: "tab",
    tabIndex: isSelected ? 0 : -1,
    type,
    "aria-selected": isSelected,
    "aria-controls": makeTabPanelId(id, index),
    onFocus: isDisabled ? void 0 : (0, import_utils.callAllHandlers)(props.onFocus, onFocus)
  };
}
function useTabPanels(props) {
  const context = useTabsContext();
  const { id, selectedIndex } = context;
  const validChildren = (0, import_react_utils.getValidChildren)(props.children);
  const children = validChildren.map((child, index) => (0, import_react2.cloneElement)(child, {
    isSelected: index === selectedIndex,
    id: makeTabPanelId(id, index),
    "aria-labelledby": makeTabId(id, index)
  }));
  return { ...props, children };
}
function useTabPanel(props) {
  const { isSelected, id, children, ...htmlProps } = props;
  const { isLazy, lazyBehavior } = useTabsContext();
  const hasBeenSelected = (0, import_react2.useRef)(false);
  if (isSelected) {
    hasBeenSelected.current = true;
  }
  const shouldRenderChildren = (0, import_utils.determineLazyBehavior)({
    hasBeenSelected: hasBeenSelected.current,
    isSelected,
    isLazy,
    lazyBehavior
  });
  return {
    tabIndex: 0,
    ...htmlProps,
    children: shouldRenderChildren ? children : null,
    role: "tabpanel",
    hidden: !isSelected,
    id
  };
}
function useTabIndicator() {
  const context = useTabsContext();
  const descendants = useTabsDescendantsContext();
  const { selectedIndex, orientation } = context;
  const isHorizontal = orientation === "horizontal";
  const isVertical = orientation === "vertical";
  const [rect, setRect] = (0, import_react2.useState)(() => {
    if (isHorizontal)
      return { left: 0, width: 0 };
    if (isVertical)
      return { top: 0, height: 0 };
    return void 0;
  });
  const [hasMeasured, setHasMeasured] = (0, import_react2.useState)(false);
  (0, import_hooks.useSafeLayoutEffect)(() => {
    if ((0, import_utils.isUndefined)(selectedIndex))
      return void 0;
    const tab = descendants.item(selectedIndex);
    if ((0, import_utils.isUndefined)(tab))
      return void 0;
    if (isHorizontal) {
      setRect({ left: tab.node.offsetLeft, width: tab.node.offsetWidth });
    }
    if (isVertical) {
      setRect({ top: tab.node.offsetTop, height: tab.node.offsetHeight });
    }
    const id = requestAnimationFrame(() => {
      setHasMeasured(true);
    });
    return () => {
      if (id) {
        cancelAnimationFrame(id);
      }
    };
  }, [selectedIndex, isHorizontal, isVertical, descendants]);
  return {
    position: "absolute",
    transitionProperty: "left, right, top, bottom, height, width",
    transitionDuration: hasMeasured ? "200ms" : "0ms",
    transitionTimingFunction: "cubic-bezier(0, 0, 0.2, 1)",
    ...rect
  };
}
function makeTabId(id, index) {
  return `${id}--tab-${index}`;
}
function makeTabPanelId(id, index) {
  return `${id}--tabpanel-${index}`;
}

// src/tabs.tsx
var [TabsStylesProvider, useTabsStyles] = (0, import_react_utils2.createContext)({
  name: `TabsStylesContext`,
  errorMessage: `useTabsStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Tabs />" `
});
var Tabs = (0, import_system.forwardRef)(function Tabs2(props, ref) {
  const styles = (0, import_system.useMultiStyleConfig)("Tabs", props);
  const { children, className, ...rest } = (0, import_system.omitThemingProps)(props);
  const { htmlProps, descendants, ...ctx } = useTabs(rest);
  const context = (0, import_react3.useMemo)(() => ctx, [ctx]);
  const rootProps = (0, import_utils2.omit)(htmlProps, ["isFitted"]);
  return /* @__PURE__ */ import_react.default.createElement(TabsDescendantsProvider, {
    value: descendants
  }, /* @__PURE__ */ import_react.default.createElement(TabsProvider, {
    value: context
  }, /* @__PURE__ */ import_react.default.createElement(TabsStylesProvider, {
    value: styles
  }, /* @__PURE__ */ import_react.default.createElement(import_system.chakra.div, {
    className: (0, import_utils2.cx)("chakra-tabs", className),
    ref,
    ...rootProps,
    __css: styles.root
  }, children))));
});
if (import_utils2.__DEV__) {
  Tabs.displayName = "Tabs";
}
var Tab = (0, import_system.forwardRef)(function Tab2(props, ref) {
  const styles = useTabsStyles();
  const tabProps = useTab({ ...props, ref });
  const tabStyles = {
    outline: "0",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    ...styles.tab
  };
  return /* @__PURE__ */ import_react.default.createElement(import_system.chakra.button, {
    ...tabProps,
    className: (0, import_utils2.cx)("chakra-tabs__tab", props.className),
    __css: tabStyles
  });
});
if (import_utils2.__DEV__) {
  Tab.displayName = "Tab";
}
var TabList = (0, import_system.forwardRef)(function TabList2(props, ref) {
  const tablistProps = useTabList({ ...props, ref });
  const styles = useTabsStyles();
  const tablistStyles = {
    display: "flex",
    ...styles.tablist
  };
  return /* @__PURE__ */ import_react.default.createElement(import_system.chakra.div, {
    ...tablistProps,
    className: (0, import_utils2.cx)("chakra-tabs__tablist", props.className),
    __css: tablistStyles
  });
});
if (import_utils2.__DEV__) {
  TabList.displayName = "TabList";
}
var TabPanel = (0, import_system.forwardRef)(function TabPanel2(props, ref) {
  const panelProps = useTabPanel({ ...props, ref });
  const styles = useTabsStyles();
  return /* @__PURE__ */ import_react.default.createElement(import_system.chakra.div, {
    outline: "0",
    ...panelProps,
    className: (0, import_utils2.cx)("chakra-tabs__tab-panel", props.className),
    __css: styles.tabpanel
  });
});
if (import_utils2.__DEV__) {
  TabPanel.displayName = "TabPanel";
}
var TabPanels = (0, import_system.forwardRef)(function TabPanels2(props, ref) {
  const panelsProps = useTabPanels(props);
  const styles = useTabsStyles();
  return /* @__PURE__ */ import_react.default.createElement(import_system.chakra.div, {
    ...panelsProps,
    width: "100%",
    ref,
    className: (0, import_utils2.cx)("chakra-tabs__tab-panels", props.className),
    __css: styles.tabpanels
  });
});
if (import_utils2.__DEV__) {
  TabPanels.displayName = "TabPanels";
}
var TabIndicator = (0, import_system.forwardRef)(function TabIndicator2(props, ref) {
  const indicatorStyle = useTabIndicator();
  const style = {
    ...props.style,
    ...indicatorStyle
  };
  const styles = useTabsStyles();
  return /* @__PURE__ */ import_react.default.createElement(import_system.chakra.div, {
    ref,
    ...props,
    className: (0, import_utils2.cx)("chakra-tabs__tab-indicator", props.className),
    style,
    __css: styles.indicator
  });
});
if (import_utils2.__DEV__) {
  TabIndicator.displayName = "TabIndicator";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Tab,
  TabIndicator,
  TabList,
  TabPanel,
  TabPanels,
  Tabs,
  TabsDescendantsProvider,
  TabsProvider,
  useTab,
  useTabIndicator,
  useTabList,
  useTabPanel,
  useTabPanels,
  useTabs,
  useTabsContext,
  useTabsDescendant,
  useTabsDescendants,
  useTabsDescendantsContext,
  useTabsStyles
});

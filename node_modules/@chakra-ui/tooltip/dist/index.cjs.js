"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Tooltip: () => Tooltip,
  useTooltip: () => useTooltip
});
module.exports = __toCommonJS(src_exports);

// ../../react-shim.js
var import_react = __toESM(require("react"));

// src/tooltip.tsx
var import_popper2 = require("@chakra-ui/popper");
var import_portal = require("@chakra-ui/portal");
var import_system = require("@chakra-ui/system");
var import_utils2 = require("@chakra-ui/utils");
var import_visually_hidden = require("@chakra-ui/visually-hidden");
var import_framer_motion = require("framer-motion");
var import_react3 = require("react");

// src/tooltip.transition.tsx
var scale = {
  exit: {
    scale: 0.85,
    opacity: 0,
    transition: {
      opacity: { duration: 0.15, easings: "easeInOut" },
      scale: { duration: 0.2, easings: "easeInOut" }
    }
  },
  enter: {
    scale: 1,
    opacity: 1,
    transition: {
      opacity: { easings: "easeOut", duration: 0.2 },
      scale: { duration: 0.2, ease: [0.175, 0.885, 0.4, 1.1] }
    }
  }
};

// src/use-tooltip.ts
var import_hooks = require("@chakra-ui/hooks");
var import_popper = require("@chakra-ui/popper");
var import_react_utils = require("@chakra-ui/react-utils");
var import_utils = require("@chakra-ui/utils");
var import_react2 = require("react");
function useTooltip(props = {}) {
  const {
    openDelay = 0,
    closeDelay = 0,
    closeOnClick = true,
    closeOnMouseDown,
    closeOnEsc = true,
    onOpen: onOpenProp,
    onClose: onCloseProp,
    placement,
    id,
    isOpen: isOpenProp,
    defaultIsOpen,
    arrowSize = 10,
    arrowShadowColor,
    arrowPadding,
    modifiers,
    isDisabled,
    gutter,
    offset,
    direction,
    ...htmlProps
  } = props;
  const { isOpen, onOpen, onClose } = (0, import_hooks.useDisclosure)({
    isOpen: isOpenProp,
    defaultIsOpen,
    onOpen: onOpenProp,
    onClose: onCloseProp
  });
  const { referenceRef, getPopperProps, getArrowInnerProps, getArrowProps } = (0, import_popper.usePopper)({
    enabled: isOpen,
    placement,
    arrowPadding,
    modifiers,
    gutter,
    offset,
    direction
  });
  const tooltipId = (0, import_hooks.useId)(id, "tooltip");
  const ref = (0, import_react2.useRef)(null);
  const enterTimeout = (0, import_react2.useRef)();
  const exitTimeout = (0, import_react2.useRef)();
  const openWithDelay = (0, import_react2.useCallback)(() => {
    if (!isDisabled && !enterTimeout.current) {
      enterTimeout.current = window.setTimeout(onOpen, openDelay);
    }
  }, [isDisabled, onOpen, openDelay]);
  const closeWithDelay = (0, import_react2.useCallback)(() => {
    if (enterTimeout.current) {
      clearTimeout(enterTimeout.current);
      enterTimeout.current = void 0;
    }
    exitTimeout.current = window.setTimeout(onClose, closeDelay);
  }, [closeDelay, onClose]);
  const onClick = (0, import_react2.useCallback)(() => {
    if (isOpen && closeOnClick) {
      closeWithDelay();
    }
  }, [closeOnClick, closeWithDelay, isOpen]);
  const onMouseDown = (0, import_react2.useCallback)(() => {
    if (isOpen && closeOnMouseDown) {
      closeWithDelay();
    }
  }, [closeOnMouseDown, closeWithDelay, isOpen]);
  const onKeyDown = (0, import_react2.useCallback)((event) => {
    if (isOpen && event.key === "Escape") {
      closeWithDelay();
    }
  }, [isOpen, closeWithDelay]);
  (0, import_hooks.useEventListener)("keydown", closeOnEsc ? onKeyDown : void 0);
  (0, import_react2.useEffect)(() => () => {
    clearTimeout(enterTimeout.current);
    clearTimeout(exitTimeout.current);
  }, []);
  (0, import_hooks.useEventListener)("mouseleave", closeWithDelay, () => ref.current);
  const getTriggerProps = (0, import_react2.useCallback)((props2 = {}, _ref = null) => {
    const triggerProps = {
      ...props2,
      ref: (0, import_react_utils.mergeRefs)(ref, _ref, referenceRef),
      onMouseEnter: (0, import_utils.callAllHandlers)(props2.onMouseEnter, openWithDelay),
      onClick: (0, import_utils.callAllHandlers)(props2.onClick, onClick),
      onMouseDown: (0, import_utils.callAllHandlers)(props2.onMouseDown, onMouseDown),
      onFocus: (0, import_utils.callAllHandlers)(props2.onFocus, openWithDelay),
      onBlur: (0, import_utils.callAllHandlers)(props2.onBlur, closeWithDelay),
      "aria-describedby": isOpen ? tooltipId : void 0
    };
    return triggerProps;
  }, [
    openWithDelay,
    closeWithDelay,
    onMouseDown,
    isOpen,
    tooltipId,
    onClick,
    referenceRef
  ]);
  const getTooltipPositionerProps = (0, import_react2.useCallback)((props2 = {}, forwardedRef = null) => getPopperProps({
    ...props2,
    style: {
      ...props2.style,
      [import_popper.popperCSSVars.arrowSize.var]: arrowSize ? (0, import_utils.px)(arrowSize) : void 0,
      [import_popper.popperCSSVars.arrowShadowColor.var]: arrowShadowColor
    }
  }, forwardedRef), [getPopperProps, arrowSize, arrowShadowColor]);
  const getTooltipProps = (0, import_react2.useCallback)((props2 = {}, ref2 = null) => {
    const tooltipProps = {
      ref: ref2,
      ...htmlProps,
      ...props2,
      id: tooltipId,
      role: "tooltip",
      style: {
        ...props2.style,
        position: "relative",
        transformOrigin: import_popper.popperCSSVars.transformOrigin.varRef
      }
    };
    return tooltipProps;
  }, [htmlProps, tooltipId]);
  return {
    isOpen,
    show: openWithDelay,
    hide: closeWithDelay,
    getTriggerProps,
    getTooltipProps,
    getTooltipPositionerProps,
    getArrowProps,
    getArrowInnerProps
  };
}

// src/tooltip.tsx
var StyledTooltip = (0, import_system.chakra)(import_framer_motion.motion.div);
var Tooltip = (0, import_system.forwardRef)((props, ref) => {
  const styles = (0, import_system.useStyleConfig)("Tooltip", props);
  const ownProps = (0, import_system.omitThemingProps)(props);
  const theme = (0, import_system.useTheme)();
  const {
    children,
    label,
    shouldWrapChildren,
    "aria-label": ariaLabel,
    hasArrow,
    bg,
    portalProps,
    background,
    backgroundColor,
    bgColor,
    ...rest
  } = ownProps;
  const userDefinedBg = background ?? backgroundColor ?? bg ?? bgColor;
  if (userDefinedBg) {
    styles.bg = userDefinedBg;
    styles[import_popper2.popperCSSVars.arrowBg.var] = (0, import_utils2.getCSSVar)(theme, "colors", userDefinedBg);
  }
  const tooltip = useTooltip({ ...rest, direction: theme.direction });
  const shouldWrap = (0, import_utils2.isString)(children) || shouldWrapChildren;
  let trigger;
  if (shouldWrap) {
    trigger = /* @__PURE__ */ import_react.default.createElement(import_system.chakra.span, {
      tabIndex: 0,
      ...tooltip.getTriggerProps()
    }, children);
  } else {
    const child = import_react3.Children.only(children);
    trigger = (0, import_react3.cloneElement)(child, tooltip.getTriggerProps(child.props, child.ref));
  }
  const hasAriaLabel = !!ariaLabel;
  const _tooltipProps = tooltip.getTooltipProps({}, ref);
  const tooltipProps = hasAriaLabel ? (0, import_utils2.omit)(_tooltipProps, ["role", "id"]) : _tooltipProps;
  const hiddenProps = (0, import_utils2.pick)(_tooltipProps, ["role", "id"]);
  if (!label) {
    return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, children);
  }
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, trigger, /* @__PURE__ */ import_react.default.createElement(import_framer_motion.AnimatePresence, null, tooltip.isOpen && /* @__PURE__ */ import_react.default.createElement(import_portal.Portal, {
    ...portalProps
  }, /* @__PURE__ */ import_react.default.createElement(import_system.chakra.div, {
    ...tooltip.getTooltipPositionerProps(),
    __css: {
      zIndex: styles.zIndex,
      pointerEvents: "none"
    }
  }, /* @__PURE__ */ import_react.default.createElement(StyledTooltip, {
    variants: scale,
    ...tooltipProps,
    initial: "exit",
    animate: "enter",
    exit: "exit",
    __css: styles
  }, label, hasAriaLabel && /* @__PURE__ */ import_react.default.createElement(import_visually_hidden.VisuallyHidden, {
    ...hiddenProps
  }, ariaLabel), hasArrow && /* @__PURE__ */ import_react.default.createElement(import_system.chakra.div, {
    "data-popper-arrow": true,
    className: "chakra-tooltip__arrow-wrapper"
  }, /* @__PURE__ */ import_react.default.createElement(import_system.chakra.div, {
    "data-popper-arrow-inner": true,
    className: "chakra-tooltip__arrow",
    __css: { bg: styles.bg }
  })))))));
});
if (import_utils2.__DEV__) {
  Tooltip.displayName = "Tooltip";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Tooltip,
  useTooltip
});

// ../../react-shim.js
import React from "react";

// src/radio.tsx
import {
  chakra as chakra2,
  forwardRef as forwardRef2,
  layoutPropNames,
  omitThemingProps,
  useMultiStyleConfig
} from "@chakra-ui/system";
import { callAll, split, __DEV__ as __DEV__2 } from "@chakra-ui/utils";

// src/radio-group.tsx
import {
  chakra,
  forwardRef
} from "@chakra-ui/system";
import { cx, __DEV__ } from "@chakra-ui/utils";
import { createContext } from "@chakra-ui/react-utils";

// src/use-radio-group.ts
import { useControllableProp, useId } from "@chakra-ui/hooks";
import { isInputEvent } from "@chakra-ui/utils";
import { mergeRefs } from "@chakra-ui/react-utils";
import { useCallback, useRef, useState } from "react";
function useRadioGroup(props = {}) {
  const {
    onChange: onChangeProp,
    value: valueProp,
    defaultValue,
    name: nameProp,
    isDisabled,
    isFocusable,
    isNative,
    ...htmlProps
  } = props;
  const [valueState, setValue] = useState(defaultValue || "");
  const [isControlled, value] = useControllableProp(valueProp, valueState);
  const ref = useRef(null);
  const focus = useCallback(() => {
    const rootNode = ref.current;
    if (!rootNode)
      return;
    let query = `input:not(:disabled):checked`;
    const firstEnabledAndCheckedInput = rootNode.querySelector(query);
    if (firstEnabledAndCheckedInput) {
      firstEnabledAndCheckedInput.focus();
      return;
    }
    query = `input:not(:disabled)`;
    const firstEnabledInput = rootNode.querySelector(query);
    firstEnabledInput == null ? void 0 : firstEnabledInput.focus();
  }, []);
  const fallbackName = useId(void 0, `radio`);
  const name = nameProp || fallbackName;
  const onChange = useCallback((eventOrValue) => {
    const nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;
    if (!isControlled) {
      setValue(nextValue);
    }
    onChangeProp == null ? void 0 : onChangeProp(String(nextValue));
  }, [onChangeProp, isControlled]);
  const getRootProps = useCallback((props2 = {}, forwardedRef = null) => ({
    ...props2,
    ref: mergeRefs(forwardedRef, ref),
    role: "radiogroup"
  }), []);
  const getRadioProps = useCallback((props2 = {}, ref2 = null) => {
    const checkedKey = isNative ? "checked" : "isChecked";
    return {
      ...props2,
      ref: ref2,
      name,
      [checkedKey]: value != null ? props2.value === value : void 0,
      onChange,
      "data-radiogroup": true
    };
  }, [isNative, name, onChange, value]);
  return {
    getRootProps,
    getRadioProps,
    name,
    ref,
    focus,
    setValue,
    value,
    onChange,
    isDisabled,
    isFocusable,
    htmlProps
  };
}

// src/radio-group.tsx
import { useMemo } from "react";
var [RadioGroupProvider, useRadioGroupContext] = createContext({
  name: "RadioGroupContext",
  strict: false
});
var RadioGroup = forwardRef((props, ref) => {
  const {
    colorScheme,
    size,
    variant,
    children,
    className,
    isDisabled,
    isFocusable,
    ...rest
  } = props;
  const { value, onChange, getRootProps, name, htmlProps } = useRadioGroup(rest);
  const group = useMemo(() => ({
    name,
    size,
    onChange,
    colorScheme,
    value,
    variant,
    isDisabled,
    isFocusable
  }), [
    name,
    size,
    onChange,
    colorScheme,
    value,
    variant,
    isDisabled,
    isFocusable
  ]);
  const groupProps = getRootProps(htmlProps, ref);
  const _className = cx("chakra-radio-group", className);
  return /* @__PURE__ */ React.createElement(RadioGroupProvider, {
    value: group
  }, /* @__PURE__ */ React.createElement(chakra.div, {
    ...groupProps,
    className: _className
  }, children));
});
if (__DEV__) {
  RadioGroup.displayName = "RadioGroup";
}

// src/use-radio.ts
import { useFormControlContext } from "@chakra-ui/form-control";
import { useBoolean, useControllableProp as useControllableProp2, useId as useId2 } from "@chakra-ui/hooks";
import { ariaAttr, callAllHandlers, dataAttr } from "@chakra-ui/utils";
import { visuallyHiddenStyle } from "@chakra-ui/visually-hidden";
import { trackFocusVisible } from "@zag-js/focus-visible";
import { useCallback as useCallback2, useEffect, useState as useState2 } from "react";
function useRadio(props = {}) {
  const {
    defaultChecked,
    isChecked: isCheckedProp,
    isFocusable,
    isDisabled: isDisabledProp,
    isReadOnly: isReadOnlyProp,
    isRequired: isRequiredProp,
    onChange,
    isInvalid: isInvalidProp,
    name,
    value,
    id: idProp,
    "data-radiogroup": dataRadioGroup,
    "aria-describedby": ariaDescribedBy,
    ...htmlProps
  } = props;
  const uuid = useId2(void 0, "radio");
  const formControl = useFormControlContext();
  const group = useRadioGroupContext();
  const isWithinRadioGroup = !!group || !!dataRadioGroup;
  const isWithinFormControl = !!formControl;
  let id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;
  id = idProp ?? id;
  const isDisabled = isDisabledProp ?? (formControl == null ? void 0 : formControl.isDisabled);
  const isReadOnly = isReadOnlyProp ?? (formControl == null ? void 0 : formControl.isReadOnly);
  const isRequired = isRequiredProp ?? (formControl == null ? void 0 : formControl.isRequired);
  const isInvalid = isInvalidProp ?? (formControl == null ? void 0 : formControl.isInvalid);
  const [isFocusVisible, setIsFocusVisible] = useState2(false);
  const [isFocused, setFocused] = useBoolean();
  const [isHovered, setHovering] = useBoolean();
  const [isActive, setActive] = useBoolean();
  const [isCheckedState, setChecked] = useState2(Boolean(defaultChecked));
  const [isControlled, isChecked] = useControllableProp2(isCheckedProp, isCheckedState);
  useEffect(() => {
    return trackFocusVisible(setIsFocusVisible);
  }, []);
  const handleChange = useCallback2((event) => {
    if (isReadOnly || isDisabled) {
      event.preventDefault();
      return;
    }
    if (!isControlled) {
      setChecked(event.target.checked);
    }
    onChange == null ? void 0 : onChange(event);
  }, [isControlled, isDisabled, isReadOnly, onChange]);
  const onKeyDown = useCallback2((event) => {
    if (event.key === " ") {
      setActive.on();
    }
  }, [setActive]);
  const onKeyUp = useCallback2((event) => {
    if (event.key === " ") {
      setActive.off();
    }
  }, [setActive]);
  const getRadioProps = useCallback2((props2 = {}, ref = null) => ({
    ...props2,
    ref,
    "data-active": dataAttr(isActive),
    "data-hover": dataAttr(isHovered),
    "data-disabled": dataAttr(isDisabled),
    "data-invalid": dataAttr(isInvalid),
    "data-checked": dataAttr(isChecked),
    "data-focus": dataAttr(isFocused),
    "data-focus-visible": dataAttr(isFocused && isFocusVisible),
    "data-readonly": dataAttr(isReadOnly),
    "aria-hidden": true,
    onMouseDown: callAllHandlers(props2.onMouseDown, setActive.on),
    onMouseUp: callAllHandlers(props2.onMouseUp, setActive.off),
    onMouseEnter: callAllHandlers(props2.onMouseEnter, setHovering.on),
    onMouseLeave: callAllHandlers(props2.onMouseLeave, setHovering.off)
  }), [
    isActive,
    isHovered,
    isDisabled,
    isInvalid,
    isChecked,
    isFocused,
    isReadOnly,
    setActive.on,
    setActive.off,
    setHovering.on,
    setHovering.off,
    isFocusVisible
  ]);
  const { onFocus, onBlur } = formControl ?? {};
  const getInputProps = useCallback2((props2 = {}, ref = null) => {
    const trulyDisabled = isDisabled && !isFocusable;
    return {
      ...props2,
      id,
      ref,
      type: "radio",
      name,
      value,
      onChange: callAllHandlers(props2.onChange, handleChange),
      onBlur: callAllHandlers(onBlur, props2.onBlur, setFocused.off),
      onFocus: callAllHandlers(onFocus, props2.onFocus, setFocused.on),
      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),
      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),
      checked: isChecked,
      disabled: trulyDisabled,
      readOnly: isReadOnly,
      required: isRequired,
      "aria-invalid": ariaAttr(isInvalid),
      "aria-disabled": ariaAttr(trulyDisabled),
      "aria-required": ariaAttr(isRequired),
      "data-readonly": dataAttr(isReadOnly),
      "aria-describedby": ariaDescribedBy,
      style: visuallyHiddenStyle
    };
  }, [
    isDisabled,
    isFocusable,
    id,
    name,
    value,
    handleChange,
    onBlur,
    setFocused,
    onFocus,
    onKeyDown,
    onKeyUp,
    isChecked,
    isReadOnly,
    isRequired,
    isInvalid,
    ariaDescribedBy
  ]);
  const getLabelProps = (props2 = {}, ref = null) => ({
    ...props2,
    ref,
    onMouseDown: callAllHandlers(props2.onMouseDown, stop),
    onTouchStart: callAllHandlers(props2.onTouchStart, stop),
    "data-disabled": dataAttr(isDisabled),
    "data-checked": dataAttr(isChecked),
    "data-invalid": dataAttr(isInvalid)
  });
  const getRootProps = (props2, ref = null) => ({
    ...props2,
    ref,
    "data-disabled": dataAttr(isDisabled),
    "data-checked": dataAttr(isChecked),
    "data-invalid": dataAttr(isInvalid)
  });
  const state = {
    isInvalid,
    isFocused,
    isChecked,
    isActive,
    isHovered,
    isDisabled,
    isReadOnly,
    isRequired
  };
  return {
    state,
    getCheckboxProps: getRadioProps,
    getInputProps,
    getLabelProps,
    getRootProps,
    htmlProps
  };
}
function stop(event) {
  event.preventDefault();
  event.stopPropagation();
}

// src/radio.tsx
var Radio = forwardRef2((props, ref) => {
  const group = useRadioGroupContext();
  const { onChange: onChangeProp, value: valueProp } = props;
  const styles = useMultiStyleConfig("Radio", { ...group, ...props });
  const ownProps = omitThemingProps(props);
  const {
    spacing = "0.5rem",
    children,
    isDisabled = group == null ? void 0 : group.isDisabled,
    isFocusable = group == null ? void 0 : group.isFocusable,
    inputProps: htmlInputProps,
    ...rest
  } = ownProps;
  let isChecked = props.isChecked;
  if ((group == null ? void 0 : group.value) != null && valueProp != null) {
    isChecked = group.value === valueProp;
  }
  let onChange = onChangeProp;
  if ((group == null ? void 0 : group.onChange) && valueProp != null) {
    onChange = callAll(group.onChange, onChangeProp);
  }
  const name = (props == null ? void 0 : props.name) ?? (group == null ? void 0 : group.name);
  const {
    getInputProps,
    getCheckboxProps,
    getLabelProps,
    getRootProps,
    htmlProps
  } = useRadio({
    ...rest,
    isChecked,
    isFocusable,
    isDisabled,
    onChange,
    name
  });
  const [layoutProps, otherProps] = split(htmlProps, layoutPropNames);
  const checkboxProps = getCheckboxProps(otherProps);
  const inputProps = getInputProps(htmlInputProps, ref);
  const labelProps = getLabelProps();
  const rootProps = Object.assign({}, layoutProps, getRootProps());
  const rootStyles = {
    display: "inline-flex",
    alignItems: "center",
    verticalAlign: "top",
    cursor: "pointer",
    position: "relative",
    ...styles.container
  };
  const checkboxStyles = {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0,
    ...styles.control
  };
  const labelStyles = {
    userSelect: "none",
    marginStart: spacing,
    ...styles.label
  };
  return /* @__PURE__ */ React.createElement(chakra2.label, {
    className: "chakra-radio",
    ...rootProps,
    __css: rootStyles
  }, /* @__PURE__ */ React.createElement("input", {
    className: "chakra-radio__input",
    ...inputProps
  }), /* @__PURE__ */ React.createElement(chakra2.span, {
    className: "chakra-radio__control",
    ...checkboxProps,
    __css: checkboxStyles
  }), children && /* @__PURE__ */ React.createElement(chakra2.span, {
    className: "chakra-radio__label",
    ...labelProps,
    __css: labelStyles
  }, children));
});
if (__DEV__2) {
  Radio.displayName = "Radio";
}
export {
  Radio,
  RadioGroup,
  useRadio,
  useRadioGroup,
  useRadioGroupContext
};

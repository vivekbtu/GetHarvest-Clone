{
  "name": "@chakra-ui/form-control",
  "version": "2.0.8",
  "description": "React component to provide validation states to form fields",
  "keywords": [
    "field",
    "input",
    "input group",
    "form",
    "theming",
    "validation",
    "error",
    "react",
    "chakra-ui"
  ],
  "sideEffects": false,
  "author": "Segun Adebayo <sage@adebayosegun.com>",
  "homepage": "https://github.com/chakra-ui/chakra-ui#readme",
  "license": "MIT",
  "main": "dist/index.cjs.js",
  "module": "dist/index.esm.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "publishConfig": {
    "access": "public"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chakra-ui/chakra-ui.git",
    "directory": "packages/form-control"
  },
  "bugs": {
    "url": "https://github.com/chakra-ui/chakra-ui/issues"
  },
  "dependencies": {
    "@chakra-ui/hooks": "2.0.8",
    "@chakra-ui/icon": "3.0.8",
    "@chakra-ui/react-utils": "2.0.5",
    "@chakra-ui/utils": "2.0.8"
  },
  "devDependencies": {
    "@chakra-ui/system": "2.2.6",
    "react": "^18.0.0"
  },
  "peerDependencies": {
    "@chakra-ui/system": ">=2.0.0",
    "react": ">=18"
  },
  "scripts": {
    "build": "JSX=1 tsup src/index.ts --dts",
    "dev": "pnpm build -- --watch",
    "clean": "rimraf dist .turbo",
    "typecheck": "tsc --noEmit",
    "build:fast": "JSX=1 tsup src/index.ts"
  },
  "readme": "# @chakra-ui/form-control\n\nForm Control component is used to manage form controls such input fields,\ncheckbox and radio buttons. It provides components and context that make your\nform fields accessible by default.\n\n- **FormControl** - the top level component that provides context.\n- **FormLabel** - the visible form control label.\n- **FormHelperText** - the form control's assistive text that guides the user.\n  If added, it hides when there's an error in the field.\n- **FormErrorMessage** - the form control's error feedback. If there's a help\n  text visible when the control is invalid, it replaces the help text, to\n  prevent content shift.\n- **FormErrorIcon** - an icon that indicates the error state for colorblind\n  users.\n\n## Installation\n\n```sh\nyarn add @chakra-ui/form-control\n\n# or\n\nnpm install @chakra-ui/form-control\n```\n\n## Import component\n\n```jsx\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  FormHelperText,\n  FormErrorIcon,\n} from \"@chakra-ui/form-control\"\n```\n\n## Basic Usage\n\nThe `FormControl` component automatically provides the `id` for the input\ncomponent to be fully accessible.\n\n### With Input\n\n```jsx\n<FormControl>\n  // automatically gets `htmlFor`\n  <FormLabel>First name:</FormLabel>\n  // automatically gets `id` and `aria-*` properties\n  <Input placeholder=\"Enter your first name...\" />\n  // automatically gets `id` and hides if `isInvalid` is passed to `FormControl`\n  <FormHelperText>Keep your first name short</FormHelperText>\n  // automatically gets `id` and shows if `isInvalid` is passed to `FormControl`\n  <FormErrorMessage>First name is invalid</FormErrorMessage>\n</FormControl>\n```\n\n### With Checkbox group\n\n```jsx\n<FormControl as=\"fieldset\">\n  <FormLabel as=\"legend\">Who is better:</FormLabel>\n  <CheckboxGroup>\n    <Checkbox>Naruto</Checkbox>\n    <Checkbox>Boruto</Checkbox>\n  </CheckboxGroup>\n  <FormErrorMessage>C'mon! You must select one</FormErrorMessage>\n</FormControl>\n```\n\n## Focus, Invalid and Disabled States\n\n- When the `Input` component receives focus, it notifies the `FormControl` and\n  adds `data-focus` on the `FormLabel`. Simply pass `_focus` to the `FormLabel`\n  to style this state.\n\n- If `isInvalid` is passed to the `FormControl`, it notifies the `Input` and\n  adds `data-invalid` to the `FormLabel` so you can change the styles of the\n  label.\n\n- If `isDisabled` is passed to the `FormControl`, it makes the `Input` disabled,\n  and adds `data-disabled` to the `FormLabel` so you can change the styles of\n  the label.\n\n## Changing the required indicator\n\nTo change the required indicator beside the `FormLabel`, simply pass the\n`requiredIndicator` prop and set it to your custom indicator components.\n\n```jsx\n<FormControl as=\"fieldset\">\n  <FormLabel as=\"legend\" requiredIndicator={CustomIndicator}>\n    Who is better:\n  </FormLabel>\n  <CheckboxGroup>\n    <Checkbox>Naruto</Checkbox>\n    <Checkbox>Boruto</Checkbox>\n  </CheckboxGroup>\n  <FormErrorMessage>C'mon! You must select one</FormErrorMessage>\n</FormControl>\n```\n\n## Adding a Visual Icon\n\n```jsx\n<FormControl\n  label=\"Tell us about yourself:\"\n  helpText=\"Keep it short and sweet!\"\n  errorText=\"C'mon! You must select one\"\n>\n  <InputGroup>\n    <Input paddingRight=\"32px\" />\n    <InputRightElement>\n      <FormErrorIcon />\n    </InputRightElement>\n  </InputGroup>\n</FormControl>\n```\n"
}
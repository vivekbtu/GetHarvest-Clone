{
  "name": "@chakra-ui/system",
  "version": "2.2.6",
  "description": "Chakra UI system primitives",
  "keywords": [
    "system",
    "styled-component",
    "emotion",
    "ui-component",
    "ui",
    "chakra",
    "style-props",
    "design-system"
  ],
  "sideEffects": false,
  "author": "Segun Adebayo <sage@adebayosegun.com>",
  "homepage": "https://github.com/chakra-ui/chakra-ui#readme",
  "license": "MIT",
  "main": "dist/index.cjs.js",
  "module": "dist/index.esm.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "publishConfig": {
    "access": "public"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chakra-ui/chakra-ui.git",
    "directory": "packages/system"
  },
  "bugs": {
    "url": "https://github.com/chakra-ui/chakra-ui/issues"
  },
  "dependencies": {
    "@chakra-ui/color-mode": "2.1.6",
    "@chakra-ui/react-utils": "2.0.5",
    "@chakra-ui/styled-system": "2.2.7",
    "@chakra-ui/utils": "2.0.8",
    "react-fast-compare": "3.2.0"
  },
  "peerDependencies": {
    "@emotion/react": "^11.0.0",
    "@emotion/styled": "^11.0.0",
    "react": ">=18"
  },
  "devDependencies": {
    "@chakra-ui/theme": "2.1.7",
    "@emotion/react": "^11.9.0",
    "@emotion/styled": "^11.8.1",
    "framer-motion": "^6.2.9",
    "react": "^18.0.0"
  },
  "scripts": {
    "build": "JSX=1 tsup src/index.ts --dts",
    "dev": "pnpm build -- --watch",
    "clean": "rimraf dist .turbo",
    "typecheck": "tsc --noEmit",
    "build:fast": "JSX=1 tsup src/index.ts"
  },
  "readme": "# @chakra-ui/system\n\nStyled API for creating atomic, theme-aware component styling.\n\n## Installation\n\n```sh\nyarn add @chakra-ui/system\n\n# or\n\nnpm i @chakra-ui/system\n```\n\n## Problem\n\nIn modern web development, we have lots of solutions and architectures that have\ntried to unify how components are styled. We've seen CSS architectures like BEM,\nSMACSS, etc, and frameworks like theme-ui, and Tailwind CSS.\n\nWhile these solutions work great, we still think there is a sheer amount of work\nrequired to create a fully customizable, theme-aware component.\n\n## Solutions\n\n### Chakra Elements\n\nChakra provides enhanced JSX elements that can be styled directly via props, or\ncan accept the common `sx` prop for custom styles.\n\nWe'll provide a chakra function, just like styled-components. Users can create\nany component using the `chakra.[element]`. The resulting component will be a\nstyled component and have all system props.\n\n```jsx\n<chakra.button bg=\"green.200\" _hover={{ bg: \"green.300\" }}>\n  Click me\n</chakra.button>\n\n<chakra.h1 fontSize=\"lg\"> Heading </chakra.h1>\n\n// create your own box\nconst Box = chakra.div\n\n// you can still use the `as` prop\n<Box as=\"h1\">This is my box</Box>\n\n// for custom components\nconst ChakraPowered = chakra(YourComponent)\n\n// TS: chakra will infer the types of Link and\n// make it available in props\n<chakra.a as={Link} to=\"/home\"> Click me</chakra.a>\n```\n\n### Chakra Component API\n\nA way to define themeable components in chakra. We believe most re-usable,\natomic components have the following modifiers:\n\n- Size: It has different size variations (small, medium, large)\n- Variant: It has different visual style (outline, solid, ghost)\n- Color scheme (Optional): For a given variant, it can have several color\n  scheme. For example, an outline button with a red color scheme.\n- Color mode (Optional): Components also change their visual styles based on the\n  user preferred color mode (light or dark)\n\nOur goal with this component API is to design a common interface to style any\ncomponent given these characteristics. Here's how it works:\n\n```jsx\n// 1. create a component schema in your theme\nconst theme = {\n  colors: {\n    green: {\n      light: \"#dfdfdf\",\n      normal: \"#dfdfdf\",\n      dark: \"#d566Df\",\n      darker: \"#dfd56f\"\n    },\n    blue: {}\n  },\n  components: {\n    Button: {\n      defaultProps: {\n        variant: \"solid\",\n        size: \"md\",\n\tcolorScheme: \"blue\"\n      },\n      variants: {\n\t// props has colorScheme, colorMode (light mode or dark mode)\n        solid: props => ({\n          bg: `${props.colorScheme}.normal`,\n          color: \"white\",\n        }),\n        outline: {\n          border: \"2px\",\n          borderColor: \"green.normal\"\n        }\n      },\n      sizes: {\n        sm: {\n          padding: 20,\n          fontSize: 12\n        },\n        md: {\n          padding: 40,\n          fontSize: 15\n        }\n      }\n    }\n  }\n};\n\n// 2. create or import Button from chakra-ui\nimport { Button } from \"@chakra-ui/react\"\n\n// or your own button\nconst Button = chakra(\"button\", { themeKey: \"Button\" })\n\n// 3. use the button. It'll have the visual props defined in defaultProps\n<Button>Click me</Button>\n\n// 4. override the defaultProps\n<Button variant=\"outline\" colorScheme=\"green\">Click me</Button>\n```\n"
}
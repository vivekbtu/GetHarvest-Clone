"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Portal: () => Portal,
  PortalManager: () => PortalManager,
  usePortalManager: () => usePortalManager
});
module.exports = __toCommonJS(src_exports);

// ../../react-shim.js
var import_react = __toESM(require("react"));

// src/portal-manager.tsx
var import_utils = require("@chakra-ui/utils");
var import_react_utils = require("@chakra-ui/react-utils");
var [PortalManagerContextProvider, usePortalManager] = (0, import_react_utils.createContext)({
  strict: false,
  name: "PortalManagerContext"
});
function PortalManager(props) {
  const { children, zIndex } = props;
  return /* @__PURE__ */ import_react.default.createElement(PortalManagerContextProvider, {
    value: { zIndex }
  }, children);
}
if (import_utils.__DEV__) {
  PortalManager.displayName = "PortalManager";
}

// src/portal.tsx
var import_hooks = require("@chakra-ui/hooks");
var import_utils2 = require("@chakra-ui/utils");
var import_react_utils2 = require("@chakra-ui/react-utils");
var import_react_dom = require("react-dom");
var import_react2 = require("react");
var [PortalContextProvider, usePortalContext] = (0, import_react_utils2.createContext)({
  strict: false,
  name: "PortalContext"
});
var PORTAL_CLASSNAME = "chakra-portal";
var PORTAL_SELECTOR = `.chakra-portal`;
var Container = (props) => /* @__PURE__ */ import_react.default.createElement("div", {
  className: "chakra-portal-zIndex",
  style: {
    position: "absolute",
    zIndex: props.zIndex,
    top: 0,
    left: 0,
    right: 0
  }
}, props.children);
var DefaultPortal = (props) => {
  const { appendToParentPortal, children } = props;
  const [tempNode, setTempNode] = (0, import_react2.useState)(null);
  const portal = (0, import_react2.useRef)(null);
  const forceUpdate = (0, import_hooks.useForceUpdate)();
  (0, import_react2.useEffect)(forceUpdate, []);
  const parentPortal = usePortalContext();
  const manager = usePortalManager();
  (0, import_hooks.useSafeLayoutEffect)(() => {
    if (!tempNode)
      return;
    const doc = tempNode.ownerDocument;
    const host = appendToParentPortal ? parentPortal ?? doc.body : doc.body;
    if (!host)
      return;
    portal.current = doc.createElement("div");
    portal.current.className = PORTAL_CLASSNAME;
    host.appendChild(portal.current);
    forceUpdate();
    const portalNode = portal.current;
    return () => {
      if (host.contains(portalNode)) {
        host.removeChild(portalNode);
      }
    };
  }, [tempNode]);
  const _children = (manager == null ? void 0 : manager.zIndex) ? /* @__PURE__ */ import_react.default.createElement(Container, {
    zIndex: manager == null ? void 0 : manager.zIndex
  }, children) : children;
  return portal.current ? (0, import_react_dom.createPortal)(/* @__PURE__ */ import_react.default.createElement(PortalContextProvider, {
    value: portal.current
  }, _children), portal.current) : /* @__PURE__ */ import_react.default.createElement("span", {
    ref: (el) => {
      if (el)
        setTempNode(el);
    }
  });
};
var ContainerPortal = (props) => {
  const { children, containerRef, appendToParentPortal } = props;
  const containerEl = containerRef.current;
  const host = containerEl ?? (import_utils2.isBrowser ? document.body : void 0);
  const portal = (0, import_react2.useMemo)(() => {
    const node = containerEl == null ? void 0 : containerEl.ownerDocument.createElement("div");
    if (node)
      node.className = PORTAL_CLASSNAME;
    return node;
  }, [containerEl]);
  const forceUpdate = (0, import_hooks.useForceUpdate)();
  (0, import_hooks.useSafeLayoutEffect)(() => {
    forceUpdate();
  }, []);
  (0, import_hooks.useSafeLayoutEffect)(() => {
    if (!portal || !host)
      return;
    host.appendChild(portal);
    return () => {
      host.removeChild(portal);
    };
  }, [portal, host]);
  if (host && portal) {
    return (0, import_react_dom.createPortal)(/* @__PURE__ */ import_react.default.createElement(PortalContextProvider, {
      value: appendToParentPortal ? portal : null
    }, children), portal);
  }
  return null;
};
function Portal(props) {
  const { containerRef, ...rest } = props;
  return containerRef ? /* @__PURE__ */ import_react.default.createElement(ContainerPortal, {
    containerRef,
    ...rest
  }) : /* @__PURE__ */ import_react.default.createElement(DefaultPortal, {
    ...rest
  });
}
Portal.defaultProps = {
  appendToParentPortal: true
};
Portal.className = PORTAL_CLASSNAME;
Portal.selector = PORTAL_SELECTOR;
if (import_utils2.__DEV__) {
  Portal.displayName = "Portal";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Portal,
  PortalManager,
  usePortalManager
});

{
  "name": "@chakra-ui/toast",
  "version": "3.0.6",
  "description": "description",
  "keywords": [
    "theme",
    "theming",
    "ui mode",
    "ui"
  ],
  "sideEffects": false,
  "author": "Segun Adebayo <sage@adebayosegun.com>",
  "homepage": "https://github.com/chakra-ui/chakra-ui#readme",
  "license": "MIT",
  "main": "dist/index.cjs.js",
  "module": "dist/index.esm.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "publishConfig": {
    "access": "public"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chakra-ui/chakra-ui.git",
    "directory": "packages/toast"
  },
  "bugs": {
    "url": "https://github.com/chakra-ui/chakra-ui/issues"
  },
  "dependencies": {
    "@chakra-ui/alert": "2.0.8",
    "@chakra-ui/close-button": "2.0.8",
    "@chakra-ui/hooks": "2.0.8",
    "@chakra-ui/portal": "2.0.8",
    "@chakra-ui/react-utils": "2.0.5",
    "@chakra-ui/theme": "2.1.7",
    "@chakra-ui/transition": "2.0.8",
    "@chakra-ui/utils": "2.0.8"
  },
  "devDependencies": {
    "@testing-library/react": "13.3.0",
    "@chakra-ui/system": "2.2.6",
    "@chakra-ui/button": "2.0.8",
    "@chakra-ui/layout": "2.1.5",
    "framer-motion": "^6.2.9",
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  },
  "peerDependencies": {
    "@chakra-ui/system": "2.2.6",
    "framer-motion": ">=4.0.0",
    "react": ">=18",
    "react-dom": ">=18"
  },
  "scripts": {
    "build": "JSX=1 tsup src/index.ts --dts",
    "dev": "pnpm build -- --watch",
    "clean": "rimraf dist .turbo",
    "typecheck": "tsc --noEmit",
    "build:fast": "JSX=1 tsup src/index.ts"
  },
  "readme": "# @chakra-ui/toast\n\nThe toast is used to show alerts on top of an overlay.\n\nThe toast will close itself when the close button is clicked, or after a timeout\nâ€” the default is 5 seconds.\n\nToasts can be configured to appear at either the top or the bottom of an\napplication window, and it is possible to have more than one toast onscreen at a\ntime.\n\n## Import component\n\n```js\nimport useToast from \"@chakra-ui/toast\"\n```\n\n## Usage\n\n```jsx\nfunction ToastExample() {\n  const toast = useToast()\n\n  return (\n    <Button\n      onClick={() =>\n        toast({\n          title: \"Account created.\",\n          description: \"We've created your account for you.\",\n          status: \"success\",\n          duration: 9000,\n          isClosable: true,\n        })\n      }\n    >\n      Show Toast\n    </Button>\n  )\n}\n```\n\n### Positioning toast\n\nBy default, all the toasts will be positioned on the `top-right` of your\nbrowser.\n\nThe following values are allowed: **top-right, top, top-left, bottom-right,\nbottom, bottom-left**\n\n```jsx\nimport * as React from \"react\"\nimport useToast from \"@chakra-ui/toast\"\n\nconst Position = () => {\n  const toast = useToast()\n\n  const notify = () => {\n    toast({ title: \"Success Notification !\", status: \"success\" })\n  }\n\n  return <button onClick={notify}>Notify</button>\n}\n```\n\n### Set autoClose delay or disable it\n\nTo change the show delay for any toast, simply pass the `duration` prop when\ninvoking the `toast` function.\n\n> Note ðŸš¨: If you pass `null` as the duration, the toast will always remain on\n> screen.\n\n```jsx\nimport * as React from \"react\"\nimport useToast from \"@chakra-ui/toast\"\n\nconst Duration = () => {\n  const toast = useToast()\n\n  const notify = () => {\n    toast({\n      duration: 5000,\n      title: \"I will close after 5 secs\",\n    })\n  }\n\n  return <button onClick={notify}>Notify</button>\n}\n```\n\n### Render a custom toast component\n\nDisplay a custom component instead of the default Toast UI.\n\nWe provide 2 key `props` to your component, `id`, and `onClose` to close the\ntoast (to build your custom close button).\n\n```jsx\nfunction Example() {\n  const toast = useToast()\n\n  return (\n    <Button\n      onClick={() => {\n        toast({\n          position: \"bottom-left\",\n          render: (props) => (\n            <Box m={3} color=\"white\" p={3} bg=\"blue.500\">\n              Hello World\n            </Box>\n          ),\n        })\n      }}\n    >\n      Show Toast\n    </Button>\n  )\n}\n```\n\n### Use a custom id\n\nA custom `id` can be used to replace the one internal auto-generated toast `id`.\nYou can use a `number` or a `string`.\n\nThis is mostly useful when you need to prevent duplication of a specific toast.\n\n### Prevent duplicate\n\nTo prevent duplicates, you can check if a given toast is active by calling\n`toast.isActive(id)` like the snippet below. Or, you can use a custom `toastId`:\n\n```js\nimport * as React from \"react\"\nimport useToast from \"@chakra-ui/toast\"\n\nconst Example = () => {\n  const toast = useToast()\n\n  const id = \"login-toast\"\n\n  const notify = () => {\n    if (!toast.isActive(id)) {\n      toast({ title: \"Dude! I cannot be duplicated\" })\n    }\n  }\n\n  return (\n    <div>\n      <button onClick={notify}>Notify</button>\n    </div>\n  )\n}\n```\n\n### Update a toast\n\nWhen you update a toast, the toast options and the content are inherited but\ndon't worry you can update them.\n\n```js\nimport * as React from \"react\"\nimport useToast from \"@chakra-ui/toast\"\n\nconst Update = () => {\n  const toast = useToast()\n\n  const id = React.useRef(null)\n\n  const notify = () => {\n    id.current = toast({\n      title: \"Chidori is not available!\",\n      duration: null,\n    })\n  }\n\n  const update = () => {\n    toast.update(id.current, {\n      title: \"Sharingan is all you have!\",\n      status: \"success\",\n      duration: 5000,\n    })\n  }\n\n  return (\n    <div>\n      <button onClick={notify}>Notify</button>\n      <button onClick={update}>Update</button>\n    </div>\n  )\n}\n```\n"
}
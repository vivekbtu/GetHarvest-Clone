{
  "name": "@chakra-ui/pin-input",
  "version": "2.0.10",
  "description": "A React component optimized for entering sequences of digits",
  "keywords": [
    "pin",
    "input",
    "pin code",
    "ui",
    "react",
    "component",
    "chakra ui"
  ],
  "sideEffects": false,
  "author": "Segun Adebayo <sage@adebayosegun.com>",
  "homepage": "https://github.com/chakra-ui/chakra-ui#readme",
  "license": "MIT",
  "main": "dist/index.cjs.js",
  "module": "dist/index.esm.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "publishConfig": {
    "access": "public"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chakra-ui/chakra-ui.git",
    "directory": "packages/pin-input"
  },
  "bugs": {
    "url": "https://github.com/chakra-ui/chakra-ui/issues"
  },
  "dependencies": {
    "@chakra-ui/descendant": "3.0.7",
    "@chakra-ui/hooks": "2.0.8",
    "@chakra-ui/react-utils": "2.0.5",
    "@chakra-ui/utils": "2.0.8"
  },
  "devDependencies": {
    "@chakra-ui/system": "2.2.6",
    "react": "^18.0.0"
  },
  "peerDependencies": {
    "@chakra-ui/system": ">=2.0.0",
    "react": ">=18"
  },
  "scripts": {
    "build": "JSX=1 tsup src/index.ts --dts",
    "dev": "pnpm build -- --watch",
    "clean": "rimraf dist .turbo",
    "typecheck": "tsc --noEmit",
    "build:fast": "JSX=1 tsup src/index.ts"
  },
  "readme": "# Pin Input\n\nThe PinInupt component is optimized for entering sequences of digits. The most\ncommon application is for entering single-use security codes. It is optimized\nfor entering digits quickly.\n\n## Installation\n\n```sh\nyarn add @chakra-ui/pin-input\n\nor\n\nnpm i @chakra-ui/pin-input\n```\n\n## Import component\n\n```jsx\nimport {\n  PinInput,\n  PinInputField,\n  usePinInput,\n  usePinInputField,\n} from \"@chakra-ui/pin-input\"\n```\n\n## Usage\n\nChakra UI exports two primary components, `PinInput` and `PinInputField` to\ncompose a PinInput component. Chakra UI also provides hooks to can create a\ncustom PinInput component.\n\n```jsx\n<PinInput defaultValue=\"234\">\n  <PinInputField />\n  <PinInputField />\n  <PinInputField />\n</PinInput>\n```\n\n```jsx\nfunction PinInputHookExample() {\n  const context = usePinInput({ autoFocus: true })\n  const input1 = usePinInputField({ context })\n  const input2 = usePinInputField({ context })\n  const input3 = usePinInputField({ context })\n  const input4 = usePinInputField({ context })\n\n  return (\n    <div>\n      <input style={style} {...input1} />\n      <input style={style} {...input2} />\n      <input style={style} {...input3} />\n      <input style={style} {...input4} />\n    </div>\n  )\n}\n```\n\n## Sizes\n\n```jsx\n<PinInput size=\"lg\" defaultValue=\"234\">\n  <PinInputField />\n  <PinInputField />\n  <PinInputField />\n</PinInput>\n```\n\n## Controlled\n\n```tsx\nfunction ControlledPinInput() {\n  const [value, setValue] = React.useState(\"\")\n\n  const handleChange = (value: string) => {\n    setValue(value)\n  }\n\n  const handleComplete = (value: string) => {\n    console.log(value)\n  }\n  return (\n    <PinInput value={value} onChange={handleChange} onComplete={handleComplete}>\n      <PinInputField />\n      <PinInputField />\n      <PinInputField />\n    </PinInput>\n  )\n}\n```\n"
}
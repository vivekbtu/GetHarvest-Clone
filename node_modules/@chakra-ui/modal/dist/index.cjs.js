"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AlertDialog: () => AlertDialog,
  AlertDialogBody: () => ModalBody,
  AlertDialogCloseButton: () => ModalCloseButton,
  AlertDialogContent: () => AlertDialogContent,
  AlertDialogFooter: () => ModalFooter,
  AlertDialogHeader: () => ModalHeader,
  AlertDialogOverlay: () => ModalOverlay,
  Drawer: () => Drawer,
  DrawerBody: () => ModalBody,
  DrawerCloseButton: () => ModalCloseButton,
  DrawerContent: () => DrawerContent,
  DrawerFooter: () => ModalFooter,
  DrawerHeader: () => ModalHeader,
  DrawerOverlay: () => ModalOverlay,
  Modal: () => Modal,
  ModalBody: () => ModalBody,
  ModalCloseButton: () => ModalCloseButton,
  ModalContent: () => ModalContent,
  ModalContextProvider: () => ModalContextProvider,
  ModalFocusScope: () => ModalFocusScope,
  ModalFooter: () => ModalFooter,
  ModalHeader: () => ModalHeader,
  ModalOverlay: () => ModalOverlay,
  useAriaHidden: () => useAriaHidden,
  useDrawerContext: () => useDrawerContext,
  useModal: () => useModal,
  useModalContext: () => useModalContext,
  useModalStyles: () => useModalStyles
});
module.exports = __toCommonJS(src_exports);

// ../../react-shim.js
var import_react = __toESM(require("react"));

// src/modal.tsx
var import_close_button = require("@chakra-ui/close-button");
var import_focus_lock = require("@chakra-ui/focus-lock");
var import_portal = require("@chakra-ui/portal");
var import_react_utils2 = require("@chakra-ui/react-utils");
var import_system2 = require("@chakra-ui/system");
var import_transition2 = require("@chakra-ui/transition");
var import_utils3 = require("@chakra-ui/utils");
var import_framer_motion2 = require("framer-motion");
var import_react5 = require("react");
var import_react_remove_scroll = require("react-remove-scroll");

// src/modal-transition.tsx
var import_system = require("@chakra-ui/system");
var import_transition = require("@chakra-ui/transition");
var import_utils = require("@chakra-ui/utils");
var import_framer_motion = require("framer-motion");
var import_react2 = require("react");
var transitions = {
  slideInBottom: {
    ...import_transition.slideFadeConfig,
    custom: { offsetY: 16, reverse: true }
  },
  slideInRight: {
    ...import_transition.slideFadeConfig,
    custom: { offsetX: 16, reverse: true }
  },
  scale: {
    ...import_transition.scaleFadeConfig,
    custom: { initialScale: 0.95, reverse: true }
  },
  none: {}
};
var Motion = (0, import_system.chakra)(import_framer_motion.motion.section);
var ModalTransition = (0, import_react2.forwardRef)((props, ref) => {
  const { preset, ...rest } = props;
  const motionProps = transitions[preset];
  return /* @__PURE__ */ import_react.default.createElement(Motion, {
    ref,
    ...motionProps,
    ...rest
  });
});
if (import_utils.__DEV__) {
  ModalTransition.displayName = "ModalTransition";
}

// src/use-modal.ts
var import_hooks = require("@chakra-ui/hooks");
var import_utils2 = require("@chakra-ui/utils");
var import_react_utils = require("@chakra-ui/react-utils");
var import_aria_hidden = require("aria-hidden");
var import_react4 = require("react");

// src/modal-manager.ts
var import_react3 = require("react");
var ModalManager = class {
  modals;
  constructor() {
    this.modals = [];
  }
  add(modal) {
    this.modals.push(modal);
  }
  remove(modal) {
    this.modals = this.modals.filter((_modal) => _modal !== modal);
  }
  isTopModal(modal) {
    const topmostModal = this.modals[this.modals.length - 1];
    return topmostModal === modal;
  }
};
var manager = new ModalManager();
function useModalManager(ref, isOpen) {
  (0, import_react3.useEffect)(() => {
    if (isOpen) {
      manager.add(ref);
    }
    return () => {
      manager.remove(ref);
    };
  }, [isOpen, ref]);
}

// src/use-modal.ts
function useModal(props) {
  const {
    isOpen,
    onClose,
    id,
    closeOnOverlayClick = true,
    closeOnEsc = true,
    useInert = true,
    onOverlayClick: onOverlayClickProp,
    onEsc
  } = props;
  const dialogRef = (0, import_react4.useRef)(null);
  const overlayRef = (0, import_react4.useRef)(null);
  const [dialogId, headerId, bodyId] = (0, import_hooks.useIds)(id, `chakra-modal`, `chakra-modal--header`, `chakra-modal--body`);
  useAriaHidden(dialogRef, isOpen && useInert);
  useModalManager(dialogRef, isOpen);
  const mouseDownTarget = (0, import_react4.useRef)(null);
  const onMouseDown = (0, import_react4.useCallback)((event) => {
    mouseDownTarget.current = event.target;
  }, []);
  const onKeyDown = (0, import_react4.useCallback)((event) => {
    if (event.key === "Escape") {
      event.stopPropagation();
      if (closeOnEsc) {
        onClose == null ? void 0 : onClose();
      }
      onEsc == null ? void 0 : onEsc();
    }
  }, [closeOnEsc, onClose, onEsc]);
  const [headerMounted, setHeaderMounted] = (0, import_react4.useState)(false);
  const [bodyMounted, setBodyMounted] = (0, import_react4.useState)(false);
  const getDialogProps = (0, import_react4.useCallback)((props2 = {}, ref = null) => ({
    role: "dialog",
    ...props2,
    ref: (0, import_react_utils.mergeRefs)(ref, dialogRef),
    id: dialogId,
    tabIndex: -1,
    "aria-modal": true,
    "aria-labelledby": headerMounted ? headerId : void 0,
    "aria-describedby": bodyMounted ? bodyId : void 0,
    onClick: (0, import_utils2.callAllHandlers)(props2.onClick, (event) => event.stopPropagation())
  }), [bodyId, bodyMounted, dialogId, headerId, headerMounted]);
  const onOverlayClick = (0, import_react4.useCallback)((event) => {
    event.stopPropagation();
    if (mouseDownTarget.current !== event.target)
      return;
    if (!manager.isTopModal(dialogRef))
      return;
    if (closeOnOverlayClick) {
      onClose == null ? void 0 : onClose();
    }
    onOverlayClickProp == null ? void 0 : onOverlayClickProp();
  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);
  const getDialogContainerProps = (0, import_react4.useCallback)((props2 = {}, ref = null) => ({
    ...props2,
    ref: (0, import_react_utils.mergeRefs)(ref, overlayRef),
    onClick: (0, import_utils2.callAllHandlers)(props2.onClick, onOverlayClick),
    onKeyDown: (0, import_utils2.callAllHandlers)(props2.onKeyDown, onKeyDown),
    onMouseDown: (0, import_utils2.callAllHandlers)(props2.onMouseDown, onMouseDown)
  }), [onKeyDown, onMouseDown, onOverlayClick]);
  return {
    isOpen,
    onClose,
    headerId,
    bodyId,
    setBodyMounted,
    setHeaderMounted,
    dialogRef,
    overlayRef,
    getDialogProps,
    getDialogContainerProps
  };
}
function useAriaHidden(ref, shouldHide) {
  const currentElement = ref.current;
  (0, import_react4.useEffect)(() => {
    if (!ref.current || !shouldHide)
      return void 0;
    return (0, import_aria_hidden.hideOthers)(ref.current);
  }, [shouldHide, ref, currentElement]);
}

// src/modal.tsx
var [ModalStylesProvider, useModalStyles] = (0, import_react_utils2.createContext)({
  name: `ModalStylesContext`,
  errorMessage: `useModalStyles returned is 'undefined'. Seems you forgot to wrap the components in "<Modal />" `
});
var [ModalContextProvider, useModalContext] = (0, import_react_utils2.createContext)({
  strict: true,
  name: "ModalContext",
  errorMessage: "useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`"
});
var Modal = (props) => {
  const {
    portalProps,
    children,
    autoFocus,
    trapFocus,
    initialFocusRef,
    finalFocusRef,
    returnFocusOnClose,
    blockScrollOnMount,
    allowPinchZoom,
    preserveScrollBarGap,
    motionPreset,
    lockFocusAcrossFrames,
    onCloseComplete
  } = props;
  const styles = (0, import_system2.useMultiStyleConfig)("Modal", props);
  const modal = useModal(props);
  const context = {
    ...modal,
    autoFocus,
    trapFocus,
    initialFocusRef,
    finalFocusRef,
    returnFocusOnClose,
    blockScrollOnMount,
    allowPinchZoom,
    preserveScrollBarGap,
    motionPreset,
    lockFocusAcrossFrames
  };
  return /* @__PURE__ */ import_react.default.createElement(ModalContextProvider, {
    value: context
  }, /* @__PURE__ */ import_react.default.createElement(ModalStylesProvider, {
    value: styles
  }, /* @__PURE__ */ import_react.default.createElement(import_framer_motion2.AnimatePresence, {
    onExitComplete: onCloseComplete
  }, context.isOpen && /* @__PURE__ */ import_react.default.createElement(import_portal.Portal, {
    ...portalProps
  }, children))));
};
Modal.defaultProps = {
  lockFocusAcrossFrames: true,
  returnFocusOnClose: true,
  scrollBehavior: "outside",
  trapFocus: true,
  autoFocus: true,
  blockScrollOnMount: true,
  allowPinchZoom: false,
  motionPreset: "scale"
};
if (import_utils3.__DEV__) {
  Modal.displayName = "Modal";
}
var MotionDiv = (0, import_system2.chakra)(import_framer_motion2.motion.div);
var ModalContent = (0, import_system2.forwardRef)((props, ref) => {
  const { className, children, containerProps: rootProps, ...rest } = props;
  const { getDialogProps, getDialogContainerProps } = useModalContext();
  const dialogProps = getDialogProps(rest, ref);
  const containerProps = getDialogContainerProps(rootProps);
  const _className = (0, import_utils3.cx)("chakra-modal__content", className);
  const styles = useModalStyles();
  const dialogStyles = {
    display: "flex",
    flexDirection: "column",
    position: "relative",
    width: "100%",
    outline: 0,
    ...styles.dialog
  };
  const dialogContainerStyles = {
    display: "flex",
    width: "100vw",
    height: "100vh",
    "@supports(height: -webkit-fill-available)": {
      height: "-webkit-fill-available"
    },
    position: "fixed",
    left: 0,
    top: 0,
    ...styles.dialogContainer
  };
  const { motionPreset } = useModalContext();
  return /* @__PURE__ */ import_react.default.createElement(ModalFocusScope, null, /* @__PURE__ */ import_react.default.createElement(import_system2.chakra.div, {
    ...containerProps,
    className: "chakra-modal__content-container",
    tabIndex: -1,
    __css: dialogContainerStyles
  }, /* @__PURE__ */ import_react.default.createElement(ModalTransition, {
    preset: motionPreset,
    className: _className,
    ...dialogProps,
    __css: dialogStyles
  }, children)));
});
if (import_utils3.__DEV__) {
  ModalContent.displayName = "ModalContent";
}
function ModalFocusScope(props) {
  const {
    autoFocus,
    trapFocus,
    dialogRef,
    initialFocusRef,
    blockScrollOnMount,
    allowPinchZoom,
    finalFocusRef,
    returnFocusOnClose,
    preserveScrollBarGap,
    lockFocusAcrossFrames
  } = useModalContext();
  const [isPresent, safeToRemove] = (0, import_framer_motion2.usePresence)();
  (0, import_react5.useEffect)(() => {
    if (!isPresent && safeToRemove) {
      setTimeout(safeToRemove);
    }
  }, [isPresent, safeToRemove]);
  return /* @__PURE__ */ import_react.default.createElement(import_focus_lock.FocusLock, {
    autoFocus,
    isDisabled: !trapFocus,
    initialFocusRef,
    finalFocusRef,
    restoreFocus: returnFocusOnClose,
    contentRef: dialogRef,
    lockFocusAcrossFrames
  }, /* @__PURE__ */ import_react.default.createElement(import_react_remove_scroll.RemoveScroll, {
    removeScrollBar: !preserveScrollBarGap,
    allowPinchZoom,
    enabled: blockScrollOnMount,
    forwardProps: true
  }, props.children));
}
var ModalOverlay = (0, import_system2.forwardRef)((props, ref) => {
  const { className, transition, ...rest } = props;
  const _className = (0, import_utils3.cx)("chakra-modal__overlay", className);
  const styles = useModalStyles();
  const overlayStyle = {
    pos: "fixed",
    left: "0",
    top: "0",
    w: "100vw",
    h: "100vh",
    ...styles.overlay
  };
  const { motionPreset } = useModalContext();
  const motionProps = motionPreset === "none" ? {} : import_transition2.fadeConfig;
  return /* @__PURE__ */ import_react.default.createElement(MotionDiv, {
    ...motionProps,
    __css: overlayStyle,
    ref,
    className: _className,
    ...rest
  });
});
if (import_utils3.__DEV__) {
  ModalOverlay.displayName = "ModalOverlay";
}
var ModalHeader = (0, import_system2.forwardRef)((props, ref) => {
  const { className, ...rest } = props;
  const { headerId, setHeaderMounted } = useModalContext();
  (0, import_react5.useEffect)(() => {
    setHeaderMounted(true);
    return () => setHeaderMounted(false);
  }, [setHeaderMounted]);
  const _className = (0, import_utils3.cx)("chakra-modal__header", className);
  const styles = useModalStyles();
  const headerStyles = {
    flex: 0,
    ...styles.header
  };
  return /* @__PURE__ */ import_react.default.createElement(import_system2.chakra.header, {
    ref,
    className: _className,
    id: headerId,
    ...rest,
    __css: headerStyles
  });
});
if (import_utils3.__DEV__) {
  ModalHeader.displayName = "ModalHeader";
}
var ModalBody = (0, import_system2.forwardRef)((props, ref) => {
  const { className, ...rest } = props;
  const { bodyId, setBodyMounted } = useModalContext();
  (0, import_react5.useEffect)(() => {
    setBodyMounted(true);
    return () => setBodyMounted(false);
  }, [setBodyMounted]);
  const _className = (0, import_utils3.cx)("chakra-modal__body", className);
  const styles = useModalStyles();
  return /* @__PURE__ */ import_react.default.createElement(import_system2.chakra.div, {
    ref,
    className: _className,
    id: bodyId,
    ...rest,
    __css: styles.body
  });
});
if (import_utils3.__DEV__) {
  ModalBody.displayName = "ModalBody";
}
var ModalFooter = (0, import_system2.forwardRef)((props, ref) => {
  const { className, ...rest } = props;
  const _className = (0, import_utils3.cx)("chakra-modal__footer", className);
  const styles = useModalStyles();
  const footerStyles = {
    display: "flex",
    alignItems: "center",
    justifyContent: "flex-end",
    ...styles.footer
  };
  return /* @__PURE__ */ import_react.default.createElement(import_system2.chakra.footer, {
    ref,
    ...rest,
    __css: footerStyles,
    className: _className
  });
});
if (import_utils3.__DEV__) {
  ModalFooter.displayName = "ModalFooter";
}
var ModalCloseButton = (0, import_system2.forwardRef)((props, ref) => {
  const { onClick, className, ...rest } = props;
  const { onClose } = useModalContext();
  const _className = (0, import_utils3.cx)("chakra-modal__close-btn", className);
  const styles = useModalStyles();
  return /* @__PURE__ */ import_react.default.createElement(import_close_button.CloseButton, {
    ref,
    __css: styles.closeButton,
    className: _className,
    onClick: (0, import_utils3.callAllHandlers)(onClick, (event) => {
      event.stopPropagation();
      onClose();
    }),
    ...rest
  });
});
if (import_utils3.__DEV__) {
  ModalCloseButton.displayName = "ModalCloseButton";
}

// src/alert-dialog.tsx
var import_system3 = require("@chakra-ui/system");
function AlertDialog(props) {
  const { leastDestructiveRef, ...rest } = props;
  return /* @__PURE__ */ import_react.default.createElement(Modal, {
    ...rest,
    initialFocusRef: leastDestructiveRef
  });
}
var AlertDialogContent = (0, import_system3.forwardRef)((props, ref) => /* @__PURE__ */ import_react.default.createElement(ModalContent, {
  ref,
  role: "alertdialog",
  ...props
}));

// src/drawer.tsx
var import_react_utils3 = require("@chakra-ui/react-utils");
var import_system4 = require("@chakra-ui/system");
var import_transition3 = require("@chakra-ui/transition");
var import_utils4 = require("@chakra-ui/utils");
var [DrawerContextProvider, useDrawerContext] = (0, import_react_utils3.createContext)();
var placementMap = {
  start: { ltr: "left", rtl: "right" },
  end: { ltr: "right", rtl: "left" }
};
function getDrawerPlacement(placement, dir) {
  var _a;
  if (!placement)
    return;
  return ((_a = placementMap[placement]) == null ? void 0 : _a[dir]) ?? placement;
}
function Drawer(props) {
  var _a;
  const {
    isOpen,
    onClose,
    placement: placementProp = "right",
    children,
    ...rest
  } = props;
  const theme = (0, import_system4.useTheme)();
  const drawerStyleConfig = (_a = theme.components) == null ? void 0 : _a.Drawer;
  const placement = getDrawerPlacement(placementProp, theme.direction);
  return /* @__PURE__ */ import_react.default.createElement(DrawerContextProvider, {
    value: { placement }
  }, /* @__PURE__ */ import_react.default.createElement(Modal, {
    isOpen,
    onClose,
    styleConfig: drawerStyleConfig,
    ...rest
  }, children));
}
var StyledSlide = (0, import_system4.chakra)(import_transition3.Slide);
var DrawerContent = (0, import_system4.forwardRef)((props, ref) => {
  const { className, children, ...rest } = props;
  const { getDialogProps, getDialogContainerProps, isOpen } = useModalContext();
  const dialogProps = getDialogProps(rest, ref);
  const containerProps = getDialogContainerProps();
  const _className = (0, import_utils4.cx)("chakra-modal__content", className);
  const styles = useModalStyles();
  const dialogStyles = {
    display: "flex",
    flexDirection: "column",
    position: "relative",
    width: "100%",
    outline: 0,
    ...styles.dialog
  };
  const dialogContainerStyles = {
    display: "flex",
    width: "100vw",
    height: "100vh",
    position: "fixed",
    left: 0,
    top: 0,
    ...styles.dialogContainer
  };
  const { placement } = useDrawerContext();
  return /* @__PURE__ */ import_react.default.createElement(import_system4.chakra.div, {
    ...containerProps,
    className: "chakra-modal__content-container",
    __css: dialogContainerStyles
  }, /* @__PURE__ */ import_react.default.createElement(ModalFocusScope, null, /* @__PURE__ */ import_react.default.createElement(StyledSlide, {
    direction: placement,
    in: isOpen,
    className: _className,
    ...dialogProps,
    __css: dialogStyles
  }, children)));
});
if (import_utils4.__DEV__) {
  DrawerContent.displayName = "DrawerContent";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AlertDialog,
  AlertDialogBody,
  AlertDialogCloseButton,
  AlertDialogContent,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogOverlay,
  Drawer,
  DrawerBody,
  DrawerCloseButton,
  DrawerContent,
  DrawerFooter,
  DrawerHeader,
  DrawerOverlay,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalContextProvider,
  ModalFocusScope,
  ModalFooter,
  ModalHeader,
  ModalOverlay,
  useAriaHidden,
  useDrawerContext,
  useModal,
  useModalContext,
  useModalStyles
});

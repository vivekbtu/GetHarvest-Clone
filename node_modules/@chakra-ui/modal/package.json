{
  "name": "@chakra-ui/modal",
  "version": "2.1.6",
  "description": "An accessible dialog (modal) component for React & Chakra UI",
  "keywords": [
    "react",
    "react component",
    "modal",
    "dialog",
    "modal dialog",
    "accessible modal",
    "aria modal",
    "a11y modal",
    "accessible modal",
    "modal component",
    "react modal component",
    "react modal",
    "chakra"
  ],
  "sideEffects": false,
  "author": "Segun Adebayo <sage@adebayosegun.com>",
  "homepage": "https://github.com/chakra-ui/chakra-ui#readme",
  "license": "MIT",
  "main": "dist/index.cjs.js",
  "module": "dist/index.esm.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "publishConfig": {
    "access": "public"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chakra-ui/chakra-ui.git",
    "directory": "packages/modal"
  },
  "bugs": {
    "url": "https://github.com/chakra-ui/chakra-ui/issues"
  },
  "dependencies": {
    "@chakra-ui/close-button": "2.0.8",
    "@chakra-ui/focus-lock": "2.0.9",
    "@chakra-ui/hooks": "2.0.8",
    "@chakra-ui/portal": "2.0.8",
    "@chakra-ui/react-utils": "2.0.5",
    "@chakra-ui/transition": "2.0.8",
    "@chakra-ui/utils": "2.0.8",
    "aria-hidden": "^1.1.1",
    "react-remove-scroll": "^2.5.4"
  },
  "devDependencies": {
    "@chakra-ui/system": "2.2.6",
    "@testing-library/react-hooks": "8.0.0",
    "framer-motion": "^6.2.9",
    "react-lorem-component": "0.13.0",
    "react": "^18.0.0",
    "react-dom": "^18.0.0"
  },
  "peerDependencies": {
    "@chakra-ui/system": ">=2.0.0",
    "framer-motion": ">=4.0.0",
    "react": ">=18",
    "react-dom": ">=18"
  },
  "scripts": {
    "build": "JSX=1 tsup src/index.ts --dts",
    "dev": "pnpm build -- --watch",
    "clean": "rimraf dist .turbo",
    "typecheck": "tsc --noEmit",
    "build:fast": "JSX=1 tsup src/index.ts"
  },
  "readme": "# @chakra-ui/modal\n\nA modal is a window overlaid on either the primary window or another dialog\nwindow. Contents behind a modal dialog are **inert** meaning that users cannot\ninteract with content behind the dialog.\n\n## Installation\n\n```sh\nyarn add @chakra-ui/modal\n\n# or\n\nnpm i @chakra-ui/modal\n```\n\n## Import components\n\n```jsx\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from \"@chakra-ui/react\"\n```\n\n## Usage\n\nWhen the modal opens, focus is sent into the modal and set to the first tabbable\nelement. If there are no tabbed element, focus is set on the `ModalContent`.\n\n```jsx\nfunction BasicUsage() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  return (\n    <>\n      <Button onClick={onOpen}>Open Modal</Button>\n\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay>\n          <ModalContent>\n            <ModalHeader>Modal Title</ModalHeader>\n            <ModalCloseButton />\n\n            <ModalBody>\n              <Lorem count={2} />\n            </ModalBody>\n\n            <ModalFooter>\n              <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\n                Close\n              </Button>\n              <Button variant=\"ghost\">Secondary Action</Button>\n            </ModalFooter>\n          </ModalContent>\n        </ModalOverlay>\n      </Modal>\n    </>\n  )\n}\n```\n\n### Control Focus when Modal closes\n\nWhen the dialog closes, it returns focus to the element that triggered. Set\n`finalFocusRef` to element that should receive focus when the modal opens.\n\n```jsx\nfunction ReturnFocus() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const finalRef = React.useRef()\n\n  return (\n    <>\n      <Box ref={finalRef} tabIndex={-1} aria-label=\"Focus moved to this box\">\n        Some other content that'll receive focus on close.\n      </Box>\n\n      <Button mt={4} onClick={onOpen}>\n        Open Modal\n      </Button>\n\n      <Modal finalFocusRef={finalRef} isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay>\n          <ModalContent>\n            <ModalHeader>Modal Title</ModalHeader>\n            <ModalCloseButton />\n            <ModalBody>\n              <Lorem count={2} />\n            </ModalBody>\n\n            <ModalFooter>\n              <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\n                Close\n              </Button>\n              <Button variant=\"ghost\">Secondary Action</Button>\n            </ModalFooter>\n          </ModalContent>\n        </ModalOverlay>\n      </Modal>\n    </>\n  )\n}\n```\n\n# Alert Dialog\n\nAlertDialog component is used interrupt the user with a mandatory confirmation\nor action.\n\n## Installation\n\n```sh\nyarn add @chakra-ui/alert-dialog\n\n# or\n\nnpm i @chakra-ui/alert-dialog\n```\n\n## Import components\n\n```jsx\nimport {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n} from \"@chakra-ui/react\"\n```\n\n## Basic usage\n\n## Usage\n\nAlertDialog requires that you provide the `leastDestructiveRef` prop.\n\nBased on\n[WAI-ARIA specifications](https://www.w3.org/TR/wai-aria-practices/#alertdialog),\nfocus should be placed on the least destructive element when the dialog opens,\nto prevent users from accidentally confirming the destructive action.\n\n```jsx\nfunction AlertDialogExample() {\n  const [isOpen, setIsOpen] = React.useState()\n  const onClose = () => setIsOpen(false)\n  const cancelRef = React.useRef()\n\n  return (\n    <>\n      <Button colorScheme=\"red\" onClick={() => setIsOpen(true)}>\n        Delete Customer\n      </Button>\n\n      <AlertDialog\n        isOpen={isOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={onClose}\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n              Delete Customer\n            </AlertDialogHeader>\n\n            <AlertDialogBody>\n              Are you sure? You can't undo this action afterwards.\n            </AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={onClose}>\n                Cancel\n              </Button>\n              <Button colorScheme=\"red\" onClick={onClose} ml={3}>\n                Delete\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n    </>\n  )\n}\n```\n\n## Usage with Typescript\n\nUsing the above example will throw a typescript error. You'll want to modify the type of the `useRef` hook to the HTML element you're placing the focus on and default the value to null.\n\n\n```tsx\n  const cancelRef = React.useRef<HTMLButtonElement>(null)\n```\n\n\n# Drawer\n\nThe Drawer component is a panel that slides out from the edge of the screen. It\ncan be useful when you need users to complete a task or view some details\nwithout leaving the current page.\n\n## Installation\n\n```sh\nyarn add @chakra-ui/modal\n\n# or\n\nnpm i @chakra-ui/modal\n```\n\n## Import components\n\n```jsx\nimport {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerBody,\n  DrawerCloseButton,\n} from \"@chakra-ui/react\"\n```\n\n## Basic usage\n\n## Usage\n\nBy default, focus is placed on `DrawerCloseButton` when the drawer opens.\n\n```jsx\nfunction DrawerExample() {\n  const { isOpen, onOpen, onClose } = useDisclosure()\n  const btnRef = React.useRef()\n\n  return (\n    <>\n      <Button ref={btnRef} colorScheme=\"teal\" onClick={onOpen}>\n        Open\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"right\"\n        onClose={onClose}\n        finalFocusRef={btnRef}\n      >\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader>Create your account</DrawerHeader>\n\n          <DrawerBody>\n            <Input placeholder=\"Type here...\" />\n          </DrawerBody>\n\n          <DrawerFooter>\n            <Button variant=\"outline\" mr={3} onClick={onClose}>\n              Cancel\n            </Button>\n            <Button color=\"blue\">Save</Button>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </>\n  )\n}\n```\n"
}
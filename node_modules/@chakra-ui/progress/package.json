{
  "name": "@chakra-ui/progress",
  "version": "2.0.9",
  "description": "Progress bar component for Chakra UI",
  "keywords": [
    "theme",
    "theming",
    "chakra ui",
    "progress",
    "progress bar"
  ],
  "sideEffects": false,
  "author": "Segun Adebayo <sage@adebayosegun.com>",
  "homepage": "https://github.com/chakra-ui/chakra-ui#readme",
  "license": "MIT",
  "main": "dist/index.cjs.js",
  "module": "dist/index.esm.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "publishConfig": {
    "access": "public"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chakra-ui/chakra-ui.git",
    "directory": "packages/progress"
  },
  "bugs": {
    "url": "https://github.com/chakra-ui/chakra-ui/issues"
  },
  "dependencies": {
    "@chakra-ui/theme-tools": "2.0.9",
    "@chakra-ui/utils": "2.0.8",
    "@chakra-ui/react-utils": "2.0.5"
  },
  "devDependencies": {
    "@chakra-ui/system": "2.2.6",
    "react": "^18.0.0"
  },
  "peerDependencies": {
    "@chakra-ui/system": ">=2.0.0",
    "react": ">=18"
  },
  "scripts": {
    "build": "JSX=1 tsup src/index.ts --dts",
    "dev": "pnpm build -- --watch",
    "clean": "rimraf dist .turbo",
    "typecheck": "tsc --noEmit",
    "build:fast": "JSX=1 tsup src/index.ts"
  },
  "readme": "# Progress\n\nThe Progress component is an element that displays the progress status for a\ntask that takes a long time or consists of several steps.\n\n## Installation\n\n```sh\nyarn add @chakra-ui/progress\n\n# or\n\nnpm i @chakra-ui/progress\n```\n\n## Import Components\n\n```jsx\nimport {\n  Progress,\n  ProgressLabel,\n  CircularProgress,\n  CircularProgressLabel,\n} from \"@chakra-ui/progress\"\n```\n\n## Usage\n\n```jsx\n<Progress value={50} />\n```\n\n## Linear Progress\n\n```jsx\n<Progress value={50} />\n```\n\n## Color\n\nPass the `color` prop to apply any color that exists in the theme to the\nprogress\n\n```jsx\n<Progress color=\"pink\" value={20} />\n```\n\n## Sizes\n\nPass the `size` prop to increase the height of the progress\n\n```jsx\n<Progress size=\"sm\" value={20} />\n<Progress size=\"lg\" value={20} />\n```\n\n## Indeterminate\n\nPass the `value` for the progress as `undefined` to put the progress component\nin the indeterminate state\n\n```jsx\n<Progress margin=\"20px\" size=\"xs\" value={undefined} />\n```\n\n## With stripe\n\nPass the `hasStripe` prop to have a beautiful gradient to create a striped\neffect on the progress\n\n```jsx\n<Progress color=\"green\" hasStripe value={20} />\n```\n\n## With animation\n\nPass the `isAnimated` prop combined with the `hasStrip` prop to get a\nbeautifully animated progress\n\n```jsx\n<Progress hasStripe isAnimated value={20} />\n```\n\n## With label\n\nUse the `ProgressLabel` utility component to have a label for the progress\ncomponent\n\n```jsx\n<Progress value={60}>\n  <ProgressLabel>60%</ProgressLabel>\n</Progress>\n```\n\n## Circular progress\n\n```jsx\n<CircularProgress value={50} />\n```\n\n## Circular progress size\n\nPass the `size` prop to change the size of the circular progress. You can also\npass the `thickness` prop to change the thickness of the circular progress. The\n`thickness` prop is a fractional value whose actual value is determined by the\n`size` of the circular progress. In this example the circular progress will have\na thickness of 30px. 50% of size (120px) => 30px\n\n```jsx\n<CircularProgress size=\"120px\" thickness={0.5} value={60} />\n```\n\n## Circular progress color\n\nPass the `color` prop to apply any color that exists in the theme\n\n```jsx\n<CircularProgress color=\"pink\" value={20} />\n```\n\n## Circular progress with label\n\nUse the `CircularProgressLabel` utility component to have a label for the\ncircular progress\n\n```jsx\n<CircularProgress value={60}>\n  <CircularProgressLabel>60%</CircularProgressLabel>\n</CircularProgress>\n```\n\n## Accessibility\n\n- Progress has a role set to progressbar to denote that it is a progress bar\n- Progress has aria-valuenow set to the percentage completion value passed to\n  the component, to ensure the progress percent is visible to screen readers.\n\n## Note\n\nThe CircularProgress and the Spinner may seem to serve the same purpose, but\nsemantically, they don't. In the `indeterminate` state they have the following\ndifference.\n\n### CircularProgress\n\nIt is used to denote the progress of a determinate operation. Take for example\nan image upload operation:\n\n- Before upload begins, the upload progress is indeterminate (at this point,\n  it’s just spinning),\n- Once we know the size of the image and begin upload (using axios) then we\n  update the progress value of the CircularProgress (at this point, it shows the\n  progress). CircularProgress also comes with the aria-\\* attributes to make its\n  progress value accessible to screenreaders.\n\nCircularProgress also comes with the aria-\\* attributes to make its progress\nvalue accessible to screenreaders.\n\n### Spinner\n\nIt is more of a “presentational” loading indicator you can use on a page or a\ncomponent, while it’s loading, or before it renders. It doesn't have any\nsemantic meaning.\n\nTo give meaning to a Spinner/loading indicator, ARIA standards require that you\nmark the area of the component/page that’s loading with `aria-busy=true`.\n"
}
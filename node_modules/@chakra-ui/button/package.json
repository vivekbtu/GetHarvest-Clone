{
  "name": "@chakra-ui/button",
  "version": "2.0.8",
  "description": "A React component that is a base button.",
  "keywords": [
    "button",
    "button-group",
    "react",
    "chakra-ui",
    "component",
    "clickable",
    "tabbable"
  ],
  "sideEffects": false,
  "author": "Segun Adebayo <sage@adebayosegun.com>",
  "homepage": "https://github.com/chakra-ui/chakra-ui#readme",
  "license": "MIT",
  "main": "dist/index.cjs.js",
  "module": "dist/index.esm.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist"
  ],
  "publishConfig": {
    "access": "public"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/chakra-ui/chakra-ui.git",
    "directory": "packages/button"
  },
  "bugs": {
    "url": "https://github.com/chakra-ui/chakra-ui/issues"
  },
  "devDependencies": {
    "@chakra-ui/system": "2.2.6",
    "@chakra-ui/icons": "2.0.8",
    "@chakra-ui/theme": "2.1.7",
    "@chakra-ui/layout": "2.1.5",
    "framer-motion": "^6.2.9",
    "react-icons": "^4.2.0",
    "react-spinners": "0.11.0",
    "react": "^18.0.0"
  },
  "dependencies": {
    "@chakra-ui/hooks": "2.0.8",
    "@chakra-ui/react-utils": "2.0.5",
    "@chakra-ui/spinner": "2.0.8",
    "@chakra-ui/utils": "2.0.8"
  },
  "peerDependencies": {
    "@chakra-ui/system": ">=2.0.0",
    "react": ">=18"
  },
  "scripts": {
    "build": "JSX=1 tsup src/index.ts --dts",
    "dev": "pnpm build -- --watch",
    "clean": "rimraf dist .turbo",
    "typecheck": "tsc --noEmit",
    "build:fast": "JSX=1 tsup src/index.ts"
  },
  "readme": "# Button\n\nButtons are used as triggers for actions. They are used in forms, toolbars,\ndialog footers and as stand-alone action triggers.\n\n## Installation\n\n```sh\nyarn add @chakra-ui/button\n\n# or\n\nnpm i @chakra-ui/button\n```\n\n## Import component\n\n```jsx\nimport { Button } from \"@chakra-ui/button\"\n```\n\n## Usage\n\n```jsx\n<Button colorScheme=\"green\">Button</Button>\n```\n\n### Button Sizes\n\nUse the `size` prop to change the size of the button. You can set the value to\n`xs`, `sm`, `md`, or `lg`.\n\n```jsx\n<Stack>\n  <Button size=\"xs\">Button</Button>\n  <Button size=\"sm\">Button</Button>\n  <Button size=\"md\">Button</Button>\n  <Button size=\"lg\">Button</Button>\n</Stack>\n```\n\n### Button Variant\n\nUse the `variant` prop to change the visual style of the Button. You can set the\nvalue to `solid`, `ghost`, `outline`, or `link`.\n\n```jsx\n<ButtonGroup>\n  <Button variant=\"solid\">Button</Button>\n  <Button variant=\"outline\">Button</Button>\n  <Button variant=\"ghost\">Button</Button>\n  <Button variant=\"link\">Button</Button>\n</ButtonGroup>\n```\n\n### Button with Icon\n\nYou can add left and right icons to the Button components.\n\n```jsx\n<ButtonGroup>\n  <Button leftIcon={<EmailIcon />} variant=\"solid\">\n    Email\n  </Button>\n  <Button rightIcon={<ArrowForwardIcon />} variant=\"outline\">\n    Call us\n  </Button>\n</ButtonGroup>\n```\n\n### Button loading state\n\nPass `isLoading` prop to the Button component to show its loading state. You can\noptionally pass `loadingText` prop.\n\nYou can also use a custom spinner to render your own spinner component.\n\n```jsx\n<Stack>\n  <Button isLoading colorScheme=\"teal\" variant=\"solid\">\n    Email\n  </Button>\n\n  <Button\n    isLoading\n    colorScheme=\"teal\"\n    variant=\"outline\"\n    spinner={<BarSpinner />}\n  >\n    Submit\n  </Button>\n</Stack>\n```\n"
}
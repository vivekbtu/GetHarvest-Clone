{"ast":null,"code":"import { useTransform } from './use-transform.mjs';\nimport { invariant, warning } from 'hey-listen';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { useVisualElementContext } from '../context/MotionContext/index.mjs'; // Keep things reasonable and avoid scale: Infinity. In practise we might need\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\n// to simply hide content at unreasonable scales.\n\nconst maxScale = 100000;\n\nconst invertScale = scale => scale > 0.001 ? 1 / scale : maxScale;\n\nlet hasWarned = false;\n/**\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\n * of their respective parent scales.\n *\n * This is useful for undoing the distortion of content when scaling a parent component.\n *\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\n * of those instead.\n *\n * ```jsx\n * const MyComponent = () => {\n *   const { scaleX, scaleY } = useInvertedScale()\n *   return <motion.div style={{ scaleX, scaleY }} />\n * }\n * ```\n *\n * @deprecated\n */\n\nfunction useInvertedScale(scale) {\n  let parentScaleX = useMotionValue(1);\n  let parentScaleY = useMotionValue(1);\n  const visualElement = useVisualElementContext();\n  invariant(!!(scale || visualElement), \"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");\n  warning(hasWarned, \"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");\n  hasWarned = true;\n\n  if (scale) {\n    parentScaleX = scale.scaleX || parentScaleX;\n    parentScaleY = scale.scaleY || parentScaleY;\n  } else if (visualElement) {\n    parentScaleX = visualElement.getValue(\"scaleX\", 1);\n    parentScaleY = visualElement.getValue(\"scaleY\", 1);\n  }\n\n  const scaleX = useTransform(parentScaleX, invertScale);\n  const scaleY = useTransform(parentScaleY, invertScale);\n  return {\n    scaleX,\n    scaleY\n  };\n}\n\nexport { invertScale, useInvertedScale };","map":{"version":3,"names":["useTransform","invariant","warning","useMotionValue","useVisualElementContext","maxScale","invertScale","scale","hasWarned","useInvertedScale","parentScaleX","parentScaleY","visualElement","scaleX","scaleY","getValue"],"sources":["C:/Users/bittu/Desktop/React-Unit4Project/premium-grade-140/node_modules/framer-motion/dist/es/value/use-inverted-scale.mjs"],"sourcesContent":["import { useTransform } from './use-transform.mjs';\nimport { invariant, warning } from 'hey-listen';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { useVisualElementContext } from '../context/MotionContext/index.mjs';\n\n// Keep things reasonable and avoid scale: Infinity. In practise we might need\n// to add another value, opacity, that could interpolate scaleX/Y [0,0.01] => [0,1]\n// to simply hide content at unreasonable scales.\nconst maxScale = 100000;\nconst invertScale = (scale) => scale > 0.001 ? 1 / scale : maxScale;\nlet hasWarned = false;\n/**\n * Returns a `MotionValue` each for `scaleX` and `scaleY` that update with the inverse\n * of their respective parent scales.\n *\n * This is useful for undoing the distortion of content when scaling a parent component.\n *\n * By default, `useInvertedScale` will automatically fetch `scaleX` and `scaleY` from the nearest parent.\n * By passing other `MotionValue`s in as `useInvertedScale({ scaleX, scaleY })`, it will invert the output\n * of those instead.\n *\n * ```jsx\n * const MyComponent = () => {\n *   const { scaleX, scaleY } = useInvertedScale()\n *   return <motion.div style={{ scaleX, scaleY }} />\n * }\n * ```\n *\n * @deprecated\n */\nfunction useInvertedScale(scale) {\n    let parentScaleX = useMotionValue(1);\n    let parentScaleY = useMotionValue(1);\n    const visualElement = useVisualElementContext();\n    invariant(!!(scale || visualElement), \"If no scale values are provided, useInvertedScale must be used within a child of another motion component.\");\n    warning(hasWarned, \"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead.\");\n    hasWarned = true;\n    if (scale) {\n        parentScaleX = scale.scaleX || parentScaleX;\n        parentScaleY = scale.scaleY || parentScaleY;\n    }\n    else if (visualElement) {\n        parentScaleX = visualElement.getValue(\"scaleX\", 1);\n        parentScaleY = visualElement.getValue(\"scaleY\", 1);\n    }\n    const scaleX = useTransform(parentScaleX, invertScale);\n    const scaleY = useTransform(parentScaleY, invertScale);\n    return { scaleX, scaleY };\n}\n\nexport { invertScale, useInvertedScale };\n"],"mappings":"AAAA,SAASA,YAAT,QAA6B,qBAA7B;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,YAAnC;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,uBAAT,QAAwC,oCAAxC,C,CAEA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAG,MAAjB;;AACA,MAAMC,WAAW,GAAIC,KAAD,IAAWA,KAAK,GAAG,KAAR,GAAgB,IAAIA,KAApB,GAA4BF,QAA3D;;AACA,IAAIG,SAAS,GAAG,KAAhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,gBAAT,CAA0BF,KAA1B,EAAiC;EAC7B,IAAIG,YAAY,GAAGP,cAAc,CAAC,CAAD,CAAjC;EACA,IAAIQ,YAAY,GAAGR,cAAc,CAAC,CAAD,CAAjC;EACA,MAAMS,aAAa,GAAGR,uBAAuB,EAA7C;EACAH,SAAS,CAAC,CAAC,EAAEM,KAAK,IAAIK,aAAX,CAAF,EAA6B,4GAA7B,CAAT;EACAV,OAAO,CAACM,SAAD,EAAY,yFAAZ,CAAP;EACAA,SAAS,GAAG,IAAZ;;EACA,IAAID,KAAJ,EAAW;IACPG,YAAY,GAAGH,KAAK,CAACM,MAAN,IAAgBH,YAA/B;IACAC,YAAY,GAAGJ,KAAK,CAACO,MAAN,IAAgBH,YAA/B;EACH,CAHD,MAIK,IAAIC,aAAJ,EAAmB;IACpBF,YAAY,GAAGE,aAAa,CAACG,QAAd,CAAuB,QAAvB,EAAiC,CAAjC,CAAf;IACAJ,YAAY,GAAGC,aAAa,CAACG,QAAd,CAAuB,QAAvB,EAAiC,CAAjC,CAAf;EACH;;EACD,MAAMF,MAAM,GAAGb,YAAY,CAACU,YAAD,EAAeJ,WAAf,CAA3B;EACA,MAAMQ,MAAM,GAAGd,YAAY,CAACW,YAAD,EAAeL,WAAf,CAA3B;EACA,OAAO;IAAEO,MAAF;IAAUC;EAAV,CAAP;AACH;;AAED,SAASR,WAAT,EAAsBG,gBAAtB"},"metadata":{},"sourceType":"module"}
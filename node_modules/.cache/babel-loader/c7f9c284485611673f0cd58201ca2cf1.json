{"ast":null,"code":"import sync, { getFrameData } from 'framesync';\nimport { velocityPerSecond } from 'popmotion';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\n\nconst isFloat = value => {\n  return !isNaN(parseFloat(value));\n};\n/**\r\n * `MotionValue` is used to track the state and velocity of motion values.\r\n *\r\n * @public\r\n */\n\n\nclass MotionValue {\n  /**\r\n   * @param init - The initiating value\r\n   * @param config - Optional configuration options\r\n   *\r\n   * -  `transformer`: A function to transform incoming values with.\r\n   *\r\n   * @internal\r\n   */\n  constructor(init) {\n    var _this = this;\n\n    /**\r\n     * This will be replaced by the build step with the latest version number.\r\n     * When MotionValues are provided to motion components, warn if versions are mixed.\r\n     */\n    this.version = \"7.2.0\";\n    /**\r\n     * Duration, in milliseconds, since last updating frame.\r\n     *\r\n     * @internal\r\n     */\n\n    this.timeDelta = 0;\n    /**\r\n     * Timestamp of the last time this `MotionValue` was updated.\r\n     *\r\n     * @internal\r\n     */\n\n    this.lastUpdated = 0;\n    /**\r\n     * Functions to notify when the `MotionValue` updates.\r\n     *\r\n     * @internal\r\n     */\n\n    this.updateSubscribers = new SubscriptionManager();\n    /**\r\n     * Functions to notify when the velocity updates.\r\n     *\r\n     * @internal\r\n     */\n\n    this.velocityUpdateSubscribers = new SubscriptionManager();\n    /**\r\n     * Functions to notify when the `MotionValue` updates and `render` is set to `true`.\r\n     *\r\n     * @internal\r\n     */\n\n    this.renderSubscribers = new SubscriptionManager();\n    /**\r\n     * Tracks whether this value can output a velocity. Currently this is only true\r\n     * if the value is numerical, but we might be able to widen the scope here and support\r\n     * other value types.\r\n     *\r\n     * @internal\r\n     */\n\n    this.canTrackVelocity = false;\n\n    this.updateAndNotify = function (v) {\n      let render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      _this.prev = _this.current;\n      _this.current = v; // Update timestamp\n\n      const {\n        delta,\n        timestamp\n      } = getFrameData();\n\n      if (_this.lastUpdated !== timestamp) {\n        _this.timeDelta = delta;\n        _this.lastUpdated = timestamp;\n        sync.postRender(_this.scheduleVelocityCheck);\n      } // Update update subscribers\n\n\n      if (_this.prev !== _this.current) {\n        _this.updateSubscribers.notify(_this.current);\n      } // Update velocity subscribers\n\n\n      if (_this.velocityUpdateSubscribers.getSize()) {\n        _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n      } // Update render subscribers\n\n\n      if (render) {\n        _this.renderSubscribers.notify(_this.current);\n      }\n    };\n    /**\r\n     * Schedule a velocity check for the next frame.\r\n     *\r\n     * This is an instanced and bound function to prevent generating a new\r\n     * function once per frame.\r\n     *\r\n     * @internal\r\n     */\n\n\n    this.scheduleVelocityCheck = () => sync.postRender(this.velocityCheck);\n    /**\r\n     * Updates `prev` with `current` if the value hasn't been updated this frame.\r\n     * This ensures velocity calculations return `0`.\r\n     *\r\n     * This is an instanced and bound function to prevent generating a new\r\n     * function once per frame.\r\n     *\r\n     * @internal\r\n     */\n\n\n    this.velocityCheck = _ref => {\n      let {\n        timestamp\n      } = _ref;\n\n      if (timestamp !== this.lastUpdated) {\n        this.prev = this.current;\n        this.velocityUpdateSubscribers.notify(this.getVelocity());\n      }\n    };\n\n    this.hasAnimated = false;\n    this.prev = this.current = init;\n    this.canTrackVelocity = isFloat(this.current);\n  }\n  /**\r\n   * Adds a function that will be notified when the `MotionValue` is updated.\r\n   *\r\n   * It returns a function that, when called, will cancel the subscription.\r\n   *\r\n   * When calling `onChange` inside a React component, it should be wrapped with the\r\n   * `useEffect` hook. As it returns an unsubscribe function, this should be returned\r\n   * from the `useEffect` function to ensure you don't add duplicate subscribers..\r\n   *\r\n   * ```jsx\r\n   * export const MyComponent = () => {\r\n   *   const x = useMotionValue(0)\r\n   *   const y = useMotionValue(0)\r\n   *   const opacity = useMotionValue(1)\r\n   *\r\n   *   useEffect(() => {\r\n   *     function updateOpacity() {\r\n   *       const maxXY = Math.max(x.get(), y.get())\r\n   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\r\n   *       opacity.set(newOpacity)\r\n   *     }\r\n   *\r\n   *     const unsubscribeX = x.onChange(updateOpacity)\r\n   *     const unsubscribeY = y.onChange(updateOpacity)\r\n   *\r\n   *     return () => {\r\n   *       unsubscribeX()\r\n   *       unsubscribeY()\r\n   *     }\r\n   *   }, [])\r\n   *\r\n   *   return <motion.div style={{ x }} />\r\n   * }\r\n   * ```\r\n   *\r\n   * @privateRemarks\r\n   *\r\n   * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\r\n   *\r\n   * ```jsx\r\n   * useOnChange(x, () => {})\r\n   * ```\r\n   *\r\n   * @param subscriber - A function that receives the latest value.\r\n   * @returns A function that, when called, will cancel this subscription.\r\n   *\r\n   * @public\r\n   */\n\n\n  onChange(subscription) {\n    return this.updateSubscribers.add(subscription);\n  }\n\n  clearListeners() {\n    this.updateSubscribers.clear();\n  }\n  /**\r\n   * Adds a function that will be notified when the `MotionValue` requests a render.\r\n   *\r\n   * @param subscriber - A function that's provided the latest value.\r\n   * @returns A function that, when called, will cancel this subscription.\r\n   *\r\n   * @internal\r\n   */\n\n\n  onRenderRequest(subscription) {\n    // Render immediately\n    subscription(this.get());\n    return this.renderSubscribers.add(subscription);\n  }\n  /**\r\n   * Attaches a passive effect to the `MotionValue`.\r\n   *\r\n   * @internal\r\n   */\n\n\n  attach(passiveEffect) {\n    this.passiveEffect = passiveEffect;\n  }\n  /**\r\n   * Sets the state of the `MotionValue`.\r\n   *\r\n   * @remarks\r\n   *\r\n   * ```jsx\r\n   * const x = useMotionValue(0)\r\n   * x.set(10)\r\n   * ```\r\n   *\r\n   * @param latest - Latest value to set.\r\n   * @param render - Whether to notify render subscribers. Defaults to `true`\r\n   *\r\n   * @public\r\n   */\n\n\n  set(v) {\n    let render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (!render || !this.passiveEffect) {\n      this.updateAndNotify(v, render);\n    } else {\n      this.passiveEffect(v, this.updateAndNotify);\n    }\n  }\n  /**\r\n   * Returns the latest state of `MotionValue`\r\n   *\r\n   * @returns - The latest state of `MotionValue`\r\n   *\r\n   * @public\r\n   */\n\n\n  get() {\n    return this.current;\n  }\n  /**\r\n   * @public\r\n   */\n\n\n  getPrevious() {\n    return this.prev;\n  }\n  /**\r\n   * Returns the latest velocity of `MotionValue`\r\n   *\r\n   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\r\n   *\r\n   * @public\r\n   */\n\n\n  getVelocity() {\n    // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n    return this.canTrackVelocity ? // These casts could be avoided if parseFloat would be typed better\n    velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;\n  }\n  /**\r\n   * Registers a new animation to control this `MotionValue`. Only one\r\n   * animation can drive a `MotionValue` at one time.\r\n   *\r\n   * ```jsx\r\n   * value.start()\r\n   * ```\r\n   *\r\n   * @param animation - A function that starts the provided animation\r\n   *\r\n   * @internal\r\n   */\n\n\n  start(animation) {\n    this.stop();\n    return new Promise(resolve => {\n      this.hasAnimated = true;\n      this.stopAnimation = animation(resolve);\n    }).then(() => this.clearAnimation());\n  }\n  /**\r\n   * Stop the currently active animation.\r\n   *\r\n   * @public\r\n   */\n\n\n  stop() {\n    if (this.stopAnimation) this.stopAnimation();\n    this.clearAnimation();\n  }\n  /**\r\n   * Returns `true` if this value is currently animating.\r\n   *\r\n   * @public\r\n   */\n\n\n  isAnimating() {\n    return !!this.stopAnimation;\n  }\n\n  clearAnimation() {\n    this.stopAnimation = null;\n  }\n  /**\r\n   * Destroy and clean up subscribers to this `MotionValue`.\r\n   *\r\n   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\r\n   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\r\n   * created a `MotionValue` via the `motionValue` function.\r\n   *\r\n   * @public\r\n   */\n\n\n  destroy() {\n    this.updateSubscribers.clear();\n    this.renderSubscribers.clear();\n    this.stop();\n  }\n\n}\n\nfunction motionValue(init) {\n  return new MotionValue(init);\n}\n\nexport { MotionValue, motionValue };","map":{"version":3,"names":["sync","getFrameData","velocityPerSecond","SubscriptionManager","isFloat","value","isNaN","parseFloat","MotionValue","constructor","init","version","timeDelta","lastUpdated","updateSubscribers","velocityUpdateSubscribers","renderSubscribers","canTrackVelocity","updateAndNotify","v","render","prev","current","delta","timestamp","postRender","scheduleVelocityCheck","notify","getSize","getVelocity","velocityCheck","hasAnimated","onChange","subscription","add","clearListeners","clear","onRenderRequest","get","attach","passiveEffect","set","getPrevious","start","animation","stop","Promise","resolve","stopAnimation","then","clearAnimation","isAnimating","destroy","motionValue"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/value/index.mjs"],"sourcesContent":["import sync, { getFrameData } from 'framesync';\r\nimport { velocityPerSecond } from 'popmotion';\r\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\r\n\r\nconst isFloat = (value) => {\r\n    return !isNaN(parseFloat(value));\r\n};\r\n/**\r\n * `MotionValue` is used to track the state and velocity of motion values.\r\n *\r\n * @public\r\n */\r\nclass MotionValue {\r\n    /**\r\n     * @param init - The initiating value\r\n     * @param config - Optional configuration options\r\n     *\r\n     * -  `transformer`: A function to transform incoming values with.\r\n     *\r\n     * @internal\r\n     */\r\n    constructor(init) {\r\n        /**\r\n         * This will be replaced by the build step with the latest version number.\r\n         * When MotionValues are provided to motion components, warn if versions are mixed.\r\n         */\r\n        this.version = \"7.2.0\";\r\n        /**\r\n         * Duration, in milliseconds, since last updating frame.\r\n         *\r\n         * @internal\r\n         */\r\n        this.timeDelta = 0;\r\n        /**\r\n         * Timestamp of the last time this `MotionValue` was updated.\r\n         *\r\n         * @internal\r\n         */\r\n        this.lastUpdated = 0;\r\n        /**\r\n         * Functions to notify when the `MotionValue` updates.\r\n         *\r\n         * @internal\r\n         */\r\n        this.updateSubscribers = new SubscriptionManager();\r\n        /**\r\n         * Functions to notify when the velocity updates.\r\n         *\r\n         * @internal\r\n         */\r\n        this.velocityUpdateSubscribers = new SubscriptionManager();\r\n        /**\r\n         * Functions to notify when the `MotionValue` updates and `render` is set to `true`.\r\n         *\r\n         * @internal\r\n         */\r\n        this.renderSubscribers = new SubscriptionManager();\r\n        /**\r\n         * Tracks whether this value can output a velocity. Currently this is only true\r\n         * if the value is numerical, but we might be able to widen the scope here and support\r\n         * other value types.\r\n         *\r\n         * @internal\r\n         */\r\n        this.canTrackVelocity = false;\r\n        this.updateAndNotify = (v, render = true) => {\r\n            this.prev = this.current;\r\n            this.current = v;\r\n            // Update timestamp\r\n            const { delta, timestamp } = getFrameData();\r\n            if (this.lastUpdated !== timestamp) {\r\n                this.timeDelta = delta;\r\n                this.lastUpdated = timestamp;\r\n                sync.postRender(this.scheduleVelocityCheck);\r\n            }\r\n            // Update update subscribers\r\n            if (this.prev !== this.current) {\r\n                this.updateSubscribers.notify(this.current);\r\n            }\r\n            // Update velocity subscribers\r\n            if (this.velocityUpdateSubscribers.getSize()) {\r\n                this.velocityUpdateSubscribers.notify(this.getVelocity());\r\n            }\r\n            // Update render subscribers\r\n            if (render) {\r\n                this.renderSubscribers.notify(this.current);\r\n            }\r\n        };\r\n        /**\r\n         * Schedule a velocity check for the next frame.\r\n         *\r\n         * This is an instanced and bound function to prevent generating a new\r\n         * function once per frame.\r\n         *\r\n         * @internal\r\n         */\r\n        this.scheduleVelocityCheck = () => sync.postRender(this.velocityCheck);\r\n        /**\r\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\r\n         * This ensures velocity calculations return `0`.\r\n         *\r\n         * This is an instanced and bound function to prevent generating a new\r\n         * function once per frame.\r\n         *\r\n         * @internal\r\n         */\r\n        this.velocityCheck = ({ timestamp }) => {\r\n            if (timestamp !== this.lastUpdated) {\r\n                this.prev = this.current;\r\n                this.velocityUpdateSubscribers.notify(this.getVelocity());\r\n            }\r\n        };\r\n        this.hasAnimated = false;\r\n        this.prev = this.current = init;\r\n        this.canTrackVelocity = isFloat(this.current);\r\n    }\r\n    /**\r\n     * Adds a function that will be notified when the `MotionValue` is updated.\r\n     *\r\n     * It returns a function that, when called, will cancel the subscription.\r\n     *\r\n     * When calling `onChange` inside a React component, it should be wrapped with the\r\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\r\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\r\n     *\r\n     * ```jsx\r\n     * export const MyComponent = () => {\r\n     *   const x = useMotionValue(0)\r\n     *   const y = useMotionValue(0)\r\n     *   const opacity = useMotionValue(1)\r\n     *\r\n     *   useEffect(() => {\r\n     *     function updateOpacity() {\r\n     *       const maxXY = Math.max(x.get(), y.get())\r\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\r\n     *       opacity.set(newOpacity)\r\n     *     }\r\n     *\r\n     *     const unsubscribeX = x.onChange(updateOpacity)\r\n     *     const unsubscribeY = y.onChange(updateOpacity)\r\n     *\r\n     *     return () => {\r\n     *       unsubscribeX()\r\n     *       unsubscribeY()\r\n     *     }\r\n     *   }, [])\r\n     *\r\n     *   return <motion.div style={{ x }} />\r\n     * }\r\n     * ```\r\n     *\r\n     * @privateRemarks\r\n     *\r\n     * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\r\n     *\r\n     * ```jsx\r\n     * useOnChange(x, () => {})\r\n     * ```\r\n     *\r\n     * @param subscriber - A function that receives the latest value.\r\n     * @returns A function that, when called, will cancel this subscription.\r\n     *\r\n     * @public\r\n     */\r\n    onChange(subscription) {\r\n        return this.updateSubscribers.add(subscription);\r\n    }\r\n    clearListeners() {\r\n        this.updateSubscribers.clear();\r\n    }\r\n    /**\r\n     * Adds a function that will be notified when the `MotionValue` requests a render.\r\n     *\r\n     * @param subscriber - A function that's provided the latest value.\r\n     * @returns A function that, when called, will cancel this subscription.\r\n     *\r\n     * @internal\r\n     */\r\n    onRenderRequest(subscription) {\r\n        // Render immediately\r\n        subscription(this.get());\r\n        return this.renderSubscribers.add(subscription);\r\n    }\r\n    /**\r\n     * Attaches a passive effect to the `MotionValue`.\r\n     *\r\n     * @internal\r\n     */\r\n    attach(passiveEffect) {\r\n        this.passiveEffect = passiveEffect;\r\n    }\r\n    /**\r\n     * Sets the state of the `MotionValue`.\r\n     *\r\n     * @remarks\r\n     *\r\n     * ```jsx\r\n     * const x = useMotionValue(0)\r\n     * x.set(10)\r\n     * ```\r\n     *\r\n     * @param latest - Latest value to set.\r\n     * @param render - Whether to notify render subscribers. Defaults to `true`\r\n     *\r\n     * @public\r\n     */\r\n    set(v, render = true) {\r\n        if (!render || !this.passiveEffect) {\r\n            this.updateAndNotify(v, render);\r\n        }\r\n        else {\r\n            this.passiveEffect(v, this.updateAndNotify);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the latest state of `MotionValue`\r\n     *\r\n     * @returns - The latest state of `MotionValue`\r\n     *\r\n     * @public\r\n     */\r\n    get() {\r\n        return this.current;\r\n    }\r\n    /**\r\n     * @public\r\n     */\r\n    getPrevious() {\r\n        return this.prev;\r\n    }\r\n    /**\r\n     * Returns the latest velocity of `MotionValue`\r\n     *\r\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\r\n     *\r\n     * @public\r\n     */\r\n    getVelocity() {\r\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\r\n        return this.canTrackVelocity\r\n            ? // These casts could be avoided if parseFloat would be typed better\r\n                velocityPerSecond(parseFloat(this.current) -\r\n                    parseFloat(this.prev), this.timeDelta)\r\n            : 0;\r\n    }\r\n    /**\r\n     * Registers a new animation to control this `MotionValue`. Only one\r\n     * animation can drive a `MotionValue` at one time.\r\n     *\r\n     * ```jsx\r\n     * value.start()\r\n     * ```\r\n     *\r\n     * @param animation - A function that starts the provided animation\r\n     *\r\n     * @internal\r\n     */\r\n    start(animation) {\r\n        this.stop();\r\n        return new Promise((resolve) => {\r\n            this.hasAnimated = true;\r\n            this.stopAnimation = animation(resolve);\r\n        }).then(() => this.clearAnimation());\r\n    }\r\n    /**\r\n     * Stop the currently active animation.\r\n     *\r\n     * @public\r\n     */\r\n    stop() {\r\n        if (this.stopAnimation)\r\n            this.stopAnimation();\r\n        this.clearAnimation();\r\n    }\r\n    /**\r\n     * Returns `true` if this value is currently animating.\r\n     *\r\n     * @public\r\n     */\r\n    isAnimating() {\r\n        return !!this.stopAnimation;\r\n    }\r\n    clearAnimation() {\r\n        this.stopAnimation = null;\r\n    }\r\n    /**\r\n     * Destroy and clean up subscribers to this `MotionValue`.\r\n     *\r\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\r\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\r\n     * created a `MotionValue` via the `motionValue` function.\r\n     *\r\n     * @public\r\n     */\r\n    destroy() {\r\n        this.updateSubscribers.clear();\r\n        this.renderSubscribers.clear();\r\n        this.stop();\r\n    }\r\n}\r\nfunction motionValue(init) {\r\n    return new MotionValue(init);\r\n}\r\n\r\nexport { MotionValue, motionValue };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
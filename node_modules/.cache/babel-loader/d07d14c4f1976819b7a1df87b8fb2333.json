{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n/** @jsx jsx */\n\nimport { jsx } from \"@emotion/core\";\nimport { createContext, useContext, useState } from \"react\";\nimport useDarkMode from \"use-dark-mode\"; // This context handles the color mode (light or dark) of the UI\n\nexport var ColorModeContext = createContext({\n  colorMode: \"light\",\n  toggleColorMode: function toggleColorMode() {}\n});\n\nvar ColorModeProvider = function ColorModeProvider(_ref) {\n  var value = _ref.value,\n      children = _ref.children;\n\n  var _useState = useState(value),\n      manualMode = _useState[0],\n      setManualMode = _useState[1];\n\n  var manualToggle = function manualToggle() {\n    if (manualMode === \"light\") {\n      setManualMode(\"dark\");\n    }\n\n    if (manualMode === \"dark\") {\n      setManualMode(\"light\");\n    }\n  };\n\n  var _useDarkMode = useDarkMode(false),\n      isDarkMode = _useDarkMode.value,\n      toggle = _useDarkMode.toggle;\n\n  var colorMode = isDarkMode ? \"dark\" : \"light\";\n  var childContext = value != null ? {\n    colorMode: manualMode,\n    toggleColorMode: manualToggle\n  } : {\n    colorMode: colorMode,\n    toggleColorMode: toggle\n  };\n  return jsx(ColorModeContext.Provider, {\n    value: childContext\n  }, children);\n};\n\nvar DarkMode = function DarkMode(props) {\n  return jsx(ColorModeProvider, _extends({\n    value: \"dark\"\n  }, props));\n};\n\nvar LightMode = function LightMode(props) {\n  return jsx(ColorModeProvider, _extends({\n    value: \"light\"\n  }, props));\n};\n\nvar useColorMode = function useColorMode() {\n  var context = useContext(ColorModeContext);\n\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n\n  return context;\n};\n\nexport default ColorModeProvider;\nexport { useColorMode, DarkMode, LightMode };","map":{"version":3,"names":["_extends","jsx","createContext","useContext","useState","useDarkMode","ColorModeContext","colorMode","toggleColorMode","ColorModeProvider","_ref","value","children","_useState","manualMode","setManualMode","manualToggle","_useDarkMode","isDarkMode","toggle","childContext","Provider","DarkMode","props","LightMode","useColorMode","context","undefined","Error"],"sources":["C:/Users/bittu/Desktop/Unit4Project-React/my-project/node_modules/@chakra-ui/core/dist/es/ColorModeProvider/index.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\n\n/** @jsx jsx */\nimport { jsx } from \"@emotion/core\";\nimport { createContext, useContext, useState } from \"react\";\nimport useDarkMode from \"use-dark-mode\"; // This context handles the color mode (light or dark) of the UI\n\nexport var ColorModeContext = createContext({\n  colorMode: \"light\",\n  toggleColorMode: function toggleColorMode() {}\n});\n\nvar ColorModeProvider = function ColorModeProvider(_ref) {\n  var value = _ref.value,\n      children = _ref.children;\n\n  var _useState = useState(value),\n      manualMode = _useState[0],\n      setManualMode = _useState[1];\n\n  var manualToggle = function manualToggle() {\n    if (manualMode === \"light\") {\n      setManualMode(\"dark\");\n    }\n\n    if (manualMode === \"dark\") {\n      setManualMode(\"light\");\n    }\n  };\n\n  var _useDarkMode = useDarkMode(false),\n      isDarkMode = _useDarkMode.value,\n      toggle = _useDarkMode.toggle;\n\n  var colorMode = isDarkMode ? \"dark\" : \"light\";\n  var childContext = value != null ? {\n    colorMode: manualMode,\n    toggleColorMode: manualToggle\n  } : {\n    colorMode: colorMode,\n    toggleColorMode: toggle\n  };\n  return jsx(ColorModeContext.Provider, {\n    value: childContext\n  }, children);\n};\n\nvar DarkMode = function DarkMode(props) {\n  return jsx(ColorModeProvider, _extends({\n    value: \"dark\"\n  }, props));\n};\n\nvar LightMode = function LightMode(props) {\n  return jsx(ColorModeProvider, _extends({\n    value: \"light\"\n  }, props));\n};\n\nvar useColorMode = function useColorMode() {\n  var context = useContext(ColorModeContext);\n\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n\n  return context;\n};\n\nexport default ColorModeProvider;\nexport { useColorMode, DarkMode, LightMode };"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AAEA;;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAAyC;;AAEzC,OAAO,IAAIC,gBAAgB,GAAGJ,aAAa,CAAC;EAC1CK,SAAS,EAAE,OAD+B;EAE1CC,eAAe,EAAE,SAASA,eAAT,GAA2B,CAAE;AAFJ,CAAD,CAApC;;AAKP,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,IAA3B,EAAiC;EACvD,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;EAAA,IACIC,QAAQ,GAAGF,IAAI,CAACE,QADpB;;EAGA,IAAIC,SAAS,GAAGT,QAAQ,CAACO,KAAD,CAAxB;EAAA,IACIG,UAAU,GAAGD,SAAS,CAAC,CAAD,CAD1B;EAAA,IAEIE,aAAa,GAAGF,SAAS,CAAC,CAAD,CAF7B;;EAIA,IAAIG,YAAY,GAAG,SAASA,YAAT,GAAwB;IACzC,IAAIF,UAAU,KAAK,OAAnB,EAA4B;MAC1BC,aAAa,CAAC,MAAD,CAAb;IACD;;IAED,IAAID,UAAU,KAAK,MAAnB,EAA2B;MACzBC,aAAa,CAAC,OAAD,CAAb;IACD;EACF,CARD;;EAUA,IAAIE,YAAY,GAAGZ,WAAW,CAAC,KAAD,CAA9B;EAAA,IACIa,UAAU,GAAGD,YAAY,CAACN,KAD9B;EAAA,IAEIQ,MAAM,GAAGF,YAAY,CAACE,MAF1B;;EAIA,IAAIZ,SAAS,GAAGW,UAAU,GAAG,MAAH,GAAY,OAAtC;EACA,IAAIE,YAAY,GAAGT,KAAK,IAAI,IAAT,GAAgB;IACjCJ,SAAS,EAAEO,UADsB;IAEjCN,eAAe,EAAEQ;EAFgB,CAAhB,GAGf;IACFT,SAAS,EAAEA,SADT;IAEFC,eAAe,EAAEW;EAFf,CAHJ;EAOA,OAAOlB,GAAG,CAACK,gBAAgB,CAACe,QAAlB,EAA4B;IACpCV,KAAK,EAAES;EAD6B,CAA5B,EAEPR,QAFO,CAAV;AAGD,CAjCD;;AAmCA,IAAIU,QAAQ,GAAG,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;EACtC,OAAOtB,GAAG,CAACQ,iBAAD,EAAoBT,QAAQ,CAAC;IACrCW,KAAK,EAAE;EAD8B,CAAD,EAEnCY,KAFmC,CAA5B,CAAV;AAGD,CAJD;;AAMA,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBD,KAAnB,EAA0B;EACxC,OAAOtB,GAAG,CAACQ,iBAAD,EAAoBT,QAAQ,CAAC;IACrCW,KAAK,EAAE;EAD8B,CAAD,EAEnCY,KAFmC,CAA5B,CAAV;AAGD,CAJD;;AAMA,IAAIE,YAAY,GAAG,SAASA,YAAT,GAAwB;EACzC,IAAIC,OAAO,GAAGvB,UAAU,CAACG,gBAAD,CAAxB;;EAEA,IAAIoB,OAAO,KAAKC,SAAhB,EAA2B;IACzB,MAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;EACD;;EAED,OAAOF,OAAP;AACD,CARD;;AAUA,eAAejB,iBAAf;AACA,SAASgB,YAAT,EAAuBH,QAAvB,EAAiCE,SAAjC"},"metadata":{},"sourceType":"module"}
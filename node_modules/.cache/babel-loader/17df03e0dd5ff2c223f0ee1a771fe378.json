{"ast":null,"code":"import { isString, isNumber } from '@motionone/utils';\nvar namedEdges = {\n  start: 0,\n  center: 0.5,\n  end: 1\n};\n\nfunction resolveEdge(edge, length) {\n  var inset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var delta = 0;\n  /**\r\n   * If we have this edge defined as a preset, replace the definition\r\n   * with the numerical value.\r\n   */\n\n  if (namedEdges[edge] !== undefined) {\n    edge = namedEdges[edge];\n  }\n  /**\r\n   * Handle unit values\r\n   */\n\n\n  if (isString(edge)) {\n    var asNumber = parseFloat(edge);\n\n    if (edge.endsWith(\"px\")) {\n      delta = asNumber;\n    } else if (edge.endsWith(\"%\")) {\n      edge = asNumber / 100;\n    } else if (edge.endsWith(\"vw\")) {\n      delta = asNumber / 100 * document.documentElement.clientWidth;\n    } else if (edge.endsWith(\"vh\")) {\n      delta = asNumber / 100 * document.documentElement.clientHeight;\n    } else {\n      edge = asNumber;\n    }\n  }\n  /**\r\n   * If the edge is defined as a number, handle as a progress value.\r\n   */\n\n\n  if (isNumber(edge)) {\n    delta = length * edge;\n  }\n\n  return inset + delta;\n}\n\nexport { namedEdges, resolveEdge };","map":{"version":3,"names":["isString","isNumber","namedEdges","start","center","end","resolveEdge","edge","length","inset","delta","undefined","asNumber","parseFloat","endsWith","document","documentElement","clientWidth","clientHeight"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@motionone/dom/dist/gestures/scroll/offsets/edge.es.js"],"sourcesContent":["import { isString, isNumber } from '@motionone/utils';\r\n\r\nconst namedEdges = {\r\n    start: 0,\r\n    center: 0.5,\r\n    end: 1,\r\n};\r\nfunction resolveEdge(edge, length, inset = 0) {\r\n    let delta = 0;\r\n    /**\r\n     * If we have this edge defined as a preset, replace the definition\r\n     * with the numerical value.\r\n     */\r\n    if (namedEdges[edge] !== undefined) {\r\n        edge = namedEdges[edge];\r\n    }\r\n    /**\r\n     * Handle unit values\r\n     */\r\n    if (isString(edge)) {\r\n        const asNumber = parseFloat(edge);\r\n        if (edge.endsWith(\"px\")) {\r\n            delta = asNumber;\r\n        }\r\n        else if (edge.endsWith(\"%\")) {\r\n            edge = asNumber / 100;\r\n        }\r\n        else if (edge.endsWith(\"vw\")) {\r\n            delta = (asNumber / 100) * document.documentElement.clientWidth;\r\n        }\r\n        else if (edge.endsWith(\"vh\")) {\r\n            delta = (asNumber / 100) * document.documentElement.clientHeight;\r\n        }\r\n        else {\r\n            edge = asNumber;\r\n        }\r\n    }\r\n    /**\r\n     * If the edge is defined as a number, handle as a progress value.\r\n     */\r\n    if (isNumber(edge)) {\r\n        delta = length * edge;\r\n    }\r\n    return inset + delta;\r\n}\r\n\r\nexport { namedEdges, resolveEdge };\r\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,kBAAnC;AAEA,IAAMC,UAAU,GAAG;EACfC,KAAK,EAAE,CADQ;EAEfC,MAAM,EAAE,GAFO;EAGfC,GAAG,EAAE;AAHU,CAAnB;;AAKA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,MAA3B,EAA8C;EAAA,IAAXC,KAAW,uEAAH,CAAG;EAC1C,IAAIC,KAAK,GAAG,CAAZ;EACA;AACJ;AACA;AACA;;EACI,IAAIR,UAAU,CAACK,IAAD,CAAV,KAAqBI,SAAzB,EAAoC;IAChCJ,IAAI,GAAGL,UAAU,CAACK,IAAD,CAAjB;EACH;EACD;AACJ;AACA;;;EACI,IAAIP,QAAQ,CAACO,IAAD,CAAZ,EAAoB;IAChB,IAAMK,QAAQ,GAAGC,UAAU,CAACN,IAAD,CAA3B;;IACA,IAAIA,IAAI,CAACO,QAAL,CAAc,IAAd,CAAJ,EAAyB;MACrBJ,KAAK,GAAGE,QAAR;IACH,CAFD,MAGK,IAAIL,IAAI,CAACO,QAAL,CAAc,GAAd,CAAJ,EAAwB;MACzBP,IAAI,GAAGK,QAAQ,GAAG,GAAlB;IACH,CAFI,MAGA,IAAIL,IAAI,CAACO,QAAL,CAAc,IAAd,CAAJ,EAAyB;MAC1BJ,KAAK,GAAIE,QAAQ,GAAG,GAAZ,GAAmBG,QAAQ,CAACC,eAAT,CAAyBC,WAApD;IACH,CAFI,MAGA,IAAIV,IAAI,CAACO,QAAL,CAAc,IAAd,CAAJ,EAAyB;MAC1BJ,KAAK,GAAIE,QAAQ,GAAG,GAAZ,GAAmBG,QAAQ,CAACC,eAAT,CAAyBE,YAApD;IACH,CAFI,MAGA;MACDX,IAAI,GAAGK,QAAP;IACH;EACJ;EACD;AACJ;AACA;;;EACI,IAAIX,QAAQ,CAACM,IAAD,CAAZ,EAAoB;IAChBG,KAAK,GAAGF,MAAM,GAAGD,IAAjB;EACH;;EACD,OAAOE,KAAK,GAAGC,KAAf;AACH;;AAED,SAASR,UAAT,EAAqBI,WAArB"},"metadata":{},"sourceType":"module"}
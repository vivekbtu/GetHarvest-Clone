{"ast":null,"code":"import { __rest } from 'tslib';\nimport sync, { cancelSync } from 'framesync';\nimport { motionValue } from '../value/index.mjs';\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\nimport { createLifecycles } from './utils/lifecycles.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.mjs';\n\nconst visualElement = _ref => {\n  let {\n    treeType = \"\",\n    build,\n    getBaseTarget,\n    makeTargetAnimatable,\n    measureViewportBox,\n    render: renderInstance,\n    readValueFromInstance,\n    removeValueFromRenderState,\n    sortNodePosition,\n    scrapeMotionValuesFromProps\n  } = _ref;\n  return function (_ref2) {\n    let {\n      parent,\n      props,\n      presenceId,\n      blockInitialAnimation,\n      visualState,\n      shouldReduceMotion\n    } = _ref2;\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let isMounted = false;\n    const {\n      latestValues,\n      renderState\n    } = visualState;\n    /**\r\n     * The instance of the render-specific node that will be hydrated by the\r\n     * exposed React ref. So for example, this visual element can host a\r\n     * HTMLElement, plain object, or Three.js object. The functions provided\r\n     * in VisualElementConfig allow us to interface with this instance.\r\n     */\n\n    let instance;\n    /**\r\n     * Manages the subscriptions for a visual element's lifecycle, for instance\r\n     * onRender\r\n     */\n\n    const lifecycles = createLifecycles();\n    /**\r\n     * A map of all motion values attached to this visual element. Motion\r\n     * values are source of truth for any given animated value. A motion\r\n     * value might be provided externally by the component via props.\r\n     */\n\n    const values = new Map();\n    /**\r\n     * A map of every subscription that binds the provided or generated\r\n     * motion values onChange listeners to this visual element.\r\n     */\n\n    const valueSubscriptions = new Map();\n    /**\r\n     * A reference to the previously-provided motion values as returned\r\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\r\n     * if any motion values need to be removed after props are updated.\r\n     */\n\n    let prevMotionValues = {};\n    /**\r\n     * When values are removed from all animation props we need to search\r\n     * for a fallback value to animate to. These values are tracked in baseTarget.\r\n     */\n\n    const baseTarget = Object.assign({}, latestValues); // Internal methods ========================\n\n    /**\r\n     * On mount, this will be hydrated with a callback to disconnect\r\n     * this visual element from its parent on unmount.\r\n     */\n\n    let removeFromVariantTree;\n    /**\r\n     * Render the element with the latest styles outside of the React\r\n     * render lifecycle\r\n     */\n\n    function render() {\n      if (!instance || !isMounted) return;\n      triggerBuild();\n      renderInstance(instance, renderState, props.style, element.projection);\n    }\n\n    function triggerBuild() {\n      build(element, renderState, latestValues, options, props);\n    }\n\n    function update() {\n      lifecycles.notifyUpdate(latestValues);\n    }\n    /**\r\n     *\r\n     */\n\n\n    function bindToMotionValue(key, value) {\n      const removeOnChange = value.onChange(latestValue => {\n        latestValues[key] = latestValue;\n        props.onUpdate && sync.update(update, false, true);\n      });\n      const removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\n      valueSubscriptions.set(key, () => {\n        removeOnChange();\n        removeOnRenderRequest();\n      });\n    }\n    /**\r\n     * Any motion values that are provided to the element when created\r\n     * aren't yet bound to the element, as this would technically be impure.\r\n     * However, we iterate through the motion values and set them to the\r\n     * initial values for this component.\r\n     *\r\n     * TODO: This is impure and we should look at changing this to run on mount.\r\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\r\n     * more a reflection of the test.\r\n     */\n\n\n    const _a = scrapeMotionValuesFromProps(props),\n          {\n      willChange\n    } = _a,\n          initialMotionValues = __rest(_a, [\"willChange\"]);\n\n    for (const key in initialMotionValues) {\n      const value = initialMotionValues[key];\n\n      if (latestValues[key] !== undefined && isMotionValue(value)) {\n        value.set(latestValues[key], false);\n\n        if (isWillChangeMotionValue(willChange)) {\n          willChange.add(key);\n        }\n      }\n    }\n    /**\r\n     * Determine what role this visual element should take in the variant tree.\r\n     */\n\n\n    const isControllingVariants = checkIfControllingVariants(props);\n    const isVariantNode = checkIfVariantNode(props);\n    const element = Object.assign(Object.assign({\n      treeType,\n\n      /**\r\n       * This is a mirror of the internal instance prop, which keeps\r\n       * VisualElement type-compatible with React's RefObject.\r\n       */\n      current: null,\n\n      /**\r\n       * The depth of this visual element within the visual element tree.\r\n       */\n      depth: parent ? parent.depth + 1 : 0,\n      parent,\n      children: new Set(),\n\n      /**\r\n       *\r\n       */\n      presenceId,\n      shouldReduceMotion,\n\n      /**\r\n       * If this component is part of the variant tree, it should track\r\n       * any children that are also part of the tree. This is essentially\r\n       * a shadow tree to simplify logic around how to stagger over children.\r\n       */\n      variantChildren: isVariantNode ? new Set() : undefined,\n\n      /**\r\n       * Whether this instance is visible. This can be changed imperatively\r\n       * by the projection tree, is analogous to CSS's visibility in that\r\n       * hidden elements should take up layout, and needs enacting by the configured\r\n       * render function.\r\n       */\n      isVisible: undefined,\n\n      /**\r\n       * Normally, if a component is controlled by a parent's variants, it can\r\n       * rely on that ancestor to trigger animations further down the tree.\r\n       * However, if a component is created after its parent is mounted, the parent\r\n       * won't trigger that mount animation so the child needs to.\r\n       *\r\n       * TODO: This might be better replaced with a method isParentMounted\r\n       */\n      manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()),\n\n      /**\r\n       * This can be set by AnimatePresence to force components that mount\r\n       * at the same time as it to mount as if they have initial={false} set.\r\n       */\n      blockInitialAnimation,\n\n      /**\r\n       * Determine whether this component has mounted yet. This is mostly used\r\n       * by variant children to determine whether they need to trigger their\r\n       * own animations on mount.\r\n       */\n      isMounted: () => Boolean(instance),\n\n      mount(newInstance) {\n        isMounted = true;\n        instance = element.current = newInstance;\n\n        if (element.projection) {\n          element.projection.mount(newInstance);\n        }\n\n        if (isVariantNode && parent && !isControllingVariants) {\n          removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\n        }\n\n        values.forEach((value, key) => bindToMotionValue(key, value));\n        parent === null || parent === void 0 ? void 0 : parent.children.add(element);\n        element.setProps(props);\n      },\n\n      /**\r\n       *\r\n       */\n      unmount() {\n        var _a;\n\n        (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\n        cancelSync.update(update);\n        cancelSync.render(render);\n        valueSubscriptions.forEach(remove => remove());\n        removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\n        parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\n        lifecycles.clearAllListeners();\n        instance = undefined;\n        isMounted = false;\n      },\n\n      /**\r\n       * Add a child visual element to our set of children.\r\n       */\n      addVariantChild(child) {\n        var _a;\n\n        const closestVariantNode = element.getClosestVariantNode();\n\n        if (closestVariantNode) {\n          (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\n          return () => closestVariantNode.variantChildren.delete(child);\n        }\n      },\n\n      sortNodePosition(other) {\n        /**\r\n         * If these nodes aren't even of the same type we can't compare their depth.\r\n         */\n        if (!sortNodePosition || treeType !== other.treeType) return 0;\n        return sortNodePosition(element.getInstance(), other.getInstance());\n      },\n\n      /**\r\n       * Returns the closest variant node in the tree starting from\r\n       * this visual element.\r\n       */\n      getClosestVariantNode: () => isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode(),\n\n      /**\r\n       * Expose the latest layoutId prop.\r\n       */\n      getLayoutId: () => props.layoutId,\n\n      /**\r\n       * Returns the current instance.\r\n       */\n      getInstance: () => instance,\n\n      /**\r\n       * Get/set the latest static values.\r\n       */\n      getStaticValue: key => latestValues[key],\n      setStaticValue: (key, value) => latestValues[key] = value,\n\n      /**\r\n       * Returns the latest motion value state. Currently only used to take\r\n       * a snapshot of the visual element - perhaps this can return the whole\r\n       * visual state\r\n       */\n      getLatestValues: () => latestValues,\n\n      /**\r\n       * Set the visiblity of the visual element. If it's changed, schedule\r\n       * a render to reflect these changes.\r\n       */\n      setVisibility(visibility) {\n        if (element.isVisible === visibility) return;\n        element.isVisible = visibility;\n        element.scheduleRender();\n      },\n\n      /**\r\n       * Make a target animatable by Popmotion. For instance, if we're\r\n       * trying to animate width from 100px to 100vw we need to measure 100vw\r\n       * in pixels to determine what we really need to animate to. This is also\r\n       * pluggable to support Framer's custom value types like Color,\r\n       * and CSS variables.\r\n       */\n      makeTargetAnimatable(target) {\n        let canMutate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return makeTargetAnimatable(element, target, props, canMutate);\n      },\n\n      /**\r\n       * Measure the current viewport box with or without transforms.\r\n       * Only measures axis-aligned boxes, rotate and skew must be manually\r\n       * removed with a re-render to work.\r\n       */\n      measureViewportBox() {\n        return measureViewportBox(instance, props);\n      },\n\n      // Motion values ========================\n\n      /**\r\n       * Add a motion value and bind it to this visual element.\r\n       */\n      addValue(key, value) {\n        // Remove existing value if it exists\n        if (element.hasValue(key)) element.removeValue(key);\n        values.set(key, value);\n        latestValues[key] = value.get();\n        bindToMotionValue(key, value);\n      },\n\n      /**\r\n       * Remove a motion value and unbind any active subscriptions.\r\n       */\n      removeValue(key) {\n        var _a;\n\n        values.delete(key);\n        (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\n        valueSubscriptions.delete(key);\n        delete latestValues[key];\n        removeValueFromRenderState(key, renderState);\n      },\n\n      /**\r\n       * Check whether we have a motion value for this key\r\n       */\n      hasValue: key => values.has(key),\n\n      /**\r\n       * Get a motion value for this key. If called with a default\r\n       * value, we'll create one if none exists.\r\n       */\n      getValue(key, defaultValue) {\n        let value = values.get(key);\n\n        if (value === undefined && defaultValue !== undefined) {\n          value = motionValue(defaultValue);\n          element.addValue(key, value);\n        }\n\n        return value;\n      },\n\n      /**\r\n       * Iterate over our motion values.\r\n       */\n      forEachValue: callback => values.forEach(callback),\n\n      /**\r\n       * If we're trying to animate to a previously unencountered value,\r\n       * we need to check for it in our state and as a last resort read it\r\n       * directly from the instance (which might have performance implications).\r\n       */\n      readValue: key => {\n        var _a;\n\n        return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options);\n      },\n\n      /**\r\n       * Set the base target to later animate back to. This is currently\r\n       * only hydrated on creation and when we first read a value.\r\n       */\n      setBaseTarget(key, value) {\n        baseTarget[key] = value;\n      },\n\n      /**\r\n       * Find the base target for a value thats been removed from all animation\r\n       * props.\r\n       */\n      getBaseTarget(key) {\n        if (getBaseTarget) {\n          const target = getBaseTarget(props, key);\n          if (target !== undefined && !isMotionValue(target)) return target;\n        }\n\n        return baseTarget[key];\n      }\n\n    }, lifecycles), {\n      /**\r\n       * Build the renderer state based on the latest visual state.\r\n       */\n      build() {\n        triggerBuild();\n        return renderState;\n      },\n\n      /**\r\n       * Schedule a render on the next animation frame.\r\n       */\n      scheduleRender() {\n        sync.render(render, false, true);\n      },\n\n      /**\r\n       * Synchronously fire render. It's prefered that we batch renders but\r\n       * in many circumstances, like layout measurement, we need to run this\r\n       * synchronously. However in those instances other measures should be taken\r\n       * to batch reads/writes.\r\n       */\n      syncRender: render,\n\n      /**\r\n       * Update the provided props. Ensure any newly-added motion values are\r\n       * added to our map, old ones removed, and listeners updated.\r\n       */\n      setProps(newProps) {\n        if (newProps.transformTemplate || props.transformTemplate) {\n          element.scheduleRender();\n        }\n\n        props = newProps;\n        lifecycles.updatePropListeners(newProps);\n        prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\n      },\n\n      getProps: () => props,\n      // Variants ==============================\n\n      /**\r\n       * Returns the variant definition with a given name.\r\n       */\n      getVariant: name => {\n        var _a;\n\n        return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name];\n      },\n\n      /**\r\n       * Returns the defined default transition on this component.\r\n       */\n      getDefaultTransition: () => props.transition,\n      getTransformPagePoint: () => {\n        return props.transformPagePoint;\n      },\n\n      /**\r\n       * Used by child variant nodes to get the closest ancestor variant props.\r\n       */\n      getVariantContext() {\n        let startAtParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        if (startAtParent) return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\n\n        if (!isControllingVariants) {\n          const context = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\n\n          if (props.initial !== undefined) {\n            context.initial = props.initial;\n          }\n\n          return context;\n        }\n\n        const context = {};\n\n        for (let i = 0; i < numVariantProps; i++) {\n          const name = variantProps[i];\n          const prop = props[name];\n\n          if (isVariantLabel(prop) || prop === false) {\n            context[name] = prop;\n          }\n        }\n\n        return context;\n      }\n\n    });\n    return element;\n  };\n};\n\nconst variantProps = [\"initial\", ...variantPriorityOrder];\nconst numVariantProps = variantProps.length;\nexport { visualElement };","map":{"version":3,"names":["__rest","sync","cancelSync","motionValue","isWillChangeMotionValue","isMotionValue","variantPriorityOrder","createLifecycles","updateMotionValuesFromProps","checkIfControllingVariants","checkIfVariantNode","isVariantLabel","visualElement","treeType","build","getBaseTarget","makeTargetAnimatable","measureViewportBox","render","renderInstance","readValueFromInstance","removeValueFromRenderState","sortNodePosition","scrapeMotionValuesFromProps","parent","props","presenceId","blockInitialAnimation","visualState","shouldReduceMotion","options","isMounted","latestValues","renderState","instance","lifecycles","values","Map","valueSubscriptions","prevMotionValues","baseTarget","Object","assign","removeFromVariantTree","triggerBuild","style","element","projection","update","notifyUpdate","bindToMotionValue","key","value","removeOnChange","onChange","latestValue","onUpdate","removeOnRenderRequest","onRenderRequest","scheduleRender","set","_a","willChange","initialMotionValues","undefined","add","isControllingVariants","isVariantNode","current","depth","children","Set","variantChildren","isVisible","manuallyAnimateOnMount","Boolean","mount","newInstance","addVariantChild","forEach","setProps","unmount","remove","delete","clearAllListeners","child","closestVariantNode","getClosestVariantNode","other","getInstance","getLayoutId","layoutId","getStaticValue","setStaticValue","getLatestValues","setVisibility","visibility","target","canMutate","addValue","hasValue","removeValue","get","has","getValue","defaultValue","forEachValue","callback","readValue","setBaseTarget","syncRender","newProps","transformTemplate","updatePropListeners","getProps","getVariant","name","variants","getDefaultTransition","transition","getTransformPagePoint","transformPagePoint","getVariantContext","startAtParent","context","initial","i","numVariantProps","variantProps","prop","length"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/render/index.mjs"],"sourcesContent":["import { __rest } from 'tslib';\r\nimport sync, { cancelSync } from 'framesync';\r\nimport { motionValue } from '../value/index.mjs';\r\nimport { isWillChangeMotionValue } from '../value/use-will-change/is.mjs';\r\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\r\nimport { variantPriorityOrder } from './utils/animation-state.mjs';\r\nimport { createLifecycles } from './utils/lifecycles.mjs';\r\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\r\nimport { checkIfControllingVariants, checkIfVariantNode, isVariantLabel } from './utils/variants.mjs';\r\n\r\nconst visualElement = ({ treeType = \"\", build, getBaseTarget, makeTargetAnimatable, measureViewportBox, render: renderInstance, readValueFromInstance, removeValueFromRenderState, sortNodePosition, scrapeMotionValuesFromProps, }) => ({ parent, props, presenceId, blockInitialAnimation, visualState, shouldReduceMotion, }, options = {}) => {\r\n    let isMounted = false;\r\n    const { latestValues, renderState } = visualState;\r\n    /**\r\n     * The instance of the render-specific node that will be hydrated by the\r\n     * exposed React ref. So for example, this visual element can host a\r\n     * HTMLElement, plain object, or Three.js object. The functions provided\r\n     * in VisualElementConfig allow us to interface with this instance.\r\n     */\r\n    let instance;\r\n    /**\r\n     * Manages the subscriptions for a visual element's lifecycle, for instance\r\n     * onRender\r\n     */\r\n    const lifecycles = createLifecycles();\r\n    /**\r\n     * A map of all motion values attached to this visual element. Motion\r\n     * values are source of truth for any given animated value. A motion\r\n     * value might be provided externally by the component via props.\r\n     */\r\n    const values = new Map();\r\n    /**\r\n     * A map of every subscription that binds the provided or generated\r\n     * motion values onChange listeners to this visual element.\r\n     */\r\n    const valueSubscriptions = new Map();\r\n    /**\r\n     * A reference to the previously-provided motion values as returned\r\n     * from scrapeMotionValuesFromProps. We use the keys in here to determine\r\n     * if any motion values need to be removed after props are updated.\r\n     */\r\n    let prevMotionValues = {};\r\n    /**\r\n     * When values are removed from all animation props we need to search\r\n     * for a fallback value to animate to. These values are tracked in baseTarget.\r\n     */\r\n    const baseTarget = Object.assign({}, latestValues);\r\n    // Internal methods ========================\r\n    /**\r\n     * On mount, this will be hydrated with a callback to disconnect\r\n     * this visual element from its parent on unmount.\r\n     */\r\n    let removeFromVariantTree;\r\n    /**\r\n     * Render the element with the latest styles outside of the React\r\n     * render lifecycle\r\n     */\r\n    function render() {\r\n        if (!instance || !isMounted)\r\n            return;\r\n        triggerBuild();\r\n        renderInstance(instance, renderState, props.style, element.projection);\r\n    }\r\n    function triggerBuild() {\r\n        build(element, renderState, latestValues, options, props);\r\n    }\r\n    function update() {\r\n        lifecycles.notifyUpdate(latestValues);\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    function bindToMotionValue(key, value) {\r\n        const removeOnChange = value.onChange((latestValue) => {\r\n            latestValues[key] = latestValue;\r\n            props.onUpdate && sync.update(update, false, true);\r\n        });\r\n        const removeOnRenderRequest = value.onRenderRequest(element.scheduleRender);\r\n        valueSubscriptions.set(key, () => {\r\n            removeOnChange();\r\n            removeOnRenderRequest();\r\n        });\r\n    }\r\n    /**\r\n     * Any motion values that are provided to the element when created\r\n     * aren't yet bound to the element, as this would technically be impure.\r\n     * However, we iterate through the motion values and set them to the\r\n     * initial values for this component.\r\n     *\r\n     * TODO: This is impure and we should look at changing this to run on mount.\r\n     * Doing so will break some tests but this isn't neccessarily a breaking change,\r\n     * more a reflection of the test.\r\n     */\r\n    const _a = scrapeMotionValuesFromProps(props), { willChange } = _a, initialMotionValues = __rest(_a, [\"willChange\"]);\r\n    for (const key in initialMotionValues) {\r\n        const value = initialMotionValues[key];\r\n        if (latestValues[key] !== undefined && isMotionValue(value)) {\r\n            value.set(latestValues[key], false);\r\n            if (isWillChangeMotionValue(willChange)) {\r\n                willChange.add(key);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Determine what role this visual element should take in the variant tree.\r\n     */\r\n    const isControllingVariants = checkIfControllingVariants(props);\r\n    const isVariantNode = checkIfVariantNode(props);\r\n    const element = Object.assign(Object.assign({ treeType, \r\n        /**\r\n         * This is a mirror of the internal instance prop, which keeps\r\n         * VisualElement type-compatible with React's RefObject.\r\n         */\r\n        current: null, \r\n        /**\r\n         * The depth of this visual element within the visual element tree.\r\n         */\r\n        depth: parent ? parent.depth + 1 : 0, parent, children: new Set(), \r\n        /**\r\n         *\r\n         */\r\n        presenceId,\r\n        shouldReduceMotion, \r\n        /**\r\n         * If this component is part of the variant tree, it should track\r\n         * any children that are also part of the tree. This is essentially\r\n         * a shadow tree to simplify logic around how to stagger over children.\r\n         */\r\n        variantChildren: isVariantNode ? new Set() : undefined, \r\n        /**\r\n         * Whether this instance is visible. This can be changed imperatively\r\n         * by the projection tree, is analogous to CSS's visibility in that\r\n         * hidden elements should take up layout, and needs enacting by the configured\r\n         * render function.\r\n         */\r\n        isVisible: undefined, \r\n        /**\r\n         * Normally, if a component is controlled by a parent's variants, it can\r\n         * rely on that ancestor to trigger animations further down the tree.\r\n         * However, if a component is created after its parent is mounted, the parent\r\n         * won't trigger that mount animation so the child needs to.\r\n         *\r\n         * TODO: This might be better replaced with a method isParentMounted\r\n         */\r\n        manuallyAnimateOnMount: Boolean(parent === null || parent === void 0 ? void 0 : parent.isMounted()), \r\n        /**\r\n         * This can be set by AnimatePresence to force components that mount\r\n         * at the same time as it to mount as if they have initial={false} set.\r\n         */\r\n        blockInitialAnimation, \r\n        /**\r\n         * Determine whether this component has mounted yet. This is mostly used\r\n         * by variant children to determine whether they need to trigger their\r\n         * own animations on mount.\r\n         */\r\n        isMounted: () => Boolean(instance), mount(newInstance) {\r\n            isMounted = true;\r\n            instance = element.current = newInstance;\r\n            if (element.projection) {\r\n                element.projection.mount(newInstance);\r\n            }\r\n            if (isVariantNode && parent && !isControllingVariants) {\r\n                removeFromVariantTree = parent === null || parent === void 0 ? void 0 : parent.addVariantChild(element);\r\n            }\r\n            values.forEach((value, key) => bindToMotionValue(key, value));\r\n            parent === null || parent === void 0 ? void 0 : parent.children.add(element);\r\n            element.setProps(props);\r\n        },\r\n        /**\r\n         *\r\n         */\r\n        unmount() {\r\n            var _a;\r\n            (_a = element.projection) === null || _a === void 0 ? void 0 : _a.unmount();\r\n            cancelSync.update(update);\r\n            cancelSync.render(render);\r\n            valueSubscriptions.forEach((remove) => remove());\r\n            removeFromVariantTree === null || removeFromVariantTree === void 0 ? void 0 : removeFromVariantTree();\r\n            parent === null || parent === void 0 ? void 0 : parent.children.delete(element);\r\n            lifecycles.clearAllListeners();\r\n            instance = undefined;\r\n            isMounted = false;\r\n        },\r\n        /**\r\n         * Add a child visual element to our set of children.\r\n         */\r\n        addVariantChild(child) {\r\n            var _a;\r\n            const closestVariantNode = element.getClosestVariantNode();\r\n            if (closestVariantNode) {\r\n                (_a = closestVariantNode.variantChildren) === null || _a === void 0 ? void 0 : _a.add(child);\r\n                return () => closestVariantNode.variantChildren.delete(child);\r\n            }\r\n        },\r\n        sortNodePosition(other) {\r\n            /**\r\n             * If these nodes aren't even of the same type we can't compare their depth.\r\n             */\r\n            if (!sortNodePosition || treeType !== other.treeType)\r\n                return 0;\r\n            return sortNodePosition(element.getInstance(), other.getInstance());\r\n        }, \r\n        /**\r\n         * Returns the closest variant node in the tree starting from\r\n         * this visual element.\r\n         */\r\n        getClosestVariantNode: () => isVariantNode ? element : parent === null || parent === void 0 ? void 0 : parent.getClosestVariantNode(), \r\n        /**\r\n         * Expose the latest layoutId prop.\r\n         */\r\n        getLayoutId: () => props.layoutId, \r\n        /**\r\n         * Returns the current instance.\r\n         */\r\n        getInstance: () => instance, \r\n        /**\r\n         * Get/set the latest static values.\r\n         */\r\n        getStaticValue: (key) => latestValues[key], setStaticValue: (key, value) => (latestValues[key] = value), \r\n        /**\r\n         * Returns the latest motion value state. Currently only used to take\r\n         * a snapshot of the visual element - perhaps this can return the whole\r\n         * visual state\r\n         */\r\n        getLatestValues: () => latestValues, \r\n        /**\r\n         * Set the visiblity of the visual element. If it's changed, schedule\r\n         * a render to reflect these changes.\r\n         */\r\n        setVisibility(visibility) {\r\n            if (element.isVisible === visibility)\r\n                return;\r\n            element.isVisible = visibility;\r\n            element.scheduleRender();\r\n        },\r\n        /**\r\n         * Make a target animatable by Popmotion. For instance, if we're\r\n         * trying to animate width from 100px to 100vw we need to measure 100vw\r\n         * in pixels to determine what we really need to animate to. This is also\r\n         * pluggable to support Framer's custom value types like Color,\r\n         * and CSS variables.\r\n         */\r\n        makeTargetAnimatable(target, canMutate = true) {\r\n            return makeTargetAnimatable(element, target, props, canMutate);\r\n        },\r\n        /**\r\n         * Measure the current viewport box with or without transforms.\r\n         * Only measures axis-aligned boxes, rotate and skew must be manually\r\n         * removed with a re-render to work.\r\n         */\r\n        measureViewportBox() {\r\n            return measureViewportBox(instance, props);\r\n        },\r\n        // Motion values ========================\r\n        /**\r\n         * Add a motion value and bind it to this visual element.\r\n         */\r\n        addValue(key, value) {\r\n            // Remove existing value if it exists\r\n            if (element.hasValue(key))\r\n                element.removeValue(key);\r\n            values.set(key, value);\r\n            latestValues[key] = value.get();\r\n            bindToMotionValue(key, value);\r\n        },\r\n        /**\r\n         * Remove a motion value and unbind any active subscriptions.\r\n         */\r\n        removeValue(key) {\r\n            var _a;\r\n            values.delete(key);\r\n            (_a = valueSubscriptions.get(key)) === null || _a === void 0 ? void 0 : _a();\r\n            valueSubscriptions.delete(key);\r\n            delete latestValues[key];\r\n            removeValueFromRenderState(key, renderState);\r\n        }, \r\n        /**\r\n         * Check whether we have a motion value for this key\r\n         */\r\n        hasValue: (key) => values.has(key), \r\n        /**\r\n         * Get a motion value for this key. If called with a default\r\n         * value, we'll create one if none exists.\r\n         */\r\n        getValue(key, defaultValue) {\r\n            let value = values.get(key);\r\n            if (value === undefined && defaultValue !== undefined) {\r\n                value = motionValue(defaultValue);\r\n                element.addValue(key, value);\r\n            }\r\n            return value;\r\n        }, \r\n        /**\r\n         * Iterate over our motion values.\r\n         */\r\n        forEachValue: (callback) => values.forEach(callback), \r\n        /**\r\n         * If we're trying to animate to a previously unencountered value,\r\n         * we need to check for it in our state and as a last resort read it\r\n         * directly from the instance (which might have performance implications).\r\n         */\r\n        readValue: (key) => {\r\n            var _a;\r\n            return (_a = latestValues[key]) !== null && _a !== void 0 ? _a : readValueFromInstance(instance, key, options);\r\n        }, \r\n        /**\r\n         * Set the base target to later animate back to. This is currently\r\n         * only hydrated on creation and when we first read a value.\r\n         */\r\n        setBaseTarget(key, value) {\r\n            baseTarget[key] = value;\r\n        },\r\n        /**\r\n         * Find the base target for a value thats been removed from all animation\r\n         * props.\r\n         */\r\n        getBaseTarget(key) {\r\n            if (getBaseTarget) {\r\n                const target = getBaseTarget(props, key);\r\n                if (target !== undefined && !isMotionValue(target))\r\n                    return target;\r\n            }\r\n            return baseTarget[key];\r\n        } }, lifecycles), { \r\n        /**\r\n         * Build the renderer state based on the latest visual state.\r\n         */\r\n        build() {\r\n            triggerBuild();\r\n            return renderState;\r\n        },\r\n        /**\r\n         * Schedule a render on the next animation frame.\r\n         */\r\n        scheduleRender() {\r\n            sync.render(render, false, true);\r\n        }, \r\n        /**\r\n         * Synchronously fire render. It's prefered that we batch renders but\r\n         * in many circumstances, like layout measurement, we need to run this\r\n         * synchronously. However in those instances other measures should be taken\r\n         * to batch reads/writes.\r\n         */\r\n        syncRender: render, \r\n        /**\r\n         * Update the provided props. Ensure any newly-added motion values are\r\n         * added to our map, old ones removed, and listeners updated.\r\n         */\r\n        setProps(newProps) {\r\n            if (newProps.transformTemplate || props.transformTemplate) {\r\n                element.scheduleRender();\r\n            }\r\n            props = newProps;\r\n            lifecycles.updatePropListeners(newProps);\r\n            prevMotionValues = updateMotionValuesFromProps(element, scrapeMotionValuesFromProps(props), prevMotionValues);\r\n        }, getProps: () => props, \r\n        // Variants ==============================\r\n        /**\r\n         * Returns the variant definition with a given name.\r\n         */\r\n        getVariant: (name) => { var _a; return (_a = props.variants) === null || _a === void 0 ? void 0 : _a[name]; }, \r\n        /**\r\n         * Returns the defined default transition on this component.\r\n         */\r\n        getDefaultTransition: () => props.transition, getTransformPagePoint: () => {\r\n            return props.transformPagePoint;\r\n        }, \r\n        /**\r\n         * Used by child variant nodes to get the closest ancestor variant props.\r\n         */\r\n        getVariantContext(startAtParent = false) {\r\n            if (startAtParent)\r\n                return parent === null || parent === void 0 ? void 0 : parent.getVariantContext();\r\n            if (!isControllingVariants) {\r\n                const context = (parent === null || parent === void 0 ? void 0 : parent.getVariantContext()) || {};\r\n                if (props.initial !== undefined) {\r\n                    context.initial = props.initial;\r\n                }\r\n                return context;\r\n            }\r\n            const context = {};\r\n            for (let i = 0; i < numVariantProps; i++) {\r\n                const name = variantProps[i];\r\n                const prop = props[name];\r\n                if (isVariantLabel(prop) || prop === false) {\r\n                    context[name] = prop;\r\n                }\r\n            }\r\n            return context;\r\n        } });\r\n    return element;\r\n};\r\nconst variantProps = [\"initial\", ...variantPriorityOrder];\r\nconst numVariantProps = variantProps.length;\r\n\r\nexport { visualElement };\r\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,OAAvB;AACA,OAAOC,IAAP,IAAeC,UAAf,QAAiC,WAAjC;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,SAASC,aAAT,QAA8B,oCAA9B;AACA,SAASC,oBAAT,QAAqC,6BAArC;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,SAASC,2BAAT,QAA4C,2BAA5C;AACA,SAASC,0BAAT,EAAqCC,kBAArC,EAAyDC,cAAzD,QAA+E,sBAA/E;;AAEA,MAAMC,aAAa,GAAG;EAAA,IAAC;IAAEC,QAAQ,GAAG,EAAb;IAAiBC,KAAjB;IAAwBC,aAAxB;IAAuCC,oBAAvC;IAA6DC,kBAA7D;IAAiFC,MAAM,EAAEC,cAAzF;IAAyGC,qBAAzG;IAAgIC,0BAAhI;IAA4JC,gBAA5J;IAA8KC;EAA9K,CAAD;EAAA,OAAkN,iBAA0G;IAAA,IAAzG;MAAEC,MAAF;MAAUC,KAAV;MAAiBC,UAAjB;MAA6BC,qBAA7B;MAAoDC,WAApD;MAAiEC;IAAjE,CAAyG;IAAA,IAAjBC,OAAiB,uEAAP,EAAO;IAC9U,IAAIC,SAAS,GAAG,KAAhB;IACA,MAAM;MAAEC,YAAF;MAAgBC;IAAhB,IAAgCL,WAAtC;IACA;AACJ;AACA;AACA;AACA;AACA;;IACI,IAAIM,QAAJ;IACA;AACJ;AACA;AACA;;IACI,MAAMC,UAAU,GAAG5B,gBAAgB,EAAnC;IACA;AACJ;AACA;AACA;AACA;;IACI,MAAM6B,MAAM,GAAG,IAAIC,GAAJ,EAAf;IACA;AACJ;AACA;AACA;;IACI,MAAMC,kBAAkB,GAAG,IAAID,GAAJ,EAA3B;IACA;AACJ;AACA;AACA;AACA;;IACI,IAAIE,gBAAgB,GAAG,EAAvB;IACA;AACJ;AACA;AACA;;IACI,MAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,YAAlB,CAAnB,CApC8U,CAqC9U;;IACA;AACJ;AACA;AACA;;IACI,IAAIW,qBAAJ;IACA;AACJ;AACA;AACA;;IACI,SAASzB,MAAT,GAAkB;MACd,IAAI,CAACgB,QAAD,IAAa,CAACH,SAAlB,EACI;MACJa,YAAY;MACZzB,cAAc,CAACe,QAAD,EAAWD,WAAX,EAAwBR,KAAK,CAACoB,KAA9B,EAAqCC,OAAO,CAACC,UAA7C,CAAd;IACH;;IACD,SAASH,YAAT,GAAwB;MACpB9B,KAAK,CAACgC,OAAD,EAAUb,WAAV,EAAuBD,YAAvB,EAAqCF,OAArC,EAA8CL,KAA9C,CAAL;IACH;;IACD,SAASuB,MAAT,GAAkB;MACdb,UAAU,CAACc,YAAX,CAAwBjB,YAAxB;IACH;IACD;AACJ;AACA;;;IACI,SAASkB,iBAAT,CAA2BC,GAA3B,EAAgCC,KAAhC,EAAuC;MACnC,MAAMC,cAAc,GAAGD,KAAK,CAACE,QAAN,CAAgBC,WAAD,IAAiB;QACnDvB,YAAY,CAACmB,GAAD,CAAZ,GAAoBI,WAApB;QACA9B,KAAK,CAAC+B,QAAN,IAAkBvD,IAAI,CAAC+C,MAAL,CAAYA,MAAZ,EAAoB,KAApB,EAA2B,IAA3B,CAAlB;MACH,CAHsB,CAAvB;MAIA,MAAMS,qBAAqB,GAAGL,KAAK,CAACM,eAAN,CAAsBZ,OAAO,CAACa,cAA9B,CAA9B;MACArB,kBAAkB,CAACsB,GAAnB,CAAuBT,GAAvB,EAA4B,MAAM;QAC9BE,cAAc;QACdI,qBAAqB;MACxB,CAHD;IAIH;IACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACI,MAAMI,EAAE,GAAGtC,2BAA2B,CAACE,KAAD,CAAtC;IAAA,MAA+C;MAAEqC;IAAF,IAAiBD,EAAhE;IAAA,MAAoEE,mBAAmB,GAAG/D,MAAM,CAAC6D,EAAD,EAAK,CAAC,YAAD,CAAL,CAAhG;;IACA,KAAK,MAAMV,GAAX,IAAkBY,mBAAlB,EAAuC;MACnC,MAAMX,KAAK,GAAGW,mBAAmB,CAACZ,GAAD,CAAjC;;MACA,IAAInB,YAAY,CAACmB,GAAD,CAAZ,KAAsBa,SAAtB,IAAmC3D,aAAa,CAAC+C,KAAD,CAApD,EAA6D;QACzDA,KAAK,CAACQ,GAAN,CAAU5B,YAAY,CAACmB,GAAD,CAAtB,EAA6B,KAA7B;;QACA,IAAI/C,uBAAuB,CAAC0D,UAAD,CAA3B,EAAyC;UACrCA,UAAU,CAACG,GAAX,CAAed,GAAf;QACH;MACJ;IACJ;IACD;AACJ;AACA;;;IACI,MAAMe,qBAAqB,GAAGzD,0BAA0B,CAACgB,KAAD,CAAxD;IACA,MAAM0C,aAAa,GAAGzD,kBAAkB,CAACe,KAAD,CAAxC;IACA,MAAMqB,OAAO,GAAGL,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc;MAAE7B,QAAF;;MACxC;AACR;AACA;AACA;MACQuD,OAAO,EAAE,IAL+B;;MAMxC;AACR;AACA;MACQC,KAAK,EAAE7C,MAAM,GAAGA,MAAM,CAAC6C,KAAP,GAAe,CAAlB,GAAsB,CATK;MASF7C,MATE;MASM8C,QAAQ,EAAE,IAAIC,GAAJ,EAThB;;MAUxC;AACR;AACA;MACQ7C,UAbwC;MAcxCG,kBAdwC;;MAexC;AACR;AACA;AACA;AACA;MACQ2C,eAAe,EAAEL,aAAa,GAAG,IAAII,GAAJ,EAAH,GAAeP,SApBL;;MAqBxC;AACR;AACA;AACA;AACA;AACA;MACQS,SAAS,EAAET,SA3B6B;;MA4BxC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;MACQU,sBAAsB,EAAEC,OAAO,CAACnD,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACO,SAAP,EAAjD,CApCS;;MAqCxC;AACR;AACA;AACA;MACQJ,qBAzCwC;;MA0CxC;AACR;AACA;AACA;AACA;MACQI,SAAS,EAAE,MAAM4C,OAAO,CAACzC,QAAD,CA/CgB;;MA+CJ0C,KAAK,CAACC,WAAD,EAAc;QACnD9C,SAAS,GAAG,IAAZ;QACAG,QAAQ,GAAGY,OAAO,CAACsB,OAAR,GAAkBS,WAA7B;;QACA,IAAI/B,OAAO,CAACC,UAAZ,EAAwB;UACpBD,OAAO,CAACC,UAAR,CAAmB6B,KAAnB,CAAyBC,WAAzB;QACH;;QACD,IAAIV,aAAa,IAAI3C,MAAjB,IAA2B,CAAC0C,qBAAhC,EAAuD;UACnDvB,qBAAqB,GAAGnB,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACsD,eAAP,CAAuBhC,OAAvB,CAAxE;QACH;;QACDV,MAAM,CAAC2C,OAAP,CAAe,CAAC3B,KAAD,EAAQD,GAAR,KAAgBD,iBAAiB,CAACC,GAAD,EAAMC,KAAN,CAAhD;QACA5B,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAAC8C,QAAP,CAAgBL,GAAhB,CAAoBnB,OAApB,CAAhD;QACAA,OAAO,CAACkC,QAAR,CAAiBvD,KAAjB;MACH,CA3DuC;;MA4DxC;AACR;AACA;MACQwD,OAAO,GAAG;QACN,IAAIpB,EAAJ;;QACA,CAACA,EAAE,GAAGf,OAAO,CAACC,UAAd,MAA8B,IAA9B,IAAsCc,EAAE,KAAK,KAAK,CAAlD,GAAsD,KAAK,CAA3D,GAA+DA,EAAE,CAACoB,OAAH,EAA/D;QACA/E,UAAU,CAAC8C,MAAX,CAAkBA,MAAlB;QACA9C,UAAU,CAACgB,MAAX,CAAkBA,MAAlB;QACAoB,kBAAkB,CAACyC,OAAnB,CAA4BG,MAAD,IAAYA,MAAM,EAA7C;QACAvC,qBAAqB,KAAK,IAA1B,IAAkCA,qBAAqB,KAAK,KAAK,CAAjE,GAAqE,KAAK,CAA1E,GAA8EA,qBAAqB,EAAnG;QACAnB,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAAC8C,QAAP,CAAgBa,MAAhB,CAAuBrC,OAAvB,CAAhD;QACAX,UAAU,CAACiD,iBAAX;QACAlD,QAAQ,GAAG8B,SAAX;QACAjC,SAAS,GAAG,KAAZ;MACH,CA1EuC;;MA2ExC;AACR;AACA;MACQ+C,eAAe,CAACO,KAAD,EAAQ;QACnB,IAAIxB,EAAJ;;QACA,MAAMyB,kBAAkB,GAAGxC,OAAO,CAACyC,qBAAR,EAA3B;;QACA,IAAID,kBAAJ,EAAwB;UACpB,CAACzB,EAAE,GAAGyB,kBAAkB,CAACd,eAAzB,MAA8C,IAA9C,IAAsDX,EAAE,KAAK,KAAK,CAAlE,GAAsE,KAAK,CAA3E,GAA+EA,EAAE,CAACI,GAAH,CAAOoB,KAAP,CAA/E;UACA,OAAO,MAAMC,kBAAkB,CAACd,eAAnB,CAAmCW,MAAnC,CAA0CE,KAA1C,CAAb;QACH;MACJ,CArFuC;;MAsFxC/D,gBAAgB,CAACkE,KAAD,EAAQ;QACpB;AACZ;AACA;QACY,IAAI,CAAClE,gBAAD,IAAqBT,QAAQ,KAAK2E,KAAK,CAAC3E,QAA5C,EACI,OAAO,CAAP;QACJ,OAAOS,gBAAgB,CAACwB,OAAO,CAAC2C,WAAR,EAAD,EAAwBD,KAAK,CAACC,WAAN,EAAxB,CAAvB;MACH,CA7FuC;;MA8FxC;AACR;AACA;AACA;MACQF,qBAAqB,EAAE,MAAMpB,aAAa,GAAGrB,OAAH,GAAatB,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAAC+D,qBAAP,EAlG/D;;MAmGxC;AACR;AACA;MACQG,WAAW,EAAE,MAAMjE,KAAK,CAACkE,QAtGe;;MAuGxC;AACR;AACA;MACQF,WAAW,EAAE,MAAMvD,QA1GqB;;MA2GxC;AACR;AACA;MACQ0D,cAAc,EAAGzC,GAAD,IAASnB,YAAY,CAACmB,GAAD,CA9GG;MA8GI0C,cAAc,EAAE,CAAC1C,GAAD,EAAMC,KAAN,KAAiBpB,YAAY,CAACmB,GAAD,CAAZ,GAAoBC,KA9GzD;;MA+GxC;AACR;AACA;AACA;AACA;MACQ0C,eAAe,EAAE,MAAM9D,YApHiB;;MAqHxC;AACR;AACA;AACA;MACQ+D,aAAa,CAACC,UAAD,EAAa;QACtB,IAAIlD,OAAO,CAAC2B,SAAR,KAAsBuB,UAA1B,EACI;QACJlD,OAAO,CAAC2B,SAAR,GAAoBuB,UAApB;QACAlD,OAAO,CAACa,cAAR;MACH,CA9HuC;;MA+HxC;AACR;AACA;AACA;AACA;AACA;AACA;MACQ3C,oBAAoB,CAACiF,MAAD,EAA2B;QAAA,IAAlBC,SAAkB,uEAAN,IAAM;QAC3C,OAAOlF,oBAAoB,CAAC8B,OAAD,EAAUmD,MAAV,EAAkBxE,KAAlB,EAAyByE,SAAzB,CAA3B;MACH,CAxIuC;;MAyIxC;AACR;AACA;AACA;AACA;MACQjF,kBAAkB,GAAG;QACjB,OAAOA,kBAAkB,CAACiB,QAAD,EAAWT,KAAX,CAAzB;MACH,CAhJuC;;MAiJxC;;MACA;AACR;AACA;MACQ0E,QAAQ,CAAChD,GAAD,EAAMC,KAAN,EAAa;QACjB;QACA,IAAIN,OAAO,CAACsD,QAAR,CAAiBjD,GAAjB,CAAJ,EACIL,OAAO,CAACuD,WAAR,CAAoBlD,GAApB;QACJf,MAAM,CAACwB,GAAP,CAAWT,GAAX,EAAgBC,KAAhB;QACApB,YAAY,CAACmB,GAAD,CAAZ,GAAoBC,KAAK,CAACkD,GAAN,EAApB;QACApD,iBAAiB,CAACC,GAAD,EAAMC,KAAN,CAAjB;MACH,CA5JuC;;MA6JxC;AACR;AACA;MACQiD,WAAW,CAAClD,GAAD,EAAM;QACb,IAAIU,EAAJ;;QACAzB,MAAM,CAAC+C,MAAP,CAAchC,GAAd;QACA,CAACU,EAAE,GAAGvB,kBAAkB,CAACgE,GAAnB,CAAuBnD,GAAvB,CAAN,MAAuC,IAAvC,IAA+CU,EAAE,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,EAAE,EAA1E;QACAvB,kBAAkB,CAAC6C,MAAnB,CAA0BhC,GAA1B;QACA,OAAOnB,YAAY,CAACmB,GAAD,CAAnB;QACA9B,0BAA0B,CAAC8B,GAAD,EAAMlB,WAAN,CAA1B;MACH,CAvKuC;;MAwKxC;AACR;AACA;MACQmE,QAAQ,EAAGjD,GAAD,IAASf,MAAM,CAACmE,GAAP,CAAWpD,GAAX,CA3KqB;;MA4KxC;AACR;AACA;AACA;MACQqD,QAAQ,CAACrD,GAAD,EAAMsD,YAAN,EAAoB;QACxB,IAAIrD,KAAK,GAAGhB,MAAM,CAACkE,GAAP,CAAWnD,GAAX,CAAZ;;QACA,IAAIC,KAAK,KAAKY,SAAV,IAAuByC,YAAY,KAAKzC,SAA5C,EAAuD;UACnDZ,KAAK,GAAGjD,WAAW,CAACsG,YAAD,CAAnB;UACA3D,OAAO,CAACqD,QAAR,CAAiBhD,GAAjB,EAAsBC,KAAtB;QACH;;QACD,OAAOA,KAAP;MACH,CAvLuC;;MAwLxC;AACR;AACA;MACQsD,YAAY,EAAGC,QAAD,IAAcvE,MAAM,CAAC2C,OAAP,CAAe4B,QAAf,CA3LY;;MA4LxC;AACR;AACA;AACA;AACA;MACQC,SAAS,EAAGzD,GAAD,IAAS;QAChB,IAAIU,EAAJ;;QACA,OAAO,CAACA,EAAE,GAAG7B,YAAY,CAACmB,GAAD,CAAlB,MAA6B,IAA7B,IAAqCU,EAAE,KAAK,KAAK,CAAjD,GAAqDA,EAArD,GAA0DzC,qBAAqB,CAACc,QAAD,EAAWiB,GAAX,EAAgBrB,OAAhB,CAAtF;MACH,CApMuC;;MAqMxC;AACR;AACA;AACA;MACQ+E,aAAa,CAAC1D,GAAD,EAAMC,KAAN,EAAa;QACtBZ,UAAU,CAACW,GAAD,CAAV,GAAkBC,KAAlB;MACH,CA3MuC;;MA4MxC;AACR;AACA;AACA;MACQrC,aAAa,CAACoC,GAAD,EAAM;QACf,IAAIpC,aAAJ,EAAmB;UACf,MAAMkF,MAAM,GAAGlF,aAAa,CAACU,KAAD,EAAQ0B,GAAR,CAA5B;UACA,IAAI8C,MAAM,KAAKjC,SAAX,IAAwB,CAAC3D,aAAa,CAAC4F,MAAD,CAA1C,EACI,OAAOA,MAAP;QACP;;QACD,OAAOzD,UAAU,CAACW,GAAD,CAAjB;MACH;;IAvNuC,CAAd,EAuNrBhB,UAvNqB,CAAd,EAuNM;MAClB;AACR;AACA;MACQrB,KAAK,GAAG;QACJ8B,YAAY;QACZ,OAAOX,WAAP;MACH,CAPiB;;MAQlB;AACR;AACA;MACQ0B,cAAc,GAAG;QACb1D,IAAI,CAACiB,MAAL,CAAYA,MAAZ,EAAoB,KAApB,EAA2B,IAA3B;MACH,CAbiB;;MAclB;AACR;AACA;AACA;AACA;AACA;MACQ4F,UAAU,EAAE5F,MApBM;;MAqBlB;AACR;AACA;AACA;MACQ8D,QAAQ,CAAC+B,QAAD,EAAW;QACf,IAAIA,QAAQ,CAACC,iBAAT,IAA8BvF,KAAK,CAACuF,iBAAxC,EAA2D;UACvDlE,OAAO,CAACa,cAAR;QACH;;QACDlC,KAAK,GAAGsF,QAAR;QACA5E,UAAU,CAAC8E,mBAAX,CAA+BF,QAA/B;QACAxE,gBAAgB,GAAG/B,2BAA2B,CAACsC,OAAD,EAAUvB,2BAA2B,CAACE,KAAD,CAArC,EAA8Cc,gBAA9C,CAA9C;MACH,CAhCiB;;MAgCf2E,QAAQ,EAAE,MAAMzF,KAhCD;MAiClB;;MACA;AACR;AACA;MACQ0F,UAAU,EAAGC,IAAD,IAAU;QAAE,IAAIvD,EAAJ;;QAAQ,OAAO,CAACA,EAAE,GAAGpC,KAAK,CAAC4F,QAAZ,MAA0B,IAA1B,IAAkCxD,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACuD,IAAD,CAApE;MAA6E,CArC3F;;MAsClB;AACR;AACA;MACQE,oBAAoB,EAAE,MAAM7F,KAAK,CAAC8F,UAzChB;MAyC4BC,qBAAqB,EAAE,MAAM;QACvE,OAAO/F,KAAK,CAACgG,kBAAb;MACH,CA3CiB;;MA4ClB;AACR;AACA;MACQC,iBAAiB,GAAwB;QAAA,IAAvBC,aAAuB,uEAAP,KAAO;QACrC,IAAIA,aAAJ,EACI,OAAOnG,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACkG,iBAAP,EAAvD;;QACJ,IAAI,CAACxD,qBAAL,EAA4B;UACxB,MAAM0D,OAAO,GAAG,CAACpG,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACkG,iBAAP,EAAjD,KAAgF,EAAhG;;UACA,IAAIjG,KAAK,CAACoG,OAAN,KAAkB7D,SAAtB,EAAiC;YAC7B4D,OAAO,CAACC,OAAR,GAAkBpG,KAAK,CAACoG,OAAxB;UACH;;UACD,OAAOD,OAAP;QACH;;QACD,MAAMA,OAAO,GAAG,EAAhB;;QACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,eAApB,EAAqCD,CAAC,EAAtC,EAA0C;UACtC,MAAMV,IAAI,GAAGY,YAAY,CAACF,CAAD,CAAzB;UACA,MAAMG,IAAI,GAAGxG,KAAK,CAAC2F,IAAD,CAAlB;;UACA,IAAIzG,cAAc,CAACsH,IAAD,CAAd,IAAwBA,IAAI,KAAK,KAArC,EAA4C;YACxCL,OAAO,CAACR,IAAD,CAAP,GAAgBa,IAAhB;UACH;QACJ;;QACD,OAAOL,OAAP;MACH;;IAlEiB,CAvNN,CAAhB;IA0RA,OAAO9E,OAAP;EACH,CA7XqB;AAAA,CAAtB;;AA8XA,MAAMkF,YAAY,GAAG,CAAC,SAAD,EAAY,GAAG1H,oBAAf,CAArB;AACA,MAAMyH,eAAe,GAAGC,YAAY,CAACE,MAArC;AAEA,SAAStH,aAAT"},"metadata":{},"sourceType":"module"}
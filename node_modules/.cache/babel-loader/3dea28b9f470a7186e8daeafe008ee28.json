{"ast":null,"code":"import { getFocusMerge } from './focusMerge';\nexport var focusOn = function (target, focusOptions) {\n  if ('focus' in target) {\n    target.focus(focusOptions);\n  }\n\n  if ('contentWindow' in target && target.contentWindow) {\n    target.contentWindow.focus();\n  }\n};\nvar guardCount = 0;\nvar lockDisabled = false;\n/**\r\n * Sets focus at a given node. The last focused element will help to determine which element(first or last) should be focused.\r\n * HTML markers (see {@link import('./constants').FOCUS_AUTO} constants) can control autofocus\r\n * @param topNode\r\n * @param lastNode\r\n * @param options\r\n */\n\nexport var setFocus = function (topNode, lastNode, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var focusable = getFocusMerge(topNode, lastNode);\n\n  if (lockDisabled) {\n    return;\n  }\n\n  if (focusable) {\n    if (guardCount > 2) {\n      // tslint:disable-next-line:no-console\n      console.error('FocusLock: focus-fighting detected. Only one focus management system could be active. ' + 'See https://github.com/theKashey/focus-lock/#focus-fighting');\n      lockDisabled = true;\n      setTimeout(function () {\n        lockDisabled = false;\n      }, 1);\n      return;\n    }\n\n    guardCount++;\n    focusOn(focusable.node, options.focusOptions);\n    guardCount--;\n  }\n};","map":{"version":3,"names":["getFocusMerge","focusOn","target","focusOptions","focus","contentWindow","guardCount","lockDisabled","setFocus","topNode","lastNode","options","focusable","console","error","setTimeout","node"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/focus-lock/dist/es2015/setFocus.js"],"sourcesContent":["import { getFocusMerge } from './focusMerge';\r\nexport var focusOn = function (target, focusOptions) {\r\n    if ('focus' in target) {\r\n        target.focus(focusOptions);\r\n    }\r\n    if ('contentWindow' in target && target.contentWindow) {\r\n        target.contentWindow.focus();\r\n    }\r\n};\r\nvar guardCount = 0;\r\nvar lockDisabled = false;\r\n/**\r\n * Sets focus at a given node. The last focused element will help to determine which element(first or last) should be focused.\r\n * HTML markers (see {@link import('./constants').FOCUS_AUTO} constants) can control autofocus\r\n * @param topNode\r\n * @param lastNode\r\n * @param options\r\n */\r\nexport var setFocus = function (topNode, lastNode, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var focusable = getFocusMerge(topNode, lastNode);\r\n    if (lockDisabled) {\r\n        return;\r\n    }\r\n    if (focusable) {\r\n        if (guardCount > 2) {\r\n            // tslint:disable-next-line:no-console\r\n            console.error('FocusLock: focus-fighting detected. Only one focus management system could be active. ' +\r\n                'See https://github.com/theKashey/focus-lock/#focus-fighting');\r\n            lockDisabled = true;\r\n            setTimeout(function () {\r\n                lockDisabled = false;\r\n            }, 1);\r\n            return;\r\n        }\r\n        guardCount++;\r\n        focusOn(focusable.node, options.focusOptions);\r\n        guardCount--;\r\n    }\r\n};\r\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,OAAO,IAAIC,OAAO,GAAG,UAAUC,MAAV,EAAkBC,YAAlB,EAAgC;EACjD,IAAI,WAAWD,MAAf,EAAuB;IACnBA,MAAM,CAACE,KAAP,CAAaD,YAAb;EACH;;EACD,IAAI,mBAAmBD,MAAnB,IAA6BA,MAAM,CAACG,aAAxC,EAAuD;IACnDH,MAAM,CAACG,aAAP,CAAqBD,KAArB;EACH;AACJ,CAPM;AAQP,IAAIE,UAAU,GAAG,CAAjB;AACA,IAAIC,YAAY,GAAG,KAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,QAAQ,GAAG,UAAUC,OAAV,EAAmBC,QAAnB,EAA6BC,OAA7B,EAAsC;EACxD,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe;;EACzC,IAAIC,SAAS,GAAGZ,aAAa,CAACS,OAAD,EAAUC,QAAV,CAA7B;;EACA,IAAIH,YAAJ,EAAkB;IACd;EACH;;EACD,IAAIK,SAAJ,EAAe;IACX,IAAIN,UAAU,GAAG,CAAjB,EAAoB;MAChB;MACAO,OAAO,CAACC,KAAR,CAAc,2FACV,6DADJ;MAEAP,YAAY,GAAG,IAAf;MACAQ,UAAU,CAAC,YAAY;QACnBR,YAAY,GAAG,KAAf;MACH,CAFS,EAEP,CAFO,CAAV;MAGA;IACH;;IACDD,UAAU;IACVL,OAAO,CAACW,SAAS,CAACI,IAAX,EAAiBL,OAAO,CAACR,YAAzB,CAAP;IACAG,UAAU;EACb;AACJ,CArBM"},"metadata":{},"sourceType":"module"}
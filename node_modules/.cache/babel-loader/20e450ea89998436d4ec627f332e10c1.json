{"ast":null,"code":"import { numberInputToObject, rgbaToHex, rgbToHex, rgbToHsl, rgbToHsv } from './conversion';\nimport { names } from './css-color-names';\nimport { inputToRGB } from './format-input';\nimport { bound01, boundAlpha, clamp01 } from './util';\n\nvar TinyColor =\n/** @class */\nfunction () {\n  function TinyColor(color, opts) {\n    if (color === void 0) {\n      color = '';\n    }\n\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _a; // If input is already a tinycolor, return itself\n\n\n    if (color instanceof TinyColor) {\n      // eslint-disable-next-line no-constructor-return\n      return color;\n    }\n\n    if (typeof color === 'number') {\n      color = numberInputToObject(color);\n    }\n\n    this.originalInput = color;\n    var rgb = inputToRGB(color);\n    this.originalInput = color;\n    this.r = rgb.r;\n    this.g = rgb.g;\n    this.b = rgb.b;\n    this.a = rgb.a;\n    this.roundA = Math.round(100 * this.a) / 100;\n    this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;\n    this.gradientType = opts.gradientType; // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n\n    if (this.r < 1) {\n      this.r = Math.round(this.r);\n    }\n\n    if (this.g < 1) {\n      this.g = Math.round(this.g);\n    }\n\n    if (this.b < 1) {\n      this.b = Math.round(this.b);\n    }\n\n    this.isValid = rgb.ok;\n  }\n\n  TinyColor.prototype.isDark = function () {\n    return this.getBrightness() < 128;\n  };\n\n  TinyColor.prototype.isLight = function () {\n    return !this.isDark();\n  };\n  /**\r\n   * Returns the perceived brightness of the color, from 0-255.\r\n   */\n\n\n  TinyColor.prototype.getBrightness = function () {\n    // http://www.w3.org/TR/AERT#color-contrast\n    var rgb = this.toRgb();\n    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n  };\n  /**\r\n   * Returns the perceived luminance of a color, from 0-1.\r\n   */\n\n\n  TinyColor.prototype.getLuminance = function () {\n    // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n    var rgb = this.toRgb();\n    var R;\n    var G;\n    var B;\n    var RsRGB = rgb.r / 255;\n    var GsRGB = rgb.g / 255;\n    var BsRGB = rgb.b / 255;\n\n    if (RsRGB <= 0.03928) {\n      R = RsRGB / 12.92;\n    } else {\n      // eslint-disable-next-line prefer-exponentiation-operator\n      R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n    }\n\n    if (GsRGB <= 0.03928) {\n      G = GsRGB / 12.92;\n    } else {\n      // eslint-disable-next-line prefer-exponentiation-operator\n      G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n    }\n\n    if (BsRGB <= 0.03928) {\n      B = BsRGB / 12.92;\n    } else {\n      // eslint-disable-next-line prefer-exponentiation-operator\n      B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n    }\n\n    return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n  };\n  /**\r\n   * Returns the alpha value of a color, from 0-1.\r\n   */\n\n\n  TinyColor.prototype.getAlpha = function () {\n    return this.a;\n  };\n  /**\r\n   * Sets the alpha value on the current color.\r\n   *\r\n   * @param alpha - The new alpha value. The accepted range is 0-1.\r\n   */\n\n\n  TinyColor.prototype.setAlpha = function (alpha) {\n    this.a = boundAlpha(alpha);\n    this.roundA = Math.round(100 * this.a) / 100;\n    return this;\n  };\n  /**\r\n   * Returns the object as a HSVA object.\r\n   */\n\n\n  TinyColor.prototype.toHsv = function () {\n    var hsv = rgbToHsv(this.r, this.g, this.b);\n    return {\n      h: hsv.h * 360,\n      s: hsv.s,\n      v: hsv.v,\n      a: this.a\n    };\n  };\n  /**\r\n   * Returns the hsva values interpolated into a string with the following format:\r\n   * \"hsva(xxx, xxx, xxx, xx)\".\r\n   */\n\n\n  TinyColor.prototype.toHsvString = function () {\n    var hsv = rgbToHsv(this.r, this.g, this.b);\n    var h = Math.round(hsv.h * 360);\n    var s = Math.round(hsv.s * 100);\n    var v = Math.round(hsv.v * 100);\n    return this.a === 1 ? \"hsv(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%)\") : \"hsva(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%, \").concat(this.roundA, \")\");\n  };\n  /**\r\n   * Returns the object as a HSLA object.\r\n   */\n\n\n  TinyColor.prototype.toHsl = function () {\n    var hsl = rgbToHsl(this.r, this.g, this.b);\n    return {\n      h: hsl.h * 360,\n      s: hsl.s,\n      l: hsl.l,\n      a: this.a\n    };\n  };\n  /**\r\n   * Returns the hsla values interpolated into a string with the following format:\r\n   * \"hsla(xxx, xxx, xxx, xx)\".\r\n   */\n\n\n  TinyColor.prototype.toHslString = function () {\n    var hsl = rgbToHsl(this.r, this.g, this.b);\n    var h = Math.round(hsl.h * 360);\n    var s = Math.round(hsl.s * 100);\n    var l = Math.round(hsl.l * 100);\n    return this.a === 1 ? \"hsl(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%)\") : \"hsla(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%, \").concat(this.roundA, \")\");\n  };\n  /**\r\n   * Returns the hex value of the color.\r\n   * @param allow3Char will shorten hex value to 3 char if possible\r\n   */\n\n\n  TinyColor.prototype.toHex = function (allow3Char) {\n    if (allow3Char === void 0) {\n      allow3Char = false;\n    }\n\n    return rgbToHex(this.r, this.g, this.b, allow3Char);\n  };\n  /**\r\n   * Returns the hex value of the color -with a # appened.\r\n   * @param allow3Char will shorten hex value to 3 char if possible\r\n   */\n\n\n  TinyColor.prototype.toHexString = function (allow3Char) {\n    if (allow3Char === void 0) {\n      allow3Char = false;\n    }\n\n    return '#' + this.toHex(allow3Char);\n  };\n  /**\r\n   * Returns the hex 8 value of the color.\r\n   * @param allow4Char will shorten hex value to 4 char if possible\r\n   */\n\n\n  TinyColor.prototype.toHex8 = function (allow4Char) {\n    if (allow4Char === void 0) {\n      allow4Char = false;\n    }\n\n    return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\n  };\n  /**\r\n   * Returns the hex 8 value of the color -with a # appened.\r\n   * @param allow4Char will shorten hex value to 4 char if possible\r\n   */\n\n\n  TinyColor.prototype.toHex8String = function (allow4Char) {\n    if (allow4Char === void 0) {\n      allow4Char = false;\n    }\n\n    return '#' + this.toHex8(allow4Char);\n  };\n  /**\r\n   * Returns the object as a RGBA object.\r\n   */\n\n\n  TinyColor.prototype.toRgb = function () {\n    return {\n      r: Math.round(this.r),\n      g: Math.round(this.g),\n      b: Math.round(this.b),\n      a: this.a\n    };\n  };\n  /**\r\n   * Returns the RGBA values interpolated into a string with the following format:\r\n   * \"RGBA(xxx, xxx, xxx, xx)\".\r\n   */\n\n\n  TinyColor.prototype.toRgbString = function () {\n    var r = Math.round(this.r);\n    var g = Math.round(this.g);\n    var b = Math.round(this.b);\n    return this.a === 1 ? \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\") : \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(this.roundA, \")\");\n  };\n  /**\r\n   * Returns the object as a RGBA object.\r\n   */\n\n\n  TinyColor.prototype.toPercentageRgb = function () {\n    var fmt = function fmt(x) {\n      return \"\".concat(Math.round(bound01(x, 255) * 100), \"%\");\n    };\n\n    return {\n      r: fmt(this.r),\n      g: fmt(this.g),\n      b: fmt(this.b),\n      a: this.a\n    };\n  };\n  /**\r\n   * Returns the RGBA relative values interpolated into a string\r\n   */\n\n\n  TinyColor.prototype.toPercentageRgbString = function () {\n    var rnd = function rnd(x) {\n      return Math.round(bound01(x, 255) * 100);\n    };\n\n    return this.a === 1 ? \"rgb(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%)\") : \"rgba(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%, \").concat(this.roundA, \")\");\n  };\n  /**\r\n   * The 'real' name of the color -if there is one.\r\n   */\n\n\n  TinyColor.prototype.toName = function () {\n    if (this.a === 0) {\n      return 'transparent';\n    }\n\n    if (this.a < 1) {\n      return false;\n    }\n\n    var hex = '#' + rgbToHex(this.r, this.g, this.b, false);\n\n    for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {\n      var _b = _a[_i],\n          key = _b[0],\n          value = _b[1];\n\n      if (hex === value) {\n        return key;\n      }\n    }\n\n    return false;\n  };\n\n  TinyColor.prototype.toString = function (format) {\n    var formatSet = Boolean(format);\n    format = format !== null && format !== void 0 ? format : this.format;\n    var formattedString = false;\n    var hasAlpha = this.a < 1 && this.a >= 0;\n    var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');\n\n    if (needsAlphaFormat) {\n      // Special case for \"transparent\", all other non-alpha formats\n      // will return rgba when there is transparency.\n      if (format === 'name' && this.a === 0) {\n        return this.toName();\n      }\n\n      return this.toRgbString();\n    }\n\n    if (format === 'rgb') {\n      formattedString = this.toRgbString();\n    }\n\n    if (format === 'prgb') {\n      formattedString = this.toPercentageRgbString();\n    }\n\n    if (format === 'hex' || format === 'hex6') {\n      formattedString = this.toHexString();\n    }\n\n    if (format === 'hex3') {\n      formattedString = this.toHexString(true);\n    }\n\n    if (format === 'hex4') {\n      formattedString = this.toHex8String(true);\n    }\n\n    if (format === 'hex8') {\n      formattedString = this.toHex8String();\n    }\n\n    if (format === 'name') {\n      formattedString = this.toName();\n    }\n\n    if (format === 'hsl') {\n      formattedString = this.toHslString();\n    }\n\n    if (format === 'hsv') {\n      formattedString = this.toHsvString();\n    }\n\n    return formattedString || this.toHexString();\n  };\n\n  TinyColor.prototype.toNumber = function () {\n    return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);\n  };\n\n  TinyColor.prototype.clone = function () {\n    return new TinyColor(this.toString());\n  };\n  /**\r\n   * Lighten the color a given amount. Providing 100 will always return white.\r\n   * @param amount - valid between 1-100\r\n   */\n\n\n  TinyColor.prototype.lighten = function (amount) {\n    if (amount === void 0) {\n      amount = 10;\n    }\n\n    var hsl = this.toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return new TinyColor(hsl);\n  };\n  /**\r\n   * Brighten the color a given amount, from 0 to 100.\r\n   * @param amount - valid between 1-100\r\n   */\n\n\n  TinyColor.prototype.brighten = function (amount) {\n    if (amount === void 0) {\n      amount = 10;\n    }\n\n    var rgb = this.toRgb();\n    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n    return new TinyColor(rgb);\n  };\n  /**\r\n   * Darken the color a given amount, from 0 to 100.\r\n   * Providing 100 will always return black.\r\n   * @param amount - valid between 1-100\r\n   */\n\n\n  TinyColor.prototype.darken = function (amount) {\n    if (amount === void 0) {\n      amount = 10;\n    }\n\n    var hsl = this.toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return new TinyColor(hsl);\n  };\n  /**\r\n   * Mix the color with pure white, from 0 to 100.\r\n   * Providing 0 will do nothing, providing 100 will always return white.\r\n   * @param amount - valid between 1-100\r\n   */\n\n\n  TinyColor.prototype.tint = function (amount) {\n    if (amount === void 0) {\n      amount = 10;\n    }\n\n    return this.mix('white', amount);\n  };\n  /**\r\n   * Mix the color with pure black, from 0 to 100.\r\n   * Providing 0 will do nothing, providing 100 will always return black.\r\n   * @param amount - valid between 1-100\r\n   */\n\n\n  TinyColor.prototype.shade = function (amount) {\n    if (amount === void 0) {\n      amount = 10;\n    }\n\n    return this.mix('black', amount);\n  };\n  /**\r\n   * Desaturate the color a given amount, from 0 to 100.\r\n   * Providing 100 will is the same as calling greyscale\r\n   * @param amount - valid between 1-100\r\n   */\n\n\n  TinyColor.prototype.desaturate = function (amount) {\n    if (amount === void 0) {\n      amount = 10;\n    }\n\n    var hsl = this.toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return new TinyColor(hsl);\n  };\n  /**\r\n   * Saturate the color a given amount, from 0 to 100.\r\n   * @param amount - valid between 1-100\r\n   */\n\n\n  TinyColor.prototype.saturate = function (amount) {\n    if (amount === void 0) {\n      amount = 10;\n    }\n\n    var hsl = this.toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return new TinyColor(hsl);\n  };\n  /**\r\n   * Completely desaturates a color into greyscale.\r\n   * Same as calling `desaturate(100)`\r\n   */\n\n\n  TinyColor.prototype.greyscale = function () {\n    return this.desaturate(100);\n  };\n  /**\r\n   * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\r\n   * Values outside of this range will be wrapped into this range.\r\n   */\n\n\n  TinyColor.prototype.spin = function (amount) {\n    var hsl = this.toHsl();\n    var hue = (hsl.h + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return new TinyColor(hsl);\n  };\n  /**\r\n   * Mix the current color a given amount with another color, from 0 to 100.\r\n   * 0 means no mixing (return current color).\r\n   */\n\n\n  TinyColor.prototype.mix = function (color, amount) {\n    if (amount === void 0) {\n      amount = 50;\n    }\n\n    var rgb1 = this.toRgb();\n    var rgb2 = new TinyColor(color).toRgb();\n    var p = amount / 100;\n    var rgba = {\n      r: (rgb2.r - rgb1.r) * p + rgb1.r,\n      g: (rgb2.g - rgb1.g) * p + rgb1.g,\n      b: (rgb2.b - rgb1.b) * p + rgb1.b,\n      a: (rgb2.a - rgb1.a) * p + rgb1.a\n    };\n    return new TinyColor(rgba);\n  };\n\n  TinyColor.prototype.analogous = function (results, slices) {\n    if (results === void 0) {\n      results = 6;\n    }\n\n    if (slices === void 0) {\n      slices = 30;\n    }\n\n    var hsl = this.toHsl();\n    var part = 360 / slices;\n    var ret = [this];\n\n    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {\n      hsl.h = (hsl.h + part) % 360;\n      ret.push(new TinyColor(hsl));\n    }\n\n    return ret;\n  };\n  /**\r\n   * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\r\n   */\n\n\n  TinyColor.prototype.complement = function () {\n    var hsl = this.toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return new TinyColor(hsl);\n  };\n\n  TinyColor.prototype.monochromatic = function (results) {\n    if (results === void 0) {\n      results = 6;\n    }\n\n    var hsv = this.toHsv();\n    var h = hsv.h;\n    var s = hsv.s;\n    var v = hsv.v;\n    var res = [];\n    var modification = 1 / results;\n\n    while (results--) {\n      res.push(new TinyColor({\n        h: h,\n        s: s,\n        v: v\n      }));\n      v = (v + modification) % 1;\n    }\n\n    return res;\n  };\n\n  TinyColor.prototype.splitcomplement = function () {\n    var hsl = this.toHsl();\n    var h = hsl.h;\n    return [this, new TinyColor({\n      h: (h + 72) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }), new TinyColor({\n      h: (h + 216) % 360,\n      s: hsl.s,\n      l: hsl.l\n    })];\n  };\n  /**\r\n   * Compute how the color would appear on a background\r\n   */\n\n\n  TinyColor.prototype.onBackground = function (background) {\n    var fg = this.toRgb();\n    var bg = new TinyColor(background).toRgb();\n    return new TinyColor({\n      r: bg.r + (fg.r - bg.r) * fg.a,\n      g: bg.g + (fg.g - bg.g) * fg.a,\n      b: bg.b + (fg.b - bg.b) * fg.a\n    });\n  };\n  /**\r\n   * Alias for `polyad(3)`\r\n   */\n\n\n  TinyColor.prototype.triad = function () {\n    return this.polyad(3);\n  };\n  /**\r\n   * Alias for `polyad(4)`\r\n   */\n\n\n  TinyColor.prototype.tetrad = function () {\n    return this.polyad(4);\n  };\n  /**\r\n   * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\r\n   * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\r\n   */\n\n\n  TinyColor.prototype.polyad = function (n) {\n    var hsl = this.toHsl();\n    var h = hsl.h;\n    var result = [this];\n    var increment = 360 / n;\n\n    for (var i = 1; i < n; i++) {\n      result.push(new TinyColor({\n        h: (h + i * increment) % 360,\n        s: hsl.s,\n        l: hsl.l\n      }));\n    }\n\n    return result;\n  };\n  /**\r\n   * compare color vs current color\r\n   */\n\n\n  TinyColor.prototype.equals = function (color) {\n    return this.toRgbString() === new TinyColor(color).toRgbString();\n  };\n\n  return TinyColor;\n}();\n\nexport { TinyColor }; // kept for backwards compatability with v1\n\nexport function tinycolor(color, opts) {\n  if (color === void 0) {\n    color = '';\n  }\n\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  return new TinyColor(color, opts);\n}","map":{"version":3,"names":["numberInputToObject","rgbaToHex","rgbToHex","rgbToHsl","rgbToHsv","names","inputToRGB","bound01","boundAlpha","clamp01","TinyColor","color","opts","_a","originalInput","rgb","r","g","b","a","roundA","Math","round","format","gradientType","isValid","ok","prototype","isDark","getBrightness","isLight","toRgb","getLuminance","R","G","B","RsRGB","GsRGB","BsRGB","pow","getAlpha","setAlpha","alpha","toHsv","hsv","h","s","v","toHsvString","concat","toHsl","hsl","l","toHslString","toHex","allow3Char","toHexString","toHex8","allow4Char","toHex8String","toRgbString","toPercentageRgb","fmt","x","toPercentageRgbString","rnd","toName","hex","_i","Object","entries","length","_b","key","value","toString","formatSet","Boolean","formattedString","hasAlpha","needsAlphaFormat","startsWith","toNumber","clone","lighten","amount","brighten","max","min","darken","tint","mix","shade","desaturate","saturate","greyscale","spin","hue","rgb1","rgb2","p","rgba","analogous","results","slices","part","ret","push","complement","monochromatic","res","modification","splitcomplement","onBackground","background","fg","bg","triad","polyad","tetrad","n","result","increment","i","equals","tinycolor"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@ctrl/tinycolor/dist/module/index.js"],"sourcesContent":["import { numberInputToObject, rgbaToHex, rgbToHex, rgbToHsl, rgbToHsv } from './conversion';\r\nimport { names } from './css-color-names';\r\nimport { inputToRGB } from './format-input';\r\nimport { bound01, boundAlpha, clamp01 } from './util';\r\nvar TinyColor = /** @class */ (function () {\r\n    function TinyColor(color, opts) {\r\n        if (color === void 0) { color = ''; }\r\n        if (opts === void 0) { opts = {}; }\r\n        var _a;\r\n        // If input is already a tinycolor, return itself\r\n        if (color instanceof TinyColor) {\r\n            // eslint-disable-next-line no-constructor-return\r\n            return color;\r\n        }\r\n        if (typeof color === 'number') {\r\n            color = numberInputToObject(color);\r\n        }\r\n        this.originalInput = color;\r\n        var rgb = inputToRGB(color);\r\n        this.originalInput = color;\r\n        this.r = rgb.r;\r\n        this.g = rgb.g;\r\n        this.b = rgb.b;\r\n        this.a = rgb.a;\r\n        this.roundA = Math.round(100 * this.a) / 100;\r\n        this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;\r\n        this.gradientType = opts.gradientType;\r\n        // Don't let the range of [0,255] come back in [0,1].\r\n        // Potentially lose a little bit of precision here, but will fix issues where\r\n        // .5 gets interpreted as half of the total, instead of half of 1\r\n        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\r\n        if (this.r < 1) {\r\n            this.r = Math.round(this.r);\r\n        }\r\n        if (this.g < 1) {\r\n            this.g = Math.round(this.g);\r\n        }\r\n        if (this.b < 1) {\r\n            this.b = Math.round(this.b);\r\n        }\r\n        this.isValid = rgb.ok;\r\n    }\r\n    TinyColor.prototype.isDark = function () {\r\n        return this.getBrightness() < 128;\r\n    };\r\n    TinyColor.prototype.isLight = function () {\r\n        return !this.isDark();\r\n    };\r\n    /**\r\n     * Returns the perceived brightness of the color, from 0-255.\r\n     */\r\n    TinyColor.prototype.getBrightness = function () {\r\n        // http://www.w3.org/TR/AERT#color-contrast\r\n        var rgb = this.toRgb();\r\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\r\n    };\r\n    /**\r\n     * Returns the perceived luminance of a color, from 0-1.\r\n     */\r\n    TinyColor.prototype.getLuminance = function () {\r\n        // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\r\n        var rgb = this.toRgb();\r\n        var R;\r\n        var G;\r\n        var B;\r\n        var RsRGB = rgb.r / 255;\r\n        var GsRGB = rgb.g / 255;\r\n        var BsRGB = rgb.b / 255;\r\n        if (RsRGB <= 0.03928) {\r\n            R = RsRGB / 12.92;\r\n        }\r\n        else {\r\n            // eslint-disable-next-line prefer-exponentiation-operator\r\n            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\r\n        }\r\n        if (GsRGB <= 0.03928) {\r\n            G = GsRGB / 12.92;\r\n        }\r\n        else {\r\n            // eslint-disable-next-line prefer-exponentiation-operator\r\n            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\r\n        }\r\n        if (BsRGB <= 0.03928) {\r\n            B = BsRGB / 12.92;\r\n        }\r\n        else {\r\n            // eslint-disable-next-line prefer-exponentiation-operator\r\n            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\r\n        }\r\n        return 0.2126 * R + 0.7152 * G + 0.0722 * B;\r\n    };\r\n    /**\r\n     * Returns the alpha value of a color, from 0-1.\r\n     */\r\n    TinyColor.prototype.getAlpha = function () {\r\n        return this.a;\r\n    };\r\n    /**\r\n     * Sets the alpha value on the current color.\r\n     *\r\n     * @param alpha - The new alpha value. The accepted range is 0-1.\r\n     */\r\n    TinyColor.prototype.setAlpha = function (alpha) {\r\n        this.a = boundAlpha(alpha);\r\n        this.roundA = Math.round(100 * this.a) / 100;\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns the object as a HSVA object.\r\n     */\r\n    TinyColor.prototype.toHsv = function () {\r\n        var hsv = rgbToHsv(this.r, this.g, this.b);\r\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };\r\n    };\r\n    /**\r\n     * Returns the hsva values interpolated into a string with the following format:\r\n     * \"hsva(xxx, xxx, xxx, xx)\".\r\n     */\r\n    TinyColor.prototype.toHsvString = function () {\r\n        var hsv = rgbToHsv(this.r, this.g, this.b);\r\n        var h = Math.round(hsv.h * 360);\r\n        var s = Math.round(hsv.s * 100);\r\n        var v = Math.round(hsv.v * 100);\r\n        return this.a === 1 ? \"hsv(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%)\") : \"hsva(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%, \").concat(this.roundA, \")\");\r\n    };\r\n    /**\r\n     * Returns the object as a HSLA object.\r\n     */\r\n    TinyColor.prototype.toHsl = function () {\r\n        var hsl = rgbToHsl(this.r, this.g, this.b);\r\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };\r\n    };\r\n    /**\r\n     * Returns the hsla values interpolated into a string with the following format:\r\n     * \"hsla(xxx, xxx, xxx, xx)\".\r\n     */\r\n    TinyColor.prototype.toHslString = function () {\r\n        var hsl = rgbToHsl(this.r, this.g, this.b);\r\n        var h = Math.round(hsl.h * 360);\r\n        var s = Math.round(hsl.s * 100);\r\n        var l = Math.round(hsl.l * 100);\r\n        return this.a === 1 ? \"hsl(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%)\") : \"hsla(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%, \").concat(this.roundA, \")\");\r\n    };\r\n    /**\r\n     * Returns the hex value of the color.\r\n     * @param allow3Char will shorten hex value to 3 char if possible\r\n     */\r\n    TinyColor.prototype.toHex = function (allow3Char) {\r\n        if (allow3Char === void 0) { allow3Char = false; }\r\n        return rgbToHex(this.r, this.g, this.b, allow3Char);\r\n    };\r\n    /**\r\n     * Returns the hex value of the color -with a # appened.\r\n     * @param allow3Char will shorten hex value to 3 char if possible\r\n     */\r\n    TinyColor.prototype.toHexString = function (allow3Char) {\r\n        if (allow3Char === void 0) { allow3Char = false; }\r\n        return '#' + this.toHex(allow3Char);\r\n    };\r\n    /**\r\n     * Returns the hex 8 value of the color.\r\n     * @param allow4Char will shorten hex value to 4 char if possible\r\n     */\r\n    TinyColor.prototype.toHex8 = function (allow4Char) {\r\n        if (allow4Char === void 0) { allow4Char = false; }\r\n        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\r\n    };\r\n    /**\r\n     * Returns the hex 8 value of the color -with a # appened.\r\n     * @param allow4Char will shorten hex value to 4 char if possible\r\n     */\r\n    TinyColor.prototype.toHex8String = function (allow4Char) {\r\n        if (allow4Char === void 0) { allow4Char = false; }\r\n        return '#' + this.toHex8(allow4Char);\r\n    };\r\n    /**\r\n     * Returns the object as a RGBA object.\r\n     */\r\n    TinyColor.prototype.toRgb = function () {\r\n        return {\r\n            r: Math.round(this.r),\r\n            g: Math.round(this.g),\r\n            b: Math.round(this.b),\r\n            a: this.a,\r\n        };\r\n    };\r\n    /**\r\n     * Returns the RGBA values interpolated into a string with the following format:\r\n     * \"RGBA(xxx, xxx, xxx, xx)\".\r\n     */\r\n    TinyColor.prototype.toRgbString = function () {\r\n        var r = Math.round(this.r);\r\n        var g = Math.round(this.g);\r\n        var b = Math.round(this.b);\r\n        return this.a === 1 ? \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\") : \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(this.roundA, \")\");\r\n    };\r\n    /**\r\n     * Returns the object as a RGBA object.\r\n     */\r\n    TinyColor.prototype.toPercentageRgb = function () {\r\n        var fmt = function (x) { return \"\".concat(Math.round(bound01(x, 255) * 100), \"%\"); };\r\n        return {\r\n            r: fmt(this.r),\r\n            g: fmt(this.g),\r\n            b: fmt(this.b),\r\n            a: this.a,\r\n        };\r\n    };\r\n    /**\r\n     * Returns the RGBA relative values interpolated into a string\r\n     */\r\n    TinyColor.prototype.toPercentageRgbString = function () {\r\n        var rnd = function (x) { return Math.round(bound01(x, 255) * 100); };\r\n        return this.a === 1\r\n            ? \"rgb(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%)\")\r\n            : \"rgba(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%, \").concat(this.roundA, \")\");\r\n    };\r\n    /**\r\n     * The 'real' name of the color -if there is one.\r\n     */\r\n    TinyColor.prototype.toName = function () {\r\n        if (this.a === 0) {\r\n            return 'transparent';\r\n        }\r\n        if (this.a < 1) {\r\n            return false;\r\n        }\r\n        var hex = '#' + rgbToHex(this.r, this.g, this.b, false);\r\n        for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {\r\n            var _b = _a[_i], key = _b[0], value = _b[1];\r\n            if (hex === value) {\r\n                return key;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    TinyColor.prototype.toString = function (format) {\r\n        var formatSet = Boolean(format);\r\n        format = format !== null && format !== void 0 ? format : this.format;\r\n        var formattedString = false;\r\n        var hasAlpha = this.a < 1 && this.a >= 0;\r\n        var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');\r\n        if (needsAlphaFormat) {\r\n            // Special case for \"transparent\", all other non-alpha formats\r\n            // will return rgba when there is transparency.\r\n            if (format === 'name' && this.a === 0) {\r\n                return this.toName();\r\n            }\r\n            return this.toRgbString();\r\n        }\r\n        if (format === 'rgb') {\r\n            formattedString = this.toRgbString();\r\n        }\r\n        if (format === 'prgb') {\r\n            formattedString = this.toPercentageRgbString();\r\n        }\r\n        if (format === 'hex' || format === 'hex6') {\r\n            formattedString = this.toHexString();\r\n        }\r\n        if (format === 'hex3') {\r\n            formattedString = this.toHexString(true);\r\n        }\r\n        if (format === 'hex4') {\r\n            formattedString = this.toHex8String(true);\r\n        }\r\n        if (format === 'hex8') {\r\n            formattedString = this.toHex8String();\r\n        }\r\n        if (format === 'name') {\r\n            formattedString = this.toName();\r\n        }\r\n        if (format === 'hsl') {\r\n            formattedString = this.toHslString();\r\n        }\r\n        if (format === 'hsv') {\r\n            formattedString = this.toHsvString();\r\n        }\r\n        return formattedString || this.toHexString();\r\n    };\r\n    TinyColor.prototype.toNumber = function () {\r\n        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);\r\n    };\r\n    TinyColor.prototype.clone = function () {\r\n        return new TinyColor(this.toString());\r\n    };\r\n    /**\r\n     * Lighten the color a given amount. Providing 100 will always return white.\r\n     * @param amount - valid between 1-100\r\n     */\r\n    TinyColor.prototype.lighten = function (amount) {\r\n        if (amount === void 0) { amount = 10; }\r\n        var hsl = this.toHsl();\r\n        hsl.l += amount / 100;\r\n        hsl.l = clamp01(hsl.l);\r\n        return new TinyColor(hsl);\r\n    };\r\n    /**\r\n     * Brighten the color a given amount, from 0 to 100.\r\n     * @param amount - valid between 1-100\r\n     */\r\n    TinyColor.prototype.brighten = function (amount) {\r\n        if (amount === void 0) { amount = 10; }\r\n        var rgb = this.toRgb();\r\n        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\r\n        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\r\n        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\r\n        return new TinyColor(rgb);\r\n    };\r\n    /**\r\n     * Darken the color a given amount, from 0 to 100.\r\n     * Providing 100 will always return black.\r\n     * @param amount - valid between 1-100\r\n     */\r\n    TinyColor.prototype.darken = function (amount) {\r\n        if (amount === void 0) { amount = 10; }\r\n        var hsl = this.toHsl();\r\n        hsl.l -= amount / 100;\r\n        hsl.l = clamp01(hsl.l);\r\n        return new TinyColor(hsl);\r\n    };\r\n    /**\r\n     * Mix the color with pure white, from 0 to 100.\r\n     * Providing 0 will do nothing, providing 100 will always return white.\r\n     * @param amount - valid between 1-100\r\n     */\r\n    TinyColor.prototype.tint = function (amount) {\r\n        if (amount === void 0) { amount = 10; }\r\n        return this.mix('white', amount);\r\n    };\r\n    /**\r\n     * Mix the color with pure black, from 0 to 100.\r\n     * Providing 0 will do nothing, providing 100 will always return black.\r\n     * @param amount - valid between 1-100\r\n     */\r\n    TinyColor.prototype.shade = function (amount) {\r\n        if (amount === void 0) { amount = 10; }\r\n        return this.mix('black', amount);\r\n    };\r\n    /**\r\n     * Desaturate the color a given amount, from 0 to 100.\r\n     * Providing 100 will is the same as calling greyscale\r\n     * @param amount - valid between 1-100\r\n     */\r\n    TinyColor.prototype.desaturate = function (amount) {\r\n        if (amount === void 0) { amount = 10; }\r\n        var hsl = this.toHsl();\r\n        hsl.s -= amount / 100;\r\n        hsl.s = clamp01(hsl.s);\r\n        return new TinyColor(hsl);\r\n    };\r\n    /**\r\n     * Saturate the color a given amount, from 0 to 100.\r\n     * @param amount - valid between 1-100\r\n     */\r\n    TinyColor.prototype.saturate = function (amount) {\r\n        if (amount === void 0) { amount = 10; }\r\n        var hsl = this.toHsl();\r\n        hsl.s += amount / 100;\r\n        hsl.s = clamp01(hsl.s);\r\n        return new TinyColor(hsl);\r\n    };\r\n    /**\r\n     * Completely desaturates a color into greyscale.\r\n     * Same as calling `desaturate(100)`\r\n     */\r\n    TinyColor.prototype.greyscale = function () {\r\n        return this.desaturate(100);\r\n    };\r\n    /**\r\n     * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\r\n     * Values outside of this range will be wrapped into this range.\r\n     */\r\n    TinyColor.prototype.spin = function (amount) {\r\n        var hsl = this.toHsl();\r\n        var hue = (hsl.h + amount) % 360;\r\n        hsl.h = hue < 0 ? 360 + hue : hue;\r\n        return new TinyColor(hsl);\r\n    };\r\n    /**\r\n     * Mix the current color a given amount with another color, from 0 to 100.\r\n     * 0 means no mixing (return current color).\r\n     */\r\n    TinyColor.prototype.mix = function (color, amount) {\r\n        if (amount === void 0) { amount = 50; }\r\n        var rgb1 = this.toRgb();\r\n        var rgb2 = new TinyColor(color).toRgb();\r\n        var p = amount / 100;\r\n        var rgba = {\r\n            r: (rgb2.r - rgb1.r) * p + rgb1.r,\r\n            g: (rgb2.g - rgb1.g) * p + rgb1.g,\r\n            b: (rgb2.b - rgb1.b) * p + rgb1.b,\r\n            a: (rgb2.a - rgb1.a) * p + rgb1.a,\r\n        };\r\n        return new TinyColor(rgba);\r\n    };\r\n    TinyColor.prototype.analogous = function (results, slices) {\r\n        if (results === void 0) { results = 6; }\r\n        if (slices === void 0) { slices = 30; }\r\n        var hsl = this.toHsl();\r\n        var part = 360 / slices;\r\n        var ret = [this];\r\n        for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results;) {\r\n            hsl.h = (hsl.h + part) % 360;\r\n            ret.push(new TinyColor(hsl));\r\n        }\r\n        return ret;\r\n    };\r\n    /**\r\n     * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\r\n     */\r\n    TinyColor.prototype.complement = function () {\r\n        var hsl = this.toHsl();\r\n        hsl.h = (hsl.h + 180) % 360;\r\n        return new TinyColor(hsl);\r\n    };\r\n    TinyColor.prototype.monochromatic = function (results) {\r\n        if (results === void 0) { results = 6; }\r\n        var hsv = this.toHsv();\r\n        var h = hsv.h;\r\n        var s = hsv.s;\r\n        var v = hsv.v;\r\n        var res = [];\r\n        var modification = 1 / results;\r\n        while (results--) {\r\n            res.push(new TinyColor({ h: h, s: s, v: v }));\r\n            v = (v + modification) % 1;\r\n        }\r\n        return res;\r\n    };\r\n    TinyColor.prototype.splitcomplement = function () {\r\n        var hsl = this.toHsl();\r\n        var h = hsl.h;\r\n        return [\r\n            this,\r\n            new TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),\r\n            new TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),\r\n        ];\r\n    };\r\n    /**\r\n     * Compute how the color would appear on a background\r\n     */\r\n    TinyColor.prototype.onBackground = function (background) {\r\n        var fg = this.toRgb();\r\n        var bg = new TinyColor(background).toRgb();\r\n        return new TinyColor({\r\n            r: bg.r + (fg.r - bg.r) * fg.a,\r\n            g: bg.g + (fg.g - bg.g) * fg.a,\r\n            b: bg.b + (fg.b - bg.b) * fg.a,\r\n        });\r\n    };\r\n    /**\r\n     * Alias for `polyad(3)`\r\n     */\r\n    TinyColor.prototype.triad = function () {\r\n        return this.polyad(3);\r\n    };\r\n    /**\r\n     * Alias for `polyad(4)`\r\n     */\r\n    TinyColor.prototype.tetrad = function () {\r\n        return this.polyad(4);\r\n    };\r\n    /**\r\n     * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\r\n     * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\r\n     */\r\n    TinyColor.prototype.polyad = function (n) {\r\n        var hsl = this.toHsl();\r\n        var h = hsl.h;\r\n        var result = [this];\r\n        var increment = 360 / n;\r\n        for (var i = 1; i < n; i++) {\r\n            result.push(new TinyColor({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * compare color vs current color\r\n     */\r\n    TinyColor.prototype.equals = function (color) {\r\n        return this.toRgbString() === new TinyColor(color).toRgbString();\r\n    };\r\n    return TinyColor;\r\n}());\r\nexport { TinyColor };\r\n// kept for backwards compatability with v1\r\nexport function tinycolor(color, opts) {\r\n    if (color === void 0) { color = ''; }\r\n    if (opts === void 0) { opts = {}; }\r\n    return new TinyColor(color, opts);\r\n}\r\n"],"mappings":"AAAA,SAASA,mBAAT,EAA8BC,SAA9B,EAAyCC,QAAzC,EAAmDC,QAAnD,EAA6DC,QAA7D,QAA6E,cAA7E;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,OAA9B,QAA6C,QAA7C;;AACA,IAAIC,SAAS;AAAG;AAAe,YAAY;EACvC,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,IAA1B,EAAgC;IAC5B,IAAID,KAAK,KAAK,KAAK,CAAnB,EAAsB;MAAEA,KAAK,GAAG,EAAR;IAAa;;IACrC,IAAIC,IAAI,KAAK,KAAK,CAAlB,EAAqB;MAAEA,IAAI,GAAG,EAAP;IAAY;;IACnC,IAAIC,EAAJ,CAH4B,CAI5B;;;IACA,IAAIF,KAAK,YAAYD,SAArB,EAAgC;MAC5B;MACA,OAAOC,KAAP;IACH;;IACD,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MAC3BA,KAAK,GAAGX,mBAAmB,CAACW,KAAD,CAA3B;IACH;;IACD,KAAKG,aAAL,GAAqBH,KAArB;IACA,IAAII,GAAG,GAAGT,UAAU,CAACK,KAAD,CAApB;IACA,KAAKG,aAAL,GAAqBH,KAArB;IACA,KAAKK,CAAL,GAASD,GAAG,CAACC,CAAb;IACA,KAAKC,CAAL,GAASF,GAAG,CAACE,CAAb;IACA,KAAKC,CAAL,GAASH,GAAG,CAACG,CAAb;IACA,KAAKC,CAAL,GAASJ,GAAG,CAACI,CAAb;IACA,KAAKC,MAAL,GAAcC,IAAI,CAACC,KAAL,CAAW,MAAM,KAAKH,CAAtB,IAA2B,GAAzC;IACA,KAAKI,MAAL,GAAc,CAACV,EAAE,GAAGD,IAAI,CAACW,MAAX,MAAuB,IAAvB,IAA+BV,EAAE,KAAK,KAAK,CAA3C,GAA+CA,EAA/C,GAAoDE,GAAG,CAACQ,MAAtE;IACA,KAAKC,YAAL,GAAoBZ,IAAI,CAACY,YAAzB,CArB4B,CAsB5B;IACA;IACA;IACA;;IACA,IAAI,KAAKR,CAAL,GAAS,CAAb,EAAgB;MACZ,KAAKA,CAAL,GAASK,IAAI,CAACC,KAAL,CAAW,KAAKN,CAAhB,CAAT;IACH;;IACD,IAAI,KAAKC,CAAL,GAAS,CAAb,EAAgB;MACZ,KAAKA,CAAL,GAASI,IAAI,CAACC,KAAL,CAAW,KAAKL,CAAhB,CAAT;IACH;;IACD,IAAI,KAAKC,CAAL,GAAS,CAAb,EAAgB;MACZ,KAAKA,CAAL,GAASG,IAAI,CAACC,KAAL,CAAW,KAAKJ,CAAhB,CAAT;IACH;;IACD,KAAKO,OAAL,GAAeV,GAAG,CAACW,EAAnB;EACH;;EACDhB,SAAS,CAACiB,SAAV,CAAoBC,MAApB,GAA6B,YAAY;IACrC,OAAO,KAAKC,aAAL,KAAuB,GAA9B;EACH,CAFD;;EAGAnB,SAAS,CAACiB,SAAV,CAAoBG,OAApB,GAA8B,YAAY;IACtC,OAAO,CAAC,KAAKF,MAAL,EAAR;EACH,CAFD;EAGA;AACJ;AACA;;;EACIlB,SAAS,CAACiB,SAAV,CAAoBE,aAApB,GAAoC,YAAY;IAC5C;IACA,IAAId,GAAG,GAAG,KAAKgB,KAAL,EAAV;IACA,OAAO,CAAChB,GAAG,CAACC,CAAJ,GAAQ,GAAR,GAAcD,GAAG,CAACE,CAAJ,GAAQ,GAAtB,GAA4BF,GAAG,CAACG,CAAJ,GAAQ,GAArC,IAA4C,IAAnD;EACH,CAJD;EAKA;AACJ;AACA;;;EACIR,SAAS,CAACiB,SAAV,CAAoBK,YAApB,GAAmC,YAAY;IAC3C;IACA,IAAIjB,GAAG,GAAG,KAAKgB,KAAL,EAAV;IACA,IAAIE,CAAJ;IACA,IAAIC,CAAJ;IACA,IAAIC,CAAJ;IACA,IAAIC,KAAK,GAAGrB,GAAG,CAACC,CAAJ,GAAQ,GAApB;IACA,IAAIqB,KAAK,GAAGtB,GAAG,CAACE,CAAJ,GAAQ,GAApB;IACA,IAAIqB,KAAK,GAAGvB,GAAG,CAACG,CAAJ,GAAQ,GAApB;;IACA,IAAIkB,KAAK,IAAI,OAAb,EAAsB;MAClBH,CAAC,GAAGG,KAAK,GAAG,KAAZ;IACH,CAFD,MAGK;MACD;MACAH,CAAC,GAAGZ,IAAI,CAACkB,GAAL,CAAS,CAACH,KAAK,GAAG,KAAT,IAAkB,KAA3B,EAAkC,GAAlC,CAAJ;IACH;;IACD,IAAIC,KAAK,IAAI,OAAb,EAAsB;MAClBH,CAAC,GAAGG,KAAK,GAAG,KAAZ;IACH,CAFD,MAGK;MACD;MACAH,CAAC,GAAGb,IAAI,CAACkB,GAAL,CAAS,CAACF,KAAK,GAAG,KAAT,IAAkB,KAA3B,EAAkC,GAAlC,CAAJ;IACH;;IACD,IAAIC,KAAK,IAAI,OAAb,EAAsB;MAClBH,CAAC,GAAGG,KAAK,GAAG,KAAZ;IACH,CAFD,MAGK;MACD;MACAH,CAAC,GAAGd,IAAI,CAACkB,GAAL,CAAS,CAACD,KAAK,GAAG,KAAT,IAAkB,KAA3B,EAAkC,GAAlC,CAAJ;IACH;;IACD,OAAO,SAASL,CAAT,GAAa,SAASC,CAAtB,GAA0B,SAASC,CAA1C;EACH,CA/BD;EAgCA;AACJ;AACA;;;EACIzB,SAAS,CAACiB,SAAV,CAAoBa,QAApB,GAA+B,YAAY;IACvC,OAAO,KAAKrB,CAAZ;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;;;EACIT,SAAS,CAACiB,SAAV,CAAoBc,QAApB,GAA+B,UAAUC,KAAV,EAAiB;IAC5C,KAAKvB,CAAL,GAASX,UAAU,CAACkC,KAAD,CAAnB;IACA,KAAKtB,MAAL,GAAcC,IAAI,CAACC,KAAL,CAAW,MAAM,KAAKH,CAAtB,IAA2B,GAAzC;IACA,OAAO,IAAP;EACH,CAJD;EAKA;AACJ;AACA;;;EACIT,SAAS,CAACiB,SAAV,CAAoBgB,KAApB,GAA4B,YAAY;IACpC,IAAIC,GAAG,GAAGxC,QAAQ,CAAC,KAAKY,CAAN,EAAS,KAAKC,CAAd,EAAiB,KAAKC,CAAtB,CAAlB;IACA,OAAO;MAAE2B,CAAC,EAAED,GAAG,CAACC,CAAJ,GAAQ,GAAb;MAAkBC,CAAC,EAAEF,GAAG,CAACE,CAAzB;MAA4BC,CAAC,EAAEH,GAAG,CAACG,CAAnC;MAAsC5B,CAAC,EAAE,KAAKA;IAA9C,CAAP;EACH,CAHD;EAIA;AACJ;AACA;AACA;;;EACIT,SAAS,CAACiB,SAAV,CAAoBqB,WAApB,GAAkC,YAAY;IAC1C,IAAIJ,GAAG,GAAGxC,QAAQ,CAAC,KAAKY,CAAN,EAAS,KAAKC,CAAd,EAAiB,KAAKC,CAAtB,CAAlB;IACA,IAAI2B,CAAC,GAAGxB,IAAI,CAACC,KAAL,CAAWsB,GAAG,CAACC,CAAJ,GAAQ,GAAnB,CAAR;IACA,IAAIC,CAAC,GAAGzB,IAAI,CAACC,KAAL,CAAWsB,GAAG,CAACE,CAAJ,GAAQ,GAAnB,CAAR;IACA,IAAIC,CAAC,GAAG1B,IAAI,CAACC,KAAL,CAAWsB,GAAG,CAACG,CAAJ,GAAQ,GAAnB,CAAR;IACA,OAAO,KAAK5B,CAAL,KAAW,CAAX,GAAe,OAAO8B,MAAP,CAAcJ,CAAd,EAAiB,IAAjB,EAAuBI,MAAvB,CAA8BH,CAA9B,EAAiC,KAAjC,EAAwCG,MAAxC,CAA+CF,CAA/C,EAAkD,IAAlD,CAAf,GAAyE,QAAQE,MAAR,CAAeJ,CAAf,EAAkB,IAAlB,EAAwBI,MAAxB,CAA+BH,CAA/B,EAAkC,KAAlC,EAAyCG,MAAzC,CAAgDF,CAAhD,EAAmD,KAAnD,EAA0DE,MAA1D,CAAiE,KAAK7B,MAAtE,EAA8E,GAA9E,CAAhF;EACH,CAND;EAOA;AACJ;AACA;;;EACIV,SAAS,CAACiB,SAAV,CAAoBuB,KAApB,GAA4B,YAAY;IACpC,IAAIC,GAAG,GAAGhD,QAAQ,CAAC,KAAKa,CAAN,EAAS,KAAKC,CAAd,EAAiB,KAAKC,CAAtB,CAAlB;IACA,OAAO;MAAE2B,CAAC,EAAEM,GAAG,CAACN,CAAJ,GAAQ,GAAb;MAAkBC,CAAC,EAAEK,GAAG,CAACL,CAAzB;MAA4BM,CAAC,EAAED,GAAG,CAACC,CAAnC;MAAsCjC,CAAC,EAAE,KAAKA;IAA9C,CAAP;EACH,CAHD;EAIA;AACJ;AACA;AACA;;;EACIT,SAAS,CAACiB,SAAV,CAAoB0B,WAApB,GAAkC,YAAY;IAC1C,IAAIF,GAAG,GAAGhD,QAAQ,CAAC,KAAKa,CAAN,EAAS,KAAKC,CAAd,EAAiB,KAAKC,CAAtB,CAAlB;IACA,IAAI2B,CAAC,GAAGxB,IAAI,CAACC,KAAL,CAAW6B,GAAG,CAACN,CAAJ,GAAQ,GAAnB,CAAR;IACA,IAAIC,CAAC,GAAGzB,IAAI,CAACC,KAAL,CAAW6B,GAAG,CAACL,CAAJ,GAAQ,GAAnB,CAAR;IACA,IAAIM,CAAC,GAAG/B,IAAI,CAACC,KAAL,CAAW6B,GAAG,CAACC,CAAJ,GAAQ,GAAnB,CAAR;IACA,OAAO,KAAKjC,CAAL,KAAW,CAAX,GAAe,OAAO8B,MAAP,CAAcJ,CAAd,EAAiB,IAAjB,EAAuBI,MAAvB,CAA8BH,CAA9B,EAAiC,KAAjC,EAAwCG,MAAxC,CAA+CG,CAA/C,EAAkD,IAAlD,CAAf,GAAyE,QAAQH,MAAR,CAAeJ,CAAf,EAAkB,IAAlB,EAAwBI,MAAxB,CAA+BH,CAA/B,EAAkC,KAAlC,EAAyCG,MAAzC,CAAgDG,CAAhD,EAAmD,KAAnD,EAA0DH,MAA1D,CAAiE,KAAK7B,MAAtE,EAA8E,GAA9E,CAAhF;EACH,CAND;EAOA;AACJ;AACA;AACA;;;EACIV,SAAS,CAACiB,SAAV,CAAoB2B,KAApB,GAA4B,UAAUC,UAAV,EAAsB;IAC9C,IAAIA,UAAU,KAAK,KAAK,CAAxB,EAA2B;MAAEA,UAAU,GAAG,KAAb;IAAqB;;IAClD,OAAOrD,QAAQ,CAAC,KAAKc,CAAN,EAAS,KAAKC,CAAd,EAAiB,KAAKC,CAAtB,EAAyBqC,UAAzB,CAAf;EACH,CAHD;EAIA;AACJ;AACA;AACA;;;EACI7C,SAAS,CAACiB,SAAV,CAAoB6B,WAApB,GAAkC,UAAUD,UAAV,EAAsB;IACpD,IAAIA,UAAU,KAAK,KAAK,CAAxB,EAA2B;MAAEA,UAAU,GAAG,KAAb;IAAqB;;IAClD,OAAO,MAAM,KAAKD,KAAL,CAAWC,UAAX,CAAb;EACH,CAHD;EAIA;AACJ;AACA;AACA;;;EACI7C,SAAS,CAACiB,SAAV,CAAoB8B,MAApB,GAA6B,UAAUC,UAAV,EAAsB;IAC/C,IAAIA,UAAU,KAAK,KAAK,CAAxB,EAA2B;MAAEA,UAAU,GAAG,KAAb;IAAqB;;IAClD,OAAOzD,SAAS,CAAC,KAAKe,CAAN,EAAS,KAAKC,CAAd,EAAiB,KAAKC,CAAtB,EAAyB,KAAKC,CAA9B,EAAiCuC,UAAjC,CAAhB;EACH,CAHD;EAIA;AACJ;AACA;AACA;;;EACIhD,SAAS,CAACiB,SAAV,CAAoBgC,YAApB,GAAmC,UAAUD,UAAV,EAAsB;IACrD,IAAIA,UAAU,KAAK,KAAK,CAAxB,EAA2B;MAAEA,UAAU,GAAG,KAAb;IAAqB;;IAClD,OAAO,MAAM,KAAKD,MAAL,CAAYC,UAAZ,CAAb;EACH,CAHD;EAIA;AACJ;AACA;;;EACIhD,SAAS,CAACiB,SAAV,CAAoBI,KAApB,GAA4B,YAAY;IACpC,OAAO;MACHf,CAAC,EAAEK,IAAI,CAACC,KAAL,CAAW,KAAKN,CAAhB,CADA;MAEHC,CAAC,EAAEI,IAAI,CAACC,KAAL,CAAW,KAAKL,CAAhB,CAFA;MAGHC,CAAC,EAAEG,IAAI,CAACC,KAAL,CAAW,KAAKJ,CAAhB,CAHA;MAIHC,CAAC,EAAE,KAAKA;IAJL,CAAP;EAMH,CAPD;EAQA;AACJ;AACA;AACA;;;EACIT,SAAS,CAACiB,SAAV,CAAoBiC,WAApB,GAAkC,YAAY;IAC1C,IAAI5C,CAAC,GAAGK,IAAI,CAACC,KAAL,CAAW,KAAKN,CAAhB,CAAR;IACA,IAAIC,CAAC,GAAGI,IAAI,CAACC,KAAL,CAAW,KAAKL,CAAhB,CAAR;IACA,IAAIC,CAAC,GAAGG,IAAI,CAACC,KAAL,CAAW,KAAKJ,CAAhB,CAAR;IACA,OAAO,KAAKC,CAAL,KAAW,CAAX,GAAe,OAAO8B,MAAP,CAAcjC,CAAd,EAAiB,IAAjB,EAAuBiC,MAAvB,CAA8BhC,CAA9B,EAAiC,IAAjC,EAAuCgC,MAAvC,CAA8C/B,CAA9C,EAAiD,GAAjD,CAAf,GAAuE,QAAQ+B,MAAR,CAAejC,CAAf,EAAkB,IAAlB,EAAwBiC,MAAxB,CAA+BhC,CAA/B,EAAkC,IAAlC,EAAwCgC,MAAxC,CAA+C/B,CAA/C,EAAkD,IAAlD,EAAwD+B,MAAxD,CAA+D,KAAK7B,MAApE,EAA4E,GAA5E,CAA9E;EACH,CALD;EAMA;AACJ;AACA;;;EACIV,SAAS,CAACiB,SAAV,CAAoBkC,eAApB,GAAsC,YAAY;IAC9C,IAAIC,GAAG,GAAG,SAANA,GAAM,CAAUC,CAAV,EAAa;MAAE,OAAO,GAAGd,MAAH,CAAU5B,IAAI,CAACC,KAAL,CAAWf,OAAO,CAACwD,CAAD,EAAI,GAAJ,CAAP,GAAkB,GAA7B,CAAV,EAA6C,GAA7C,CAAP;IAA2D,CAApF;;IACA,OAAO;MACH/C,CAAC,EAAE8C,GAAG,CAAC,KAAK9C,CAAN,CADH;MAEHC,CAAC,EAAE6C,GAAG,CAAC,KAAK7C,CAAN,CAFH;MAGHC,CAAC,EAAE4C,GAAG,CAAC,KAAK5C,CAAN,CAHH;MAIHC,CAAC,EAAE,KAAKA;IAJL,CAAP;EAMH,CARD;EASA;AACJ;AACA;;;EACIT,SAAS,CAACiB,SAAV,CAAoBqC,qBAApB,GAA4C,YAAY;IACpD,IAAIC,GAAG,GAAG,SAANA,GAAM,CAAUF,CAAV,EAAa;MAAE,OAAO1C,IAAI,CAACC,KAAL,CAAWf,OAAO,CAACwD,CAAD,EAAI,GAAJ,CAAP,GAAkB,GAA7B,CAAP;IAA2C,CAApE;;IACA,OAAO,KAAK5C,CAAL,KAAW,CAAX,GACD,OAAO8B,MAAP,CAAcgB,GAAG,CAAC,KAAKjD,CAAN,CAAjB,EAA2B,KAA3B,EAAkCiC,MAAlC,CAAyCgB,GAAG,CAAC,KAAKhD,CAAN,CAA5C,EAAsD,KAAtD,EAA6DgC,MAA7D,CAAoEgB,GAAG,CAAC,KAAK/C,CAAN,CAAvE,EAAiF,IAAjF,CADC,GAED,QAAQ+B,MAAR,CAAegB,GAAG,CAAC,KAAKjD,CAAN,CAAlB,EAA4B,KAA5B,EAAmCiC,MAAnC,CAA0CgB,GAAG,CAAC,KAAKhD,CAAN,CAA7C,EAAuD,KAAvD,EAA8DgC,MAA9D,CAAqEgB,GAAG,CAAC,KAAK/C,CAAN,CAAxE,EAAkF,KAAlF,EAAyF+B,MAAzF,CAAgG,KAAK7B,MAArG,EAA6G,GAA7G,CAFN;EAGH,CALD;EAMA;AACJ;AACA;;;EACIV,SAAS,CAACiB,SAAV,CAAoBuC,MAApB,GAA6B,YAAY;IACrC,IAAI,KAAK/C,CAAL,KAAW,CAAf,EAAkB;MACd,OAAO,aAAP;IACH;;IACD,IAAI,KAAKA,CAAL,GAAS,CAAb,EAAgB;MACZ,OAAO,KAAP;IACH;;IACD,IAAIgD,GAAG,GAAG,MAAMjE,QAAQ,CAAC,KAAKc,CAAN,EAAS,KAAKC,CAAd,EAAiB,KAAKC,CAAtB,EAAyB,KAAzB,CAAxB;;IACA,KAAK,IAAIkD,EAAE,GAAG,CAAT,EAAYvD,EAAE,GAAGwD,MAAM,CAACC,OAAP,CAAejE,KAAf,CAAtB,EAA6C+D,EAAE,GAAGvD,EAAE,CAAC0D,MAArD,EAA6DH,EAAE,EAA/D,EAAmE;MAC/D,IAAII,EAAE,GAAG3D,EAAE,CAACuD,EAAD,CAAX;MAAA,IAAiBK,GAAG,GAAGD,EAAE,CAAC,CAAD,CAAzB;MAAA,IAA8BE,KAAK,GAAGF,EAAE,CAAC,CAAD,CAAxC;;MACA,IAAIL,GAAG,KAAKO,KAAZ,EAAmB;QACf,OAAOD,GAAP;MACH;IACJ;;IACD,OAAO,KAAP;EACH,CAfD;;EAgBA/D,SAAS,CAACiB,SAAV,CAAoBgD,QAApB,GAA+B,UAAUpD,MAAV,EAAkB;IAC7C,IAAIqD,SAAS,GAAGC,OAAO,CAACtD,MAAD,CAAvB;IACAA,MAAM,GAAGA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuCA,MAAvC,GAAgD,KAAKA,MAA9D;IACA,IAAIuD,eAAe,GAAG,KAAtB;IACA,IAAIC,QAAQ,GAAG,KAAK5D,CAAL,GAAS,CAAT,IAAc,KAAKA,CAAL,IAAU,CAAvC;IACA,IAAI6D,gBAAgB,GAAG,CAACJ,SAAD,IAAcG,QAAd,KAA2BxD,MAAM,CAAC0D,UAAP,CAAkB,KAAlB,KAA4B1D,MAAM,KAAK,MAAlE,CAAvB;;IACA,IAAIyD,gBAAJ,EAAsB;MAClB;MACA;MACA,IAAIzD,MAAM,KAAK,MAAX,IAAqB,KAAKJ,CAAL,KAAW,CAApC,EAAuC;QACnC,OAAO,KAAK+C,MAAL,EAAP;MACH;;MACD,OAAO,KAAKN,WAAL,EAAP;IACH;;IACD,IAAIrC,MAAM,KAAK,KAAf,EAAsB;MAClBuD,eAAe,GAAG,KAAKlB,WAAL,EAAlB;IACH;;IACD,IAAIrC,MAAM,KAAK,MAAf,EAAuB;MACnBuD,eAAe,GAAG,KAAKd,qBAAL,EAAlB;IACH;;IACD,IAAIzC,MAAM,KAAK,KAAX,IAAoBA,MAAM,KAAK,MAAnC,EAA2C;MACvCuD,eAAe,GAAG,KAAKtB,WAAL,EAAlB;IACH;;IACD,IAAIjC,MAAM,KAAK,MAAf,EAAuB;MACnBuD,eAAe,GAAG,KAAKtB,WAAL,CAAiB,IAAjB,CAAlB;IACH;;IACD,IAAIjC,MAAM,KAAK,MAAf,EAAuB;MACnBuD,eAAe,GAAG,KAAKnB,YAAL,CAAkB,IAAlB,CAAlB;IACH;;IACD,IAAIpC,MAAM,KAAK,MAAf,EAAuB;MACnBuD,eAAe,GAAG,KAAKnB,YAAL,EAAlB;IACH;;IACD,IAAIpC,MAAM,KAAK,MAAf,EAAuB;MACnBuD,eAAe,GAAG,KAAKZ,MAAL,EAAlB;IACH;;IACD,IAAI3C,MAAM,KAAK,KAAf,EAAsB;MAClBuD,eAAe,GAAG,KAAKzB,WAAL,EAAlB;IACH;;IACD,IAAI9B,MAAM,KAAK,KAAf,EAAsB;MAClBuD,eAAe,GAAG,KAAK9B,WAAL,EAAlB;IACH;;IACD,OAAO8B,eAAe,IAAI,KAAKtB,WAAL,EAA1B;EACH,CA1CD;;EA2CA9C,SAAS,CAACiB,SAAV,CAAoBuD,QAApB,GAA+B,YAAY;IACvC,OAAO,CAAC7D,IAAI,CAACC,KAAL,CAAW,KAAKN,CAAhB,KAAsB,EAAvB,KAA8BK,IAAI,CAACC,KAAL,CAAW,KAAKL,CAAhB,KAAsB,CAApD,IAAyDI,IAAI,CAACC,KAAL,CAAW,KAAKJ,CAAhB,CAAhE;EACH,CAFD;;EAGAR,SAAS,CAACiB,SAAV,CAAoBwD,KAApB,GAA4B,YAAY;IACpC,OAAO,IAAIzE,SAAJ,CAAc,KAAKiE,QAAL,EAAd,CAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;;;EACIjE,SAAS,CAACiB,SAAV,CAAoByD,OAApB,GAA8B,UAAUC,MAAV,EAAkB;IAC5C,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;MAAEA,MAAM,GAAG,EAAT;IAAc;;IACvC,IAAIlC,GAAG,GAAG,KAAKD,KAAL,EAAV;IACAC,GAAG,CAACC,CAAJ,IAASiC,MAAM,GAAG,GAAlB;IACAlC,GAAG,CAACC,CAAJ,GAAQ3C,OAAO,CAAC0C,GAAG,CAACC,CAAL,CAAf;IACA,OAAO,IAAI1C,SAAJ,CAAcyC,GAAd,CAAP;EACH,CAND;EAOA;AACJ;AACA;AACA;;;EACIzC,SAAS,CAACiB,SAAV,CAAoB2D,QAApB,GAA+B,UAAUD,MAAV,EAAkB;IAC7C,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;MAAEA,MAAM,GAAG,EAAT;IAAc;;IACvC,IAAItE,GAAG,GAAG,KAAKgB,KAAL,EAAV;IACAhB,GAAG,CAACC,CAAJ,GAAQK,IAAI,CAACkE,GAAL,CAAS,CAAT,EAAYlE,IAAI,CAACmE,GAAL,CAAS,GAAT,EAAczE,GAAG,CAACC,CAAJ,GAAQK,IAAI,CAACC,KAAL,CAAW,MAAM,EAAE+D,MAAM,GAAG,GAAX,CAAjB,CAAtB,CAAZ,CAAR;IACAtE,GAAG,CAACE,CAAJ,GAAQI,IAAI,CAACkE,GAAL,CAAS,CAAT,EAAYlE,IAAI,CAACmE,GAAL,CAAS,GAAT,EAAczE,GAAG,CAACE,CAAJ,GAAQI,IAAI,CAACC,KAAL,CAAW,MAAM,EAAE+D,MAAM,GAAG,GAAX,CAAjB,CAAtB,CAAZ,CAAR;IACAtE,GAAG,CAACG,CAAJ,GAAQG,IAAI,CAACkE,GAAL,CAAS,CAAT,EAAYlE,IAAI,CAACmE,GAAL,CAAS,GAAT,EAAczE,GAAG,CAACG,CAAJ,GAAQG,IAAI,CAACC,KAAL,CAAW,MAAM,EAAE+D,MAAM,GAAG,GAAX,CAAjB,CAAtB,CAAZ,CAAR;IACA,OAAO,IAAI3E,SAAJ,CAAcK,GAAd,CAAP;EACH,CAPD;EAQA;AACJ;AACA;AACA;AACA;;;EACIL,SAAS,CAACiB,SAAV,CAAoB8D,MAApB,GAA6B,UAAUJ,MAAV,EAAkB;IAC3C,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;MAAEA,MAAM,GAAG,EAAT;IAAc;;IACvC,IAAIlC,GAAG,GAAG,KAAKD,KAAL,EAAV;IACAC,GAAG,CAACC,CAAJ,IAASiC,MAAM,GAAG,GAAlB;IACAlC,GAAG,CAACC,CAAJ,GAAQ3C,OAAO,CAAC0C,GAAG,CAACC,CAAL,CAAf;IACA,OAAO,IAAI1C,SAAJ,CAAcyC,GAAd,CAAP;EACH,CAND;EAOA;AACJ;AACA;AACA;AACA;;;EACIzC,SAAS,CAACiB,SAAV,CAAoB+D,IAApB,GAA2B,UAAUL,MAAV,EAAkB;IACzC,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;MAAEA,MAAM,GAAG,EAAT;IAAc;;IACvC,OAAO,KAAKM,GAAL,CAAS,OAAT,EAAkBN,MAAlB,CAAP;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;;;EACI3E,SAAS,CAACiB,SAAV,CAAoBiE,KAApB,GAA4B,UAAUP,MAAV,EAAkB;IAC1C,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;MAAEA,MAAM,GAAG,EAAT;IAAc;;IACvC,OAAO,KAAKM,GAAL,CAAS,OAAT,EAAkBN,MAAlB,CAAP;EACH,CAHD;EAIA;AACJ;AACA;AACA;AACA;;;EACI3E,SAAS,CAACiB,SAAV,CAAoBkE,UAApB,GAAiC,UAAUR,MAAV,EAAkB;IAC/C,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;MAAEA,MAAM,GAAG,EAAT;IAAc;;IACvC,IAAIlC,GAAG,GAAG,KAAKD,KAAL,EAAV;IACAC,GAAG,CAACL,CAAJ,IAASuC,MAAM,GAAG,GAAlB;IACAlC,GAAG,CAACL,CAAJ,GAAQrC,OAAO,CAAC0C,GAAG,CAACL,CAAL,CAAf;IACA,OAAO,IAAIpC,SAAJ,CAAcyC,GAAd,CAAP;EACH,CAND;EAOA;AACJ;AACA;AACA;;;EACIzC,SAAS,CAACiB,SAAV,CAAoBmE,QAApB,GAA+B,UAAUT,MAAV,EAAkB;IAC7C,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;MAAEA,MAAM,GAAG,EAAT;IAAc;;IACvC,IAAIlC,GAAG,GAAG,KAAKD,KAAL,EAAV;IACAC,GAAG,CAACL,CAAJ,IAASuC,MAAM,GAAG,GAAlB;IACAlC,GAAG,CAACL,CAAJ,GAAQrC,OAAO,CAAC0C,GAAG,CAACL,CAAL,CAAf;IACA,OAAO,IAAIpC,SAAJ,CAAcyC,GAAd,CAAP;EACH,CAND;EAOA;AACJ;AACA;AACA;;;EACIzC,SAAS,CAACiB,SAAV,CAAoBoE,SAApB,GAAgC,YAAY;IACxC,OAAO,KAAKF,UAAL,CAAgB,GAAhB,CAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;;;EACInF,SAAS,CAACiB,SAAV,CAAoBqE,IAApB,GAA2B,UAAUX,MAAV,EAAkB;IACzC,IAAIlC,GAAG,GAAG,KAAKD,KAAL,EAAV;IACA,IAAI+C,GAAG,GAAG,CAAC9C,GAAG,CAACN,CAAJ,GAAQwC,MAAT,IAAmB,GAA7B;IACAlC,GAAG,CAACN,CAAJ,GAAQoD,GAAG,GAAG,CAAN,GAAU,MAAMA,GAAhB,GAAsBA,GAA9B;IACA,OAAO,IAAIvF,SAAJ,CAAcyC,GAAd,CAAP;EACH,CALD;EAMA;AACJ;AACA;AACA;;;EACIzC,SAAS,CAACiB,SAAV,CAAoBgE,GAApB,GAA0B,UAAUhF,KAAV,EAAiB0E,MAAjB,EAAyB;IAC/C,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;MAAEA,MAAM,GAAG,EAAT;IAAc;;IACvC,IAAIa,IAAI,GAAG,KAAKnE,KAAL,EAAX;IACA,IAAIoE,IAAI,GAAG,IAAIzF,SAAJ,CAAcC,KAAd,EAAqBoB,KAArB,EAAX;IACA,IAAIqE,CAAC,GAAGf,MAAM,GAAG,GAAjB;IACA,IAAIgB,IAAI,GAAG;MACPrF,CAAC,EAAE,CAACmF,IAAI,CAACnF,CAAL,GAASkF,IAAI,CAAClF,CAAf,IAAoBoF,CAApB,GAAwBF,IAAI,CAAClF,CADzB;MAEPC,CAAC,EAAE,CAACkF,IAAI,CAAClF,CAAL,GAASiF,IAAI,CAACjF,CAAf,IAAoBmF,CAApB,GAAwBF,IAAI,CAACjF,CAFzB;MAGPC,CAAC,EAAE,CAACiF,IAAI,CAACjF,CAAL,GAASgF,IAAI,CAAChF,CAAf,IAAoBkF,CAApB,GAAwBF,IAAI,CAAChF,CAHzB;MAIPC,CAAC,EAAE,CAACgF,IAAI,CAAChF,CAAL,GAAS+E,IAAI,CAAC/E,CAAf,IAAoBiF,CAApB,GAAwBF,IAAI,CAAC/E;IAJzB,CAAX;IAMA,OAAO,IAAIT,SAAJ,CAAc2F,IAAd,CAAP;EACH,CAZD;;EAaA3F,SAAS,CAACiB,SAAV,CAAoB2E,SAApB,GAAgC,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;IACvD,IAAID,OAAO,KAAK,KAAK,CAArB,EAAwB;MAAEA,OAAO,GAAG,CAAV;IAAc;;IACxC,IAAIC,MAAM,KAAK,KAAK,CAApB,EAAuB;MAAEA,MAAM,GAAG,EAAT;IAAc;;IACvC,IAAIrD,GAAG,GAAG,KAAKD,KAAL,EAAV;IACA,IAAIuD,IAAI,GAAG,MAAMD,MAAjB;IACA,IAAIE,GAAG,GAAG,CAAC,IAAD,CAAV;;IACA,KAAKvD,GAAG,CAACN,CAAJ,GAAQ,CAACM,GAAG,CAACN,CAAJ,IAAU4D,IAAI,GAAGF,OAAR,IAAoB,CAA7B,IAAkC,GAAnC,IAA0C,GAAvD,EAA4D,EAAEA,OAA9D,GAAwE;MACpEpD,GAAG,CAACN,CAAJ,GAAQ,CAACM,GAAG,CAACN,CAAJ,GAAQ4D,IAAT,IAAiB,GAAzB;MACAC,GAAG,CAACC,IAAJ,CAAS,IAAIjG,SAAJ,CAAcyC,GAAd,CAAT;IACH;;IACD,OAAOuD,GAAP;EACH,CAXD;EAYA;AACJ;AACA;;;EACIhG,SAAS,CAACiB,SAAV,CAAoBiF,UAApB,GAAiC,YAAY;IACzC,IAAIzD,GAAG,GAAG,KAAKD,KAAL,EAAV;IACAC,GAAG,CAACN,CAAJ,GAAQ,CAACM,GAAG,CAACN,CAAJ,GAAQ,GAAT,IAAgB,GAAxB;IACA,OAAO,IAAInC,SAAJ,CAAcyC,GAAd,CAAP;EACH,CAJD;;EAKAzC,SAAS,CAACiB,SAAV,CAAoBkF,aAApB,GAAoC,UAAUN,OAAV,EAAmB;IACnD,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;MAAEA,OAAO,GAAG,CAAV;IAAc;;IACxC,IAAI3D,GAAG,GAAG,KAAKD,KAAL,EAAV;IACA,IAAIE,CAAC,GAAGD,GAAG,CAACC,CAAZ;IACA,IAAIC,CAAC,GAAGF,GAAG,CAACE,CAAZ;IACA,IAAIC,CAAC,GAAGH,GAAG,CAACG,CAAZ;IACA,IAAI+D,GAAG,GAAG,EAAV;IACA,IAAIC,YAAY,GAAG,IAAIR,OAAvB;;IACA,OAAOA,OAAO,EAAd,EAAkB;MACdO,GAAG,CAACH,IAAJ,CAAS,IAAIjG,SAAJ,CAAc;QAAEmC,CAAC,EAAEA,CAAL;QAAQC,CAAC,EAAEA,CAAX;QAAcC,CAAC,EAAEA;MAAjB,CAAd,CAAT;MACAA,CAAC,GAAG,CAACA,CAAC,GAAGgE,YAAL,IAAqB,CAAzB;IACH;;IACD,OAAOD,GAAP;EACH,CAbD;;EAcApG,SAAS,CAACiB,SAAV,CAAoBqF,eAApB,GAAsC,YAAY;IAC9C,IAAI7D,GAAG,GAAG,KAAKD,KAAL,EAAV;IACA,IAAIL,CAAC,GAAGM,GAAG,CAACN,CAAZ;IACA,OAAO,CACH,IADG,EAEH,IAAInC,SAAJ,CAAc;MAAEmC,CAAC,EAAE,CAACA,CAAC,GAAG,EAAL,IAAW,GAAhB;MAAqBC,CAAC,EAAEK,GAAG,CAACL,CAA5B;MAA+BM,CAAC,EAAED,GAAG,CAACC;IAAtC,CAAd,CAFG,EAGH,IAAI1C,SAAJ,CAAc;MAAEmC,CAAC,EAAE,CAACA,CAAC,GAAG,GAAL,IAAY,GAAjB;MAAsBC,CAAC,EAAEK,GAAG,CAACL,CAA7B;MAAgCM,CAAC,EAAED,GAAG,CAACC;IAAvC,CAAd,CAHG,CAAP;EAKH,CARD;EASA;AACJ;AACA;;;EACI1C,SAAS,CAACiB,SAAV,CAAoBsF,YAApB,GAAmC,UAAUC,UAAV,EAAsB;IACrD,IAAIC,EAAE,GAAG,KAAKpF,KAAL,EAAT;IACA,IAAIqF,EAAE,GAAG,IAAI1G,SAAJ,CAAcwG,UAAd,EAA0BnF,KAA1B,EAAT;IACA,OAAO,IAAIrB,SAAJ,CAAc;MACjBM,CAAC,EAAEoG,EAAE,CAACpG,CAAH,GAAO,CAACmG,EAAE,CAACnG,CAAH,GAAOoG,EAAE,CAACpG,CAAX,IAAgBmG,EAAE,CAAChG,CADZ;MAEjBF,CAAC,EAAEmG,EAAE,CAACnG,CAAH,GAAO,CAACkG,EAAE,CAAClG,CAAH,GAAOmG,EAAE,CAACnG,CAAX,IAAgBkG,EAAE,CAAChG,CAFZ;MAGjBD,CAAC,EAAEkG,EAAE,CAAClG,CAAH,GAAO,CAACiG,EAAE,CAACjG,CAAH,GAAOkG,EAAE,CAAClG,CAAX,IAAgBiG,EAAE,CAAChG;IAHZ,CAAd,CAAP;EAKH,CARD;EASA;AACJ;AACA;;;EACIT,SAAS,CAACiB,SAAV,CAAoB0F,KAApB,GAA4B,YAAY;IACpC,OAAO,KAAKC,MAAL,CAAY,CAAZ,CAAP;EACH,CAFD;EAGA;AACJ;AACA;;;EACI5G,SAAS,CAACiB,SAAV,CAAoB4F,MAApB,GAA6B,YAAY;IACrC,OAAO,KAAKD,MAAL,CAAY,CAAZ,CAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;;;EACI5G,SAAS,CAACiB,SAAV,CAAoB2F,MAApB,GAA6B,UAAUE,CAAV,EAAa;IACtC,IAAIrE,GAAG,GAAG,KAAKD,KAAL,EAAV;IACA,IAAIL,CAAC,GAAGM,GAAG,CAACN,CAAZ;IACA,IAAI4E,MAAM,GAAG,CAAC,IAAD,CAAb;IACA,IAAIC,SAAS,GAAG,MAAMF,CAAtB;;IACA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAApB,EAAuBG,CAAC,EAAxB,EAA4B;MACxBF,MAAM,CAACd,IAAP,CAAY,IAAIjG,SAAJ,CAAc;QAAEmC,CAAC,EAAE,CAACA,CAAC,GAAG8E,CAAC,GAAGD,SAAT,IAAsB,GAA3B;QAAgC5E,CAAC,EAAEK,GAAG,CAACL,CAAvC;QAA0CM,CAAC,EAAED,GAAG,CAACC;MAAjD,CAAd,CAAZ;IACH;;IACD,OAAOqE,MAAP;EACH,CATD;EAUA;AACJ;AACA;;;EACI/G,SAAS,CAACiB,SAAV,CAAoBiG,MAApB,GAA6B,UAAUjH,KAAV,EAAiB;IAC1C,OAAO,KAAKiD,WAAL,OAAuB,IAAIlD,SAAJ,CAAcC,KAAd,EAAqBiD,WAArB,EAA9B;EACH,CAFD;;EAGA,OAAOlD,SAAP;AACH,CA/d8B,EAA/B;;AAgeA,SAASA,SAAT,G,CACA;;AACA,OAAO,SAASmH,SAAT,CAAmBlH,KAAnB,EAA0BC,IAA1B,EAAgC;EACnC,IAAID,KAAK,KAAK,KAAK,CAAnB,EAAsB;IAAEA,KAAK,GAAG,EAAR;EAAa;;EACrC,IAAIC,IAAI,KAAK,KAAK,CAAlB,EAAqB;IAAEA,IAAI,GAAG,EAAP;EAAY;;EACnC,OAAO,IAAIF,SAAJ,CAAcC,KAAd,EAAqBC,IAArB,CAAP;AACH"},"metadata":{},"sourceType":"module"}
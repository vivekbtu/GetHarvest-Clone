{"ast":null,"code":"import { useState, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { isBrowser } from './is-browser.mjs'; // Does this device prefer reduced motion? Returns `null` server-side.\n\nconst prefersReducedMotion = {\n  current: null\n};\nlet hasDetected = false;\n\nfunction initPrefersReducedMotion() {\n  hasDetected = true;\n  if (!isBrowser) return;\n\n  if (window.matchMedia) {\n    const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n\n    const setReducedMotionPreferences = () => prefersReducedMotion.current = motionMediaQuery.matches;\n\n    motionMediaQuery.addListener(setReducedMotionPreferences);\n    setReducedMotionPreferences();\n  } else {\n    prefersReducedMotion.current = false;\n  }\n}\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\n\n\nfunction useReducedMotion() {\n  /**\n   * Lazy initialisation of prefersReducedMotion\n   */\n  !hasDetected && initPrefersReducedMotion();\n  const [shouldReduceMotion] = useState(prefersReducedMotion.current);\n  /**\n   * TODO See if people miss automatically updating shouldReduceMotion setting\n   */\n\n  return shouldReduceMotion;\n}\n\nfunction useReducedMotionConfig() {\n  const reducedMotionPreference = useReducedMotion();\n  const {\n    reducedMotion\n  } = useContext(MotionConfigContext);\n\n  if (reducedMotion === \"never\") {\n    return false;\n  } else if (reducedMotion === \"always\") {\n    return true;\n  } else {\n    return reducedMotionPreference;\n  }\n}\n\nexport { useReducedMotion, useReducedMotionConfig };","map":{"version":3,"names":["useState","useContext","MotionConfigContext","isBrowser","prefersReducedMotion","current","hasDetected","initPrefersReducedMotion","window","matchMedia","motionMediaQuery","setReducedMotionPreferences","matches","addListener","useReducedMotion","shouldReduceMotion","useReducedMotionConfig","reducedMotionPreference","reducedMotion"],"sources":["C:/Users/bittu/Desktop/Unit4Project-React/my-project/node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs"],"sourcesContent":["import { useState, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { isBrowser } from './is-browser.mjs';\n\n// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nlet hasDetected = false;\nfunction initPrefersReducedMotion() {\n    hasDetected = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n/**\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\n *\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\n *\n * It will actively respond to changes and re-render your components with the latest setting.\n *\n * ```jsx\n * export function Sidebar({ isOpen }) {\n *   const shouldReduceMotion = useReducedMotion()\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\n *\n *   return (\n *     <motion.div animate={{\n *       opacity: isOpen ? 1 : 0,\n *       x: isOpen ? 0 : closedX\n *     }} />\n *   )\n * }\n * ```\n *\n * @return boolean\n *\n * @public\n */\nfunction useReducedMotion() {\n    /**\n     * Lazy initialisation of prefersReducedMotion\n     */\n    !hasDetected && initPrefersReducedMotion();\n    const [shouldReduceMotion] = useState(prefersReducedMotion.current);\n    /**\n     * TODO See if people miss automatically updating shouldReduceMotion setting\n     */\n    return shouldReduceMotion;\n}\nfunction useReducedMotionConfig() {\n    const reducedMotionPreference = useReducedMotion();\n    const { reducedMotion } = useContext(MotionConfigContext);\n    if (reducedMotion === \"never\") {\n        return false;\n    }\n    else if (reducedMotion === \"always\") {\n        return true;\n    }\n    else {\n        return reducedMotionPreference;\n    }\n}\n\nexport { useReducedMotion, useReducedMotionConfig };\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B,C,CAEA;;AACA,MAAMC,oBAAoB,GAAG;EAAEC,OAAO,EAAE;AAAX,CAA7B;AACA,IAAIC,WAAW,GAAG,KAAlB;;AACA,SAASC,wBAAT,GAAoC;EAChCD,WAAW,GAAG,IAAd;EACA,IAAI,CAACH,SAAL,EACI;;EACJ,IAAIK,MAAM,CAACC,UAAX,EAAuB;IACnB,MAAMC,gBAAgB,GAAGF,MAAM,CAACC,UAAP,CAAkB,0BAAlB,CAAzB;;IACA,MAAME,2BAA2B,GAAG,MAAOP,oBAAoB,CAACC,OAArB,GAA+BK,gBAAgB,CAACE,OAA3F;;IACAF,gBAAgB,CAACG,WAAjB,CAA6BF,2BAA7B;IACAA,2BAA2B;EAC9B,CALD,MAMK;IACDP,oBAAoB,CAACC,OAArB,GAA+B,KAA/B;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,gBAAT,GAA4B;EACxB;AACJ;AACA;EACI,CAACR,WAAD,IAAgBC,wBAAwB,EAAxC;EACA,MAAM,CAACQ,kBAAD,IAAuBf,QAAQ,CAACI,oBAAoB,CAACC,OAAtB,CAArC;EACA;AACJ;AACA;;EACI,OAAOU,kBAAP;AACH;;AACD,SAASC,sBAAT,GAAkC;EAC9B,MAAMC,uBAAuB,GAAGH,gBAAgB,EAAhD;EACA,MAAM;IAAEI;EAAF,IAAoBjB,UAAU,CAACC,mBAAD,CAApC;;EACA,IAAIgB,aAAa,KAAK,OAAtB,EAA+B;IAC3B,OAAO,KAAP;EACH,CAFD,MAGK,IAAIA,aAAa,KAAK,QAAtB,EAAgC;IACjC,OAAO,IAAP;EACH,CAFI,MAGA;IACD,OAAOD,uBAAP;EACH;AACJ;;AAED,SAASH,gBAAT,EAA2BE,sBAA3B"},"metadata":{},"sourceType":"module"}
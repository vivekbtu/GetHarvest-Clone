{"ast":null,"code":"import { useEffect } from 'react';\n\nfunction addDomEvent(target, eventName, handler) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    passive: true\n  };\n  target.addEventListener(eventName, handler, options);\n  return () => target.removeEventListener(eventName, handler);\n}\n/**\r\n * Attaches an event listener directly to the provided DOM element.\r\n *\r\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\r\n * event handlers.\r\n *\r\n * ```jsx\r\n * const ref = useRef(null)\r\n *\r\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\r\n *\r\n * return <div ref={ref} />\r\n * ```\r\n *\r\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\r\n * @param eventName - Name of the event you want listen for.\r\n * @param handler - Function to fire when receiving the event.\r\n * @param options - Options to pass to `Event.addEventListener`.\r\n *\r\n * @public\r\n */\n\n\nfunction useDomEvent(ref, eventName, handler, options) {\n  useEffect(() => {\n    const element = ref.current;\n\n    if (handler && element) {\n      return addDomEvent(element, eventName, handler, options);\n    }\n  }, [ref, eventName, handler, options]);\n}\n\nexport { addDomEvent, useDomEvent };","map":{"version":3,"names":["useEffect","addDomEvent","target","eventName","handler","options","passive","addEventListener","removeEventListener","useDomEvent","ref","element","current"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/events/use-dom-event.mjs"],"sourcesContent":["import { useEffect } from 'react';\r\n\r\nfunction addDomEvent(target, eventName, handler, options = { passive: true }) {\r\n    target.addEventListener(eventName, handler, options);\r\n    return () => target.removeEventListener(eventName, handler);\r\n}\r\n/**\r\n * Attaches an event listener directly to the provided DOM element.\r\n *\r\n * Bypassing React's event system can be desirable, for instance when attaching non-passive\r\n * event handlers.\r\n *\r\n * ```jsx\r\n * const ref = useRef(null)\r\n *\r\n * useDomEvent(ref, 'wheel', onWheel, { passive: false })\r\n *\r\n * return <div ref={ref} />\r\n * ```\r\n *\r\n * @param ref - React.RefObject that's been provided to the element you want to bind the listener to.\r\n * @param eventName - Name of the event you want listen for.\r\n * @param handler - Function to fire when receiving the event.\r\n * @param options - Options to pass to `Event.addEventListener`.\r\n *\r\n * @public\r\n */\r\nfunction useDomEvent(ref, eventName, handler, options) {\r\n    useEffect(() => {\r\n        const element = ref.current;\r\n        if (handler && element) {\r\n            return addDomEvent(element, eventName, handler, options);\r\n        }\r\n    }, [ref, eventName, handler, options]);\r\n}\r\n\r\nexport { addDomEvent, useDomEvent };\r\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,SAA7B,EAAwCC,OAAxC,EAA8E;EAAA,IAA7BC,OAA6B,uEAAnB;IAAEC,OAAO,EAAE;EAAX,CAAmB;EAC1EJ,MAAM,CAACK,gBAAP,CAAwBJ,SAAxB,EAAmCC,OAAnC,EAA4CC,OAA5C;EACA,OAAO,MAAMH,MAAM,CAACM,mBAAP,CAA2BL,SAA3B,EAAsCC,OAAtC,CAAb;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,WAAT,CAAqBC,GAArB,EAA0BP,SAA1B,EAAqCC,OAArC,EAA8CC,OAA9C,EAAuD;EACnDL,SAAS,CAAC,MAAM;IACZ,MAAMW,OAAO,GAAGD,GAAG,CAACE,OAApB;;IACA,IAAIR,OAAO,IAAIO,OAAf,EAAwB;MACpB,OAAOV,WAAW,CAACU,OAAD,EAAUR,SAAV,EAAqBC,OAArB,EAA8BC,OAA9B,CAAlB;IACH;EACJ,CALQ,EAKN,CAACK,GAAD,EAAMP,SAAN,EAAiBC,OAAjB,EAA0BC,OAA1B,CALM,CAAT;AAMH;;AAED,SAASJ,WAAT,EAAsBQ,WAAtB"},"metadata":{},"sourceType":"module"}
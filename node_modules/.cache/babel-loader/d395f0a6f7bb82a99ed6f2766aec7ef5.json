{"ast":null,"code":"import { useMotionValue } from './use-motion-value.mjs';\nimport { useMultiOnChange } from './use-on-change.mjs';\nimport sync from 'framesync';\n\nfunction useCombineMotionValues(values, combineValues) {\n  /**\n   * Initialise the returned motion value. This remains the same between renders.\n   */\n  const value = useMotionValue(combineValues());\n  /**\n   * Create a function that will update the template motion value with the latest values.\n   * This is pre-bound so whenever a motion value updates it can schedule its\n   * execution in Framesync. If it's already been scheduled it won't be fired twice\n   * in a single frame.\n   */\n\n  const updateValue = () => value.set(combineValues());\n  /**\n   * Synchronously update the motion value with the latest values during the render.\n   * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n   */\n\n\n  updateValue();\n  /**\n   * Subscribe to all motion values found within the template. Whenever any of them change,\n   * schedule an update.\n   */\n\n  useMultiOnChange(values, () => sync.update(updateValue, false, true));\n  return value;\n}\n\nexport { useCombineMotionValues };","map":{"version":3,"names":["useMotionValue","useMultiOnChange","sync","useCombineMotionValues","values","combineValues","value","updateValue","set","update"],"sources":["C:/Users/bittu/Desktop/Unit4Project-React/my-project/node_modules/framer-motion/dist/es/value/use-combine-values.mjs"],"sourcesContent":["import { useMotionValue } from './use-motion-value.mjs';\nimport { useMultiOnChange } from './use-on-change.mjs';\nimport sync from 'framesync';\n\nfunction useCombineMotionValues(values, combineValues) {\n    /**\n     * Initialise the returned motion value. This remains the same between renders.\n     */\n    const value = useMotionValue(combineValues());\n    /**\n     * Create a function that will update the template motion value with the latest values.\n     * This is pre-bound so whenever a motion value updates it can schedule its\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\n     * in a single frame.\n     */\n    const updateValue = () => value.set(combineValues());\n    /**\n     * Synchronously update the motion value with the latest values during the render.\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\n     */\n    updateValue();\n    /**\n     * Subscribe to all motion values found within the template. Whenever any of them change,\n     * schedule an update.\n     */\n    useMultiOnChange(values, () => sync.update(updateValue, false, true));\n    return value;\n}\n\nexport { useCombineMotionValues };\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,wBAA/B;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,SAASC,sBAAT,CAAgCC,MAAhC,EAAwCC,aAAxC,EAAuD;EACnD;AACJ;AACA;EACI,MAAMC,KAAK,GAAGN,cAAc,CAACK,aAAa,EAAd,CAA5B;EACA;AACJ;AACA;AACA;AACA;AACA;;EACI,MAAME,WAAW,GAAG,MAAMD,KAAK,CAACE,GAAN,CAAUH,aAAa,EAAvB,CAA1B;EACA;AACJ;AACA;AACA;;;EACIE,WAAW;EACX;AACJ;AACA;AACA;;EACIN,gBAAgB,CAACG,MAAD,EAAS,MAAMF,IAAI,CAACO,MAAL,CAAYF,WAAZ,EAAyB,KAAzB,EAAgC,IAAhC,CAAf,CAAhB;EACA,OAAOD,KAAP;AACH;;AAED,SAASH,sBAAT"},"metadata":{},"sourceType":"module"}
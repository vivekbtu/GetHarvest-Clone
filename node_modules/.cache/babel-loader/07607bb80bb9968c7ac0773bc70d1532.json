{"ast":null,"code":"import { useContext, useRef, useMemo } from 'react';\nimport { animate } from 'popmotion';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { useOnChange } from './use-on-change.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\n/**\r\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\r\n *\r\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\r\n * to another `MotionValue`.\r\n *\r\n * @remarks\r\n *\r\n * ```jsx\r\n * const x = useSpring(0, { stiffness: 300 })\r\n * const y = useSpring(x, { damping: 10 })\r\n * ```\r\n *\r\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\r\n * @param springConfig - Configuration options for the spring.\r\n * @returns `MotionValue`\r\n *\r\n * @public\r\n */\n\nfunction useSpring(source) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _useContext = useContext(MotionConfigContext),\n      isStatic = _useContext.isStatic;\n\n  var activeSpringAnimation = useRef(null);\n  var value = useMotionValue(isMotionValue(source) ? source.get() : source);\n  useMemo(function () {\n    return value.attach(function (v, set) {\n      /**\r\n       * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\r\n       * at that level, but this will work for now\r\n       */\n      if (isStatic) return set(v);\n\n      if (activeSpringAnimation.current) {\n        activeSpringAnimation.current.stop();\n      }\n\n      activeSpringAnimation.current = animate(Object.assign(Object.assign({\n        from: value.get(),\n        to: v,\n        velocity: value.getVelocity()\n      }, config), {\n        onUpdate: set\n      }));\n      return value.get();\n    });\n  }, [JSON.stringify(config)]);\n  useOnChange(source, function (v) {\n    return value.set(parseFloat(v));\n  });\n  return value;\n}\n\nexport { useSpring };","map":{"version":3,"names":["useContext","useRef","useMemo","animate","isMotionValue","useMotionValue","useOnChange","MotionConfigContext","useSpring","source","config","isStatic","activeSpringAnimation","value","get","attach","v","set","current","stop","Object","assign","from","to","velocity","getVelocity","onUpdate","JSON","stringify","parseFloat"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/value/use-spring.mjs"],"sourcesContent":["import { useContext, useRef, useMemo } from 'react';\r\nimport { animate } from 'popmotion';\r\nimport { isMotionValue } from './utils/is-motion-value.mjs';\r\nimport { useMotionValue } from './use-motion-value.mjs';\r\nimport { useOnChange } from './use-on-change.mjs';\r\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\r\n\r\n/**\r\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\r\n *\r\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\r\n * to another `MotionValue`.\r\n *\r\n * @remarks\r\n *\r\n * ```jsx\r\n * const x = useSpring(0, { stiffness: 300 })\r\n * const y = useSpring(x, { damping: 10 })\r\n * ```\r\n *\r\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\r\n * @param springConfig - Configuration options for the spring.\r\n * @returns `MotionValue`\r\n *\r\n * @public\r\n */\r\nfunction useSpring(source, config = {}) {\r\n    const { isStatic } = useContext(MotionConfigContext);\r\n    const activeSpringAnimation = useRef(null);\r\n    const value = useMotionValue(isMotionValue(source) ? source.get() : source);\r\n    useMemo(() => {\r\n        return value.attach((v, set) => {\r\n            /**\r\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\r\n             * at that level, but this will work for now\r\n             */\r\n            if (isStatic)\r\n                return set(v);\r\n            if (activeSpringAnimation.current) {\r\n                activeSpringAnimation.current.stop();\r\n            }\r\n            activeSpringAnimation.current = animate(Object.assign(Object.assign({ from: value.get(), to: v, velocity: value.getVelocity() }, config), { onUpdate: set }));\r\n            return value.get();\r\n        });\r\n    }, [JSON.stringify(config)]);\r\n    useOnChange(source, (v) => value.set(parseFloat(v)));\r\n    return value;\r\n}\r\n\r\nexport { useSpring };\r\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,OAA7B,QAA4C,OAA5C;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,mBAAT,QAAoC,oCAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,MAAnB,EAAwC;EAAA,IAAbC,MAAa,uEAAJ,EAAI;;EACpC,kBAAqBV,UAAU,CAACO,mBAAD,CAA/B;EAAA,IAAQI,QAAR,eAAQA,QAAR;;EACA,IAAMC,qBAAqB,GAAGX,MAAM,CAAC,IAAD,CAApC;EACA,IAAMY,KAAK,GAAGR,cAAc,CAACD,aAAa,CAACK,MAAD,CAAb,GAAwBA,MAAM,CAACK,GAAP,EAAxB,GAAuCL,MAAxC,CAA5B;EACAP,OAAO,CAAC,YAAM;IACV,OAAOW,KAAK,CAACE,MAAN,CAAa,UAACC,CAAD,EAAIC,GAAJ,EAAY;MAC5B;AACZ;AACA;AACA;MACY,IAAIN,QAAJ,EACI,OAAOM,GAAG,CAACD,CAAD,CAAV;;MACJ,IAAIJ,qBAAqB,CAACM,OAA1B,EAAmC;QAC/BN,qBAAqB,CAACM,OAAtB,CAA8BC,IAA9B;MACH;;MACDP,qBAAqB,CAACM,OAAtB,GAAgCf,OAAO,CAACiB,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc;QAAEC,IAAI,EAAET,KAAK,CAACC,GAAN,EAAR;QAAqBS,EAAE,EAAEP,CAAzB;QAA4BQ,QAAQ,EAAEX,KAAK,CAACY,WAAN;MAAtC,CAAd,EAA2Ef,MAA3E,CAAd,EAAkG;QAAEgB,QAAQ,EAAET;MAAZ,CAAlG,CAAD,CAAvC;MACA,OAAOJ,KAAK,CAACC,GAAN,EAAP;IACH,CAZM,CAAP;EAaH,CAdM,EAcJ,CAACa,IAAI,CAACC,SAAL,CAAelB,MAAf,CAAD,CAdI,CAAP;EAeAJ,WAAW,CAACG,MAAD,EAAS,UAACO,CAAD;IAAA,OAAOH,KAAK,CAACI,GAAN,CAAUY,UAAU,CAACb,CAAD,CAApB,CAAP;EAAA,CAAT,CAAX;EACA,OAAOH,KAAP;AACH;;AAED,SAASL,SAAT"},"metadata":{},"sourceType":"module"}
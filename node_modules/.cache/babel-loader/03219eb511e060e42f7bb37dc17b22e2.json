{"ast":null,"code":"import { mix } from 'popmotion';\nimport { complex } from 'style-value-types';\nimport { cssVariableRegex } from '../../render/dom/utils/css-variables-conversion.mjs';\nconst varToken = \"_$css\";\nconst correctBoxShadow = {\n  correct: (latest, _ref) => {\n    let {\n      treeScale,\n      projectionDelta\n    } = _ref;\n    const original = latest;\n    /**\r\n     * We need to first strip and store CSS variables from the string.\r\n     */\n\n    const containsCSSVariables = latest.includes(\"var(\");\n    const cssVariables = [];\n\n    if (containsCSSVariables) {\n      latest = latest.replace(cssVariableRegex, match => {\n        cssVariables.push(match);\n        return varToken;\n      });\n    }\n\n    const shadow = complex.parse(latest); // TODO: Doesn't support multiple shadows\n\n    if (shadow.length > 5) return original;\n    const template = complex.createTransformer(latest);\n    const offset = typeof shadow[0] !== \"number\" ? 1 : 0; // Calculate the overall context scale\n\n    const xScale = projectionDelta.x.scale * treeScale.x;\n    const yScale = projectionDelta.y.scale * treeScale.y;\n    shadow[0 + offset] /= xScale;\n    shadow[1 + offset] /= yScale;\n    /**\r\n     * Ideally we'd correct x and y scales individually, but because blur and\r\n     * spread apply to both we have to take a scale average and apply that instead.\r\n     * We could potentially improve the outcome of this by incorporating the ratio between\r\n     * the two scales.\r\n     */\n\n    const averageScale = mix(xScale, yScale, 0.5); // Blur\n\n    if (typeof shadow[2 + offset] === \"number\") shadow[2 + offset] /= averageScale; // Spread\n\n    if (typeof shadow[3 + offset] === \"number\") shadow[3 + offset] /= averageScale;\n    let output = template(shadow);\n\n    if (containsCSSVariables) {\n      let i = 0;\n      output = output.replace(varToken, () => {\n        const cssVariable = cssVariables[i];\n        i++;\n        return cssVariable;\n      });\n    }\n\n    return output;\n  }\n};\nexport { correctBoxShadow };","map":{"version":3,"names":["mix","complex","cssVariableRegex","varToken","correctBoxShadow","correct","latest","treeScale","projectionDelta","original","containsCSSVariables","includes","cssVariables","replace","match","push","shadow","parse","length","template","createTransformer","offset","xScale","x","scale","yScale","y","averageScale","output","i","cssVariable"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs"],"sourcesContent":["import { mix } from 'popmotion';\r\nimport { complex } from 'style-value-types';\r\nimport { cssVariableRegex } from '../../render/dom/utils/css-variables-conversion.mjs';\r\n\r\nconst varToken = \"_$css\";\r\nconst correctBoxShadow = {\r\n    correct: (latest, { treeScale, projectionDelta }) => {\r\n        const original = latest;\r\n        /**\r\n         * We need to first strip and store CSS variables from the string.\r\n         */\r\n        const containsCSSVariables = latest.includes(\"var(\");\r\n        const cssVariables = [];\r\n        if (containsCSSVariables) {\r\n            latest = latest.replace(cssVariableRegex, (match) => {\r\n                cssVariables.push(match);\r\n                return varToken;\r\n            });\r\n        }\r\n        const shadow = complex.parse(latest);\r\n        // TODO: Doesn't support multiple shadows\r\n        if (shadow.length > 5)\r\n            return original;\r\n        const template = complex.createTransformer(latest);\r\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\r\n        // Calculate the overall context scale\r\n        const xScale = projectionDelta.x.scale * treeScale.x;\r\n        const yScale = projectionDelta.y.scale * treeScale.y;\r\n        shadow[0 + offset] /= xScale;\r\n        shadow[1 + offset] /= yScale;\r\n        /**\r\n         * Ideally we'd correct x and y scales individually, but because blur and\r\n         * spread apply to both we have to take a scale average and apply that instead.\r\n         * We could potentially improve the outcome of this by incorporating the ratio between\r\n         * the two scales.\r\n         */\r\n        const averageScale = mix(xScale, yScale, 0.5);\r\n        // Blur\r\n        if (typeof shadow[2 + offset] === \"number\")\r\n            shadow[2 + offset] /= averageScale;\r\n        // Spread\r\n        if (typeof shadow[3 + offset] === \"number\")\r\n            shadow[3 + offset] /= averageScale;\r\n        let output = template(shadow);\r\n        if (containsCSSVariables) {\r\n            let i = 0;\r\n            output = output.replace(varToken, () => {\r\n                const cssVariable = cssVariables[i];\r\n                i++;\r\n                return cssVariable;\r\n            });\r\n        }\r\n        return output;\r\n    },\r\n};\r\n\r\nexport { correctBoxShadow };\r\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,gBAAT,QAAiC,qDAAjC;AAEA,MAAMC,QAAQ,GAAG,OAAjB;AACA,MAAMC,gBAAgB,GAAG;EACrBC,OAAO,EAAE,CAACC,MAAD,WAA4C;IAAA,IAAnC;MAAEC,SAAF;MAAaC;IAAb,CAAmC;IACjD,MAAMC,QAAQ,GAAGH,MAAjB;IACA;AACR;AACA;;IACQ,MAAMI,oBAAoB,GAAGJ,MAAM,CAACK,QAAP,CAAgB,MAAhB,CAA7B;IACA,MAAMC,YAAY,GAAG,EAArB;;IACA,IAAIF,oBAAJ,EAA0B;MACtBJ,MAAM,GAAGA,MAAM,CAACO,OAAP,CAAeX,gBAAf,EAAkCY,KAAD,IAAW;QACjDF,YAAY,CAACG,IAAb,CAAkBD,KAAlB;QACA,OAAOX,QAAP;MACH,CAHQ,CAAT;IAIH;;IACD,MAAMa,MAAM,GAAGf,OAAO,CAACgB,KAAR,CAAcX,MAAd,CAAf,CAbiD,CAcjD;;IACA,IAAIU,MAAM,CAACE,MAAP,GAAgB,CAApB,EACI,OAAOT,QAAP;IACJ,MAAMU,QAAQ,GAAGlB,OAAO,CAACmB,iBAAR,CAA0Bd,MAA1B,CAAjB;IACA,MAAMe,MAAM,GAAG,OAAOL,MAAM,CAAC,CAAD,CAAb,KAAqB,QAArB,GAAgC,CAAhC,GAAoC,CAAnD,CAlBiD,CAmBjD;;IACA,MAAMM,MAAM,GAAGd,eAAe,CAACe,CAAhB,CAAkBC,KAAlB,GAA0BjB,SAAS,CAACgB,CAAnD;IACA,MAAME,MAAM,GAAGjB,eAAe,CAACkB,CAAhB,CAAkBF,KAAlB,GAA0BjB,SAAS,CAACmB,CAAnD;IACAV,MAAM,CAAC,IAAIK,MAAL,CAAN,IAAsBC,MAAtB;IACAN,MAAM,CAAC,IAAIK,MAAL,CAAN,IAAsBI,MAAtB;IACA;AACR;AACA;AACA;AACA;AACA;;IACQ,MAAME,YAAY,GAAG3B,GAAG,CAACsB,MAAD,EAASG,MAAT,EAAiB,GAAjB,CAAxB,CA9BiD,CA+BjD;;IACA,IAAI,OAAOT,MAAM,CAAC,IAAIK,MAAL,CAAb,KAA8B,QAAlC,EACIL,MAAM,CAAC,IAAIK,MAAL,CAAN,IAAsBM,YAAtB,CAjC6C,CAkCjD;;IACA,IAAI,OAAOX,MAAM,CAAC,IAAIK,MAAL,CAAb,KAA8B,QAAlC,EACIL,MAAM,CAAC,IAAIK,MAAL,CAAN,IAAsBM,YAAtB;IACJ,IAAIC,MAAM,GAAGT,QAAQ,CAACH,MAAD,CAArB;;IACA,IAAIN,oBAAJ,EAA0B;MACtB,IAAImB,CAAC,GAAG,CAAR;MACAD,MAAM,GAAGA,MAAM,CAACf,OAAP,CAAeV,QAAf,EAAyB,MAAM;QACpC,MAAM2B,WAAW,GAAGlB,YAAY,CAACiB,CAAD,CAAhC;QACAA,CAAC;QACD,OAAOC,WAAP;MACH,CAJQ,CAAT;IAKH;;IACD,OAAOF,MAAP;EACH;AAhDoB,CAAzB;AAmDA,SAASxB,gBAAT"},"metadata":{},"sourceType":"module"}
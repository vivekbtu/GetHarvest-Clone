{"ast":null,"code":"import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n/**\r\n * Creates a ref function that, when called, hydrates the provided\r\n * external ref and VisualElement.\r\n */\n\nfunction useMotionRef(visualState, visualElement, externalRef) {\n  return useCallback(function (instance) {\n    var _a;\n\n    instance && ((_a = visualState.mount) === null || _a === void 0 ? void 0 : _a.call(visualState, instance));\n\n    if (visualElement) {\n      instance ? visualElement.mount(instance) : visualElement.unmount();\n    }\n\n    if (externalRef) {\n      if (typeof externalRef === \"function\") {\n        externalRef(instance);\n      } else if (isRefObject(externalRef)) {\n        externalRef.current = instance;\n      }\n    }\n  },\n  /**\r\n   * Only pass a new ref callback to React if we've received a visual element\r\n   * factory. Otherwise we'll be mounting/remounting every time externalRef\r\n   * or other dependencies change.\r\n   */\n  [visualElement]);\n}\n\nexport { useMotionRef };","map":{"version":3,"names":["useCallback","isRefObject","useMotionRef","visualState","visualElement","externalRef","instance","_a","mount","call","unmount","current"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs"],"sourcesContent":["import { useCallback } from 'react';\r\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\r\n\r\n/**\r\n * Creates a ref function that, when called, hydrates the provided\r\n * external ref and VisualElement.\r\n */\r\nfunction useMotionRef(visualState, visualElement, externalRef) {\r\n    return useCallback((instance) => {\r\n        var _a;\r\n        instance && ((_a = visualState.mount) === null || _a === void 0 ? void 0 : _a.call(visualState, instance));\r\n        if (visualElement) {\r\n            instance\r\n                ? visualElement.mount(instance)\r\n                : visualElement.unmount();\r\n        }\r\n        if (externalRef) {\r\n            if (typeof externalRef === \"function\") {\r\n                externalRef(instance);\r\n            }\r\n            else if (isRefObject(externalRef)) {\r\n                externalRef.current = instance;\r\n            }\r\n        }\r\n    }, \r\n    /**\r\n     * Only pass a new ref callback to React if we've received a visual element\r\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\r\n     * or other dependencies change.\r\n     */\r\n    [visualElement]);\r\n}\r\n\r\nexport { useMotionRef };\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,+BAA5B;AAEA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsBC,WAAtB,EAAmCC,aAAnC,EAAkDC,WAAlD,EAA+D;EAC3D,OAAOL,WAAW,CAAC,UAACM,QAAD,EAAc;IAC7B,IAAIC,EAAJ;;IACAD,QAAQ,KAAK,CAACC,EAAE,GAAGJ,WAAW,CAACK,KAAlB,MAA6B,IAA7B,IAAqCD,EAAE,KAAK,KAAK,CAAjD,GAAqD,KAAK,CAA1D,GAA8DA,EAAE,CAACE,IAAH,CAAQN,WAAR,EAAqBG,QAArB,CAAnE,CAAR;;IACA,IAAIF,aAAJ,EAAmB;MACfE,QAAQ,GACFF,aAAa,CAACI,KAAd,CAAoBF,QAApB,CADE,GAEFF,aAAa,CAACM,OAAd,EAFN;IAGH;;IACD,IAAIL,WAAJ,EAAiB;MACb,IAAI,OAAOA,WAAP,KAAuB,UAA3B,EAAuC;QACnCA,WAAW,CAACC,QAAD,CAAX;MACH,CAFD,MAGK,IAAIL,WAAW,CAACI,WAAD,CAAf,EAA8B;QAC/BA,WAAW,CAACM,OAAZ,GAAsBL,QAAtB;MACH;IACJ;EACJ,CAhBiB;EAiBlB;AACJ;AACA;AACA;AACA;EACI,CAACF,aAAD,CAtBkB,CAAlB;AAuBH;;AAED,SAASF,YAAT"},"metadata":{},"sourceType":"module"}
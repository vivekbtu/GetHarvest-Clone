{"ast":null,"code":"import _slicedToArray from \"C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { mix } from 'popmotion';\nimport { percent } from 'style-value-types';\nimport { scalePoint } from './delta-apply.mjs';\n/**\r\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\r\n */\n\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n  point -= translate;\n  point = scalePoint(point, 1 / scale, originPoint);\n\n  if (boxScale !== undefined) {\n    point = scalePoint(point, 1 / boxScale, originPoint);\n  }\n\n  return point;\n}\n/**\r\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\r\n */\n\n\nfunction removeAxisDelta(axis) {\n  var translate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var origin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;\n  var boxScale = arguments.length > 4 ? arguments[4] : undefined;\n  var originAxis = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : axis;\n  var sourceAxis = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : axis;\n\n  if (percent.test(translate)) {\n    translate = parseFloat(translate);\n    var relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n    translate = relativeProgress - sourceAxis.min;\n  }\n\n  if (typeof translate !== \"number\") return;\n  var originPoint = mix(originAxis.min, originAxis.max, origin);\n  if (axis === originAxis) originPoint -= translate;\n  axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n  axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\r\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\r\n * and acts as a bridge between motion values and removeAxisDelta\r\n */\n\n\nfunction removeAxisTransforms(axis, transforms, _ref, origin, sourceAxis) {\n  var _ref2 = _slicedToArray(_ref, 3),\n      key = _ref2[0],\n      scaleKey = _ref2[1],\n      originKey = _ref2[2];\n\n  removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\r\n * The names of the motion values we want to apply as translation, scale and origin.\r\n */\n\n\nvar xKeys = [\"x\", \"scaleX\", \"originX\"];\nvar yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\r\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\r\n * and acts as a bridge between motion values and removeAxisDelta\r\n */\n\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n  removeAxisTransforms(box.x, transforms, xKeys, originBox === null || originBox === void 0 ? void 0 : originBox.x, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.x);\n  removeAxisTransforms(box.y, transforms, yKeys, originBox === null || originBox === void 0 ? void 0 : originBox.y, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.y);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };","map":{"version":3,"names":["mix","percent","scalePoint","removePointDelta","point","translate","scale","originPoint","boxScale","undefined","removeAxisDelta","axis","origin","originAxis","sourceAxis","test","parseFloat","relativeProgress","min","max","removeAxisTransforms","transforms","key","scaleKey","originKey","xKeys","yKeys","removeBoxTransforms","box","originBox","sourceBox","x","y"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs"],"sourcesContent":["import { mix } from 'popmotion';\r\nimport { percent } from 'style-value-types';\r\nimport { scalePoint } from './delta-apply.mjs';\r\n\r\n/**\r\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\r\n */\r\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\r\n    point -= translate;\r\n    point = scalePoint(point, 1 / scale, originPoint);\r\n    if (boxScale !== undefined) {\r\n        point = scalePoint(point, 1 / boxScale, originPoint);\r\n    }\r\n    return point;\r\n}\r\n/**\r\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\r\n */\r\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\r\n    if (percent.test(translate)) {\r\n        translate = parseFloat(translate);\r\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\r\n        translate = relativeProgress - sourceAxis.min;\r\n    }\r\n    if (typeof translate !== \"number\")\r\n        return;\r\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\r\n    if (axis === originAxis)\r\n        originPoint -= translate;\r\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\r\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\r\n}\r\n/**\r\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\r\n * and acts as a bridge between motion values and removeAxisDelta\r\n */\r\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\r\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\r\n}\r\n/**\r\n * The names of the motion values we want to apply as translation, scale and origin.\r\n */\r\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\r\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\r\n/**\r\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\r\n * and acts as a bridge between motion values and removeAxisDelta\r\n */\r\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\r\n    removeAxisTransforms(box.x, transforms, xKeys, originBox === null || originBox === void 0 ? void 0 : originBox.x, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.x);\r\n    removeAxisTransforms(box.y, transforms, yKeys, originBox === null || originBox === void 0 ? void 0 : originBox.y, sourceBox === null || sourceBox === void 0 ? void 0 : sourceBox.y);\r\n}\r\n\r\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
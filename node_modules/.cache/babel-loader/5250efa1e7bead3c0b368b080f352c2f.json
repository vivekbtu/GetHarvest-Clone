{"ast":null,"code":"import _defineProperty from \"C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { getAnimationData, getMotionValue } from './data.es.js';\nimport { isCssVar, registerCssVariable } from './utils/css-var.es.js';\nimport { Animation } from '@motionone/animation';\nimport { defaults, isEasingGenerator, isFunction, isEasingList, isNumber, time, noop } from '@motionone/utils';\nimport { isTransform, addTransformToElement, transformDefinitions } from './utils/transforms.es.js';\nimport { convertEasing } from './utils/easing.es.js';\nimport { supports } from './utils/feature-detection.es.js';\nimport { hydrateKeyframes, keyframesList } from './utils/keyframes.es.js';\nimport { style } from './style.es.js';\nimport { getStyleName } from './utils/get-style-name.es.js';\nimport { stopAnimation } from './utils/stop-animation.es.js';\n\nfunction getDevToolsRecord() {\n  return window.__MOTION_DEV_TOOLS_RECORD;\n}\n\nfunction animateStyle(element, key, keyframesDefinition) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var record = getDevToolsRecord();\n  var isRecording = options.record !== false && record;\n  var animation;\n  var _options$duration = options.duration,\n      duration = _options$duration === void 0 ? defaults.duration : _options$duration,\n      _options$delay = options.delay,\n      delay = _options$delay === void 0 ? defaults.delay : _options$delay,\n      _options$endDelay = options.endDelay,\n      endDelay = _options$endDelay === void 0 ? defaults.endDelay : _options$endDelay,\n      _options$repeat = options.repeat,\n      repeat = _options$repeat === void 0 ? defaults.repeat : _options$repeat,\n      _options$easing = options.easing,\n      easing = _options$easing === void 0 ? defaults.easing : _options$easing,\n      direction = options.direction,\n      offset = options.offset,\n      _options$allowWebkitA = options.allowWebkitAcceleration,\n      allowWebkitAcceleration = _options$allowWebkitA === void 0 ? false : _options$allowWebkitA;\n  var data = getAnimationData(element);\n  var valueIsTransform = isTransform(key);\n  var canAnimateNatively = supports.waapi();\n  /**\r\n   * If this is an individual transform, we need to map its\r\n   * key to a CSS variable and update the element's transform style\r\n   */\n\n  valueIsTransform && addTransformToElement(element, key);\n  var name = getStyleName(key);\n  var motionValue = getMotionValue(data.values, name);\n  /**\r\n   * Get definition of value, this will be used to convert numerical\r\n   * keyframes into the default value type.\r\n   */\n\n  var definition = transformDefinitions.get(name);\n  /**\r\n   * Stop the current animation, if any. Because this will trigger\r\n   * commitStyles (DOM writes) and we might later trigger DOM reads,\r\n   * this is fired now and we return a factory function to create\r\n   * the actual animation that can get called in batch,\r\n   */\n\n  stopAnimation(motionValue.animation, !(isEasingGenerator(easing) && motionValue.generator) && options.record !== false);\n  /**\r\n   * Batchable factory function containing all DOM reads.\r\n   */\n\n  return function () {\n    var readInitialValue = function readInitialValue() {\n      var _a, _b;\n\n      return (_b = (_a = style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0;\n    };\n    /**\r\n     * Replace null values with the previous keyframe value, or read\r\n     * it from the DOM if it's the first keyframe.\r\n     */\n\n\n    var keyframes = hydrateKeyframes(keyframesList(keyframesDefinition), readInitialValue);\n\n    if (isEasingGenerator(easing)) {\n      var custom = easing.createAnimation(keyframes, readInitialValue, valueIsTransform, name, motionValue);\n      easing = custom.easing;\n      if (custom.keyframes !== undefined) keyframes = custom.keyframes;\n      if (custom.duration !== undefined) duration = custom.duration;\n    }\n    /**\r\n     * If this is a CSS variable we need to register it with the browser\r\n     * before it can be animated natively. We also set it with setProperty\r\n     * rather than directly onto the element.style object.\r\n     */\n\n\n    if (isCssVar(name)) {\n      if (supports.cssRegisterProperty()) {\n        registerCssVariable(name);\n      } else {\n        canAnimateNatively = false;\n      }\n    }\n    /**\r\n     * If we've been passed a custom easing function, and this browser\r\n     * does **not** support linear() easing, and the value is a transform\r\n     * (and thus a pure number) we can still support the custom easing\r\n     * by falling back to the animation polyfill.\r\n     */\n\n\n    if (valueIsTransform && !supports.linearEasing() && (isFunction(easing) || isEasingList(easing) && easing.some(isFunction))) {\n      canAnimateNatively = false;\n    }\n    /**\r\n     * If we can animate this value with WAAPI, do so.\r\n     */\n\n\n    if (canAnimateNatively) {\n      var _element$animate;\n\n      /**\r\n       * Convert numbers to default value types. Currently this only supports\r\n       * transforms but it could also support other value types.\r\n       */\n      if (definition) {\n        keyframes = keyframes.map(function (value) {\n          return isNumber(value) ? definition.toDefaultUnit(value) : value;\n        });\n      }\n      /**\r\n       * If this browser doesn't support partial/implicit keyframes we need to\r\n       * explicitly provide one.\r\n       */\n\n\n      if (keyframes.length === 1 && (!supports.partialKeyframes() || isRecording)) {\n        keyframes.unshift(readInitialValue());\n      }\n\n      var animationOptions = {\n        delay: time.ms(delay),\n        duration: time.ms(duration),\n        endDelay: time.ms(endDelay),\n        easing: !isEasingList(easing) ? convertEasing(easing, duration) : undefined,\n        direction: direction,\n        iterations: repeat + 1,\n        fill: \"both\"\n      };\n      animation = element.animate((_element$animate = {}, _defineProperty(_element$animate, name, keyframes), _defineProperty(_element$animate, \"offset\", offset), _defineProperty(_element$animate, \"easing\", isEasingList(easing) ? easing.map(function (thisEasing) {\n        return convertEasing(thisEasing, duration);\n      }) : undefined), _element$animate), animationOptions);\n      /**\r\n       * Polyfill finished Promise in browsers that don't support it\r\n       */\n\n      if (!animation.finished) {\n        animation.finished = new Promise(function (resolve, reject) {\n          animation.onfinish = resolve;\n          animation.oncancel = reject;\n        });\n      }\n\n      var target = keyframes[keyframes.length - 1];\n      animation.finished.then(function () {\n        // Apply styles to target\n        style.set(element, name, target); // Ensure fill modes don't persist\n\n        animation.cancel();\n      }).catch(noop);\n      /**\r\n       * This forces Webkit to run animations on the main thread by exploiting\r\n       * this condition:\r\n       * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\r\n       *\r\n       * This fixes Webkit's timing bugs, like accelerated animations falling\r\n       * out of sync with main thread animations and massive delays in starting\r\n       * accelerated animations in WKWebView.\r\n       */\n\n      if (!allowWebkitAcceleration) animation.playbackRate = 1.000001;\n      /**\r\n       * If we can't animate the value natively then we can fallback to the numbers-only\r\n       * polyfill for transforms.\r\n       */\n    } else if (valueIsTransform) {\n      /**\r\n       * If any keyframe is a string (because we measured it from the DOM), we need to convert\r\n       * it into a number before passing to the Animation polyfill.\r\n       */\n      keyframes = keyframes.map(function (value) {\n        return typeof value === \"string\" ? parseFloat(value) : value;\n      });\n      /**\r\n       * If we only have a single keyframe, we need to create an initial keyframe by reading\r\n       * the current value from the DOM.\r\n       */\n\n      if (keyframes.length === 1) {\n        keyframes.unshift(parseFloat(readInitialValue()));\n      }\n\n      var render = function render(latest) {\n        if (definition) latest = definition.toDefaultUnit(latest);\n        style.set(element, name, latest);\n      };\n\n      animation = new Animation(render, keyframes, Object.assign(Object.assign({}, options), {\n        duration: duration,\n        easing: easing\n      }));\n    } else {\n      var _target = keyframes[keyframes.length - 1];\n      style.set(element, name, definition && isNumber(_target) ? definition.toDefaultUnit(_target) : _target);\n    }\n\n    if (isRecording) {\n      record(element, key, keyframes, {\n        duration: duration,\n        delay: delay,\n        easing: easing,\n        repeat: repeat,\n        offset: offset\n      }, \"motion-one\");\n    }\n\n    motionValue.setAnimation(animation);\n    return animation;\n  };\n}\n\nexport { animateStyle };","map":{"version":3,"names":["getAnimationData","getMotionValue","isCssVar","registerCssVariable","Animation","defaults","isEasingGenerator","isFunction","isEasingList","isNumber","time","noop","isTransform","addTransformToElement","transformDefinitions","convertEasing","supports","hydrateKeyframes","keyframesList","style","getStyleName","stopAnimation","getDevToolsRecord","window","__MOTION_DEV_TOOLS_RECORD","animateStyle","element","key","keyframesDefinition","options","record","isRecording","animation","duration","delay","endDelay","repeat","easing","direction","offset","allowWebkitAcceleration","data","valueIsTransform","canAnimateNatively","waapi","name","motionValue","values","definition","get","generator","readInitialValue","_a","_b","initialValue","keyframes","custom","createAnimation","undefined","cssRegisterProperty","linearEasing","some","map","value","toDefaultUnit","length","partialKeyframes","unshift","animationOptions","ms","iterations","fill","animate","thisEasing","finished","Promise","resolve","reject","onfinish","oncancel","target","then","set","cancel","catch","playbackRate","parseFloat","render","latest","Object","assign","setAnimation"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@motionone/dom/dist/animate/animate-style.es.js"],"sourcesContent":["import { getAnimationData, getMotionValue } from './data.es.js';\r\nimport { isCssVar, registerCssVariable } from './utils/css-var.es.js';\r\nimport { Animation } from '@motionone/animation';\r\nimport { defaults, isEasingGenerator, isFunction, isEasingList, isNumber, time, noop } from '@motionone/utils';\r\nimport { isTransform, addTransformToElement, transformDefinitions } from './utils/transforms.es.js';\r\nimport { convertEasing } from './utils/easing.es.js';\r\nimport { supports } from './utils/feature-detection.es.js';\r\nimport { hydrateKeyframes, keyframesList } from './utils/keyframes.es.js';\r\nimport { style } from './style.es.js';\r\nimport { getStyleName } from './utils/get-style-name.es.js';\r\nimport { stopAnimation } from './utils/stop-animation.es.js';\r\n\r\nfunction getDevToolsRecord() {\r\n    return window.__MOTION_DEV_TOOLS_RECORD;\r\n}\r\nfunction animateStyle(element, key, keyframesDefinition, options = {}) {\r\n    const record = getDevToolsRecord();\r\n    const isRecording = options.record !== false && record;\r\n    let animation;\r\n    let { duration = defaults.duration, delay = defaults.delay, endDelay = defaults.endDelay, repeat = defaults.repeat, easing = defaults.easing, direction, offset, allowWebkitAcceleration = false, } = options;\r\n    const data = getAnimationData(element);\r\n    const valueIsTransform = isTransform(key);\r\n    let canAnimateNatively = supports.waapi();\r\n    /**\r\n     * If this is an individual transform, we need to map its\r\n     * key to a CSS variable and update the element's transform style\r\n     */\r\n    valueIsTransform && addTransformToElement(element, key);\r\n    const name = getStyleName(key);\r\n    const motionValue = getMotionValue(data.values, name);\r\n    /**\r\n     * Get definition of value, this will be used to convert numerical\r\n     * keyframes into the default value type.\r\n     */\r\n    const definition = transformDefinitions.get(name);\r\n    /**\r\n     * Stop the current animation, if any. Because this will trigger\r\n     * commitStyles (DOM writes) and we might later trigger DOM reads,\r\n     * this is fired now and we return a factory function to create\r\n     * the actual animation that can get called in batch,\r\n     */\r\n    stopAnimation(motionValue.animation, !(isEasingGenerator(easing) && motionValue.generator) &&\r\n        options.record !== false);\r\n    /**\r\n     * Batchable factory function containing all DOM reads.\r\n     */\r\n    return () => {\r\n        const readInitialValue = () => { var _a, _b; return (_b = (_a = style.get(element, name)) !== null && _a !== void 0 ? _a : definition === null || definition === void 0 ? void 0 : definition.initialValue) !== null && _b !== void 0 ? _b : 0; };\r\n        /**\r\n         * Replace null values with the previous keyframe value, or read\r\n         * it from the DOM if it's the first keyframe.\r\n         */\r\n        let keyframes = hydrateKeyframes(keyframesList(keyframesDefinition), readInitialValue);\r\n        if (isEasingGenerator(easing)) {\r\n            const custom = easing.createAnimation(keyframes, readInitialValue, valueIsTransform, name, motionValue);\r\n            easing = custom.easing;\r\n            if (custom.keyframes !== undefined)\r\n                keyframes = custom.keyframes;\r\n            if (custom.duration !== undefined)\r\n                duration = custom.duration;\r\n        }\r\n        /**\r\n         * If this is a CSS variable we need to register it with the browser\r\n         * before it can be animated natively. We also set it with setProperty\r\n         * rather than directly onto the element.style object.\r\n         */\r\n        if (isCssVar(name)) {\r\n            if (supports.cssRegisterProperty()) {\r\n                registerCssVariable(name);\r\n            }\r\n            else {\r\n                canAnimateNatively = false;\r\n            }\r\n        }\r\n        /**\r\n         * If we've been passed a custom easing function, and this browser\r\n         * does **not** support linear() easing, and the value is a transform\r\n         * (and thus a pure number) we can still support the custom easing\r\n         * by falling back to the animation polyfill.\r\n         */\r\n        if (valueIsTransform &&\r\n            !supports.linearEasing() &&\r\n            (isFunction(easing) || (isEasingList(easing) && easing.some(isFunction)))) {\r\n            canAnimateNatively = false;\r\n        }\r\n        /**\r\n         * If we can animate this value with WAAPI, do so.\r\n         */\r\n        if (canAnimateNatively) {\r\n            /**\r\n             * Convert numbers to default value types. Currently this only supports\r\n             * transforms but it could also support other value types.\r\n             */\r\n            if (definition) {\r\n                keyframes = keyframes.map((value) => isNumber(value) ? definition.toDefaultUnit(value) : value);\r\n            }\r\n            /**\r\n             * If this browser doesn't support partial/implicit keyframes we need to\r\n             * explicitly provide one.\r\n             */\r\n            if (keyframes.length === 1 &&\r\n                (!supports.partialKeyframes() || isRecording)) {\r\n                keyframes.unshift(readInitialValue());\r\n            }\r\n            const animationOptions = {\r\n                delay: time.ms(delay),\r\n                duration: time.ms(duration),\r\n                endDelay: time.ms(endDelay),\r\n                easing: !isEasingList(easing)\r\n                    ? convertEasing(easing, duration)\r\n                    : undefined,\r\n                direction,\r\n                iterations: repeat + 1,\r\n                fill: \"both\",\r\n            };\r\n            animation = element.animate({\r\n                [name]: keyframes,\r\n                offset,\r\n                easing: isEasingList(easing)\r\n                    ? easing.map((thisEasing) => convertEasing(thisEasing, duration))\r\n                    : undefined,\r\n            }, animationOptions);\r\n            /**\r\n             * Polyfill finished Promise in browsers that don't support it\r\n             */\r\n            if (!animation.finished) {\r\n                animation.finished = new Promise((resolve, reject) => {\r\n                    animation.onfinish = resolve;\r\n                    animation.oncancel = reject;\r\n                });\r\n            }\r\n            const target = keyframes[keyframes.length - 1];\r\n            animation.finished\r\n                .then(() => {\r\n                // Apply styles to target\r\n                style.set(element, name, target);\r\n                // Ensure fill modes don't persist\r\n                animation.cancel();\r\n            })\r\n                .catch(noop);\r\n            /**\r\n             * This forces Webkit to run animations on the main thread by exploiting\r\n             * this condition:\r\n             * https://trac.webkit.org/browser/webkit/trunk/Source/WebCore/platform/graphics/ca/GraphicsLayerCA.cpp?rev=281238#L1099\r\n             *\r\n             * This fixes Webkit's timing bugs, like accelerated animations falling\r\n             * out of sync with main thread animations and massive delays in starting\r\n             * accelerated animations in WKWebView.\r\n             */\r\n            if (!allowWebkitAcceleration)\r\n                animation.playbackRate = 1.000001;\r\n            /**\r\n             * If we can't animate the value natively then we can fallback to the numbers-only\r\n             * polyfill for transforms.\r\n             */\r\n        }\r\n        else if (valueIsTransform) {\r\n            /**\r\n             * If any keyframe is a string (because we measured it from the DOM), we need to convert\r\n             * it into a number before passing to the Animation polyfill.\r\n             */\r\n            keyframes = keyframes.map((value) => typeof value === \"string\" ? parseFloat(value) : value);\r\n            /**\r\n             * If we only have a single keyframe, we need to create an initial keyframe by reading\r\n             * the current value from the DOM.\r\n             */\r\n            if (keyframes.length === 1) {\r\n                keyframes.unshift(parseFloat(readInitialValue()));\r\n            }\r\n            const render = (latest) => {\r\n                if (definition)\r\n                    latest = definition.toDefaultUnit(latest);\r\n                style.set(element, name, latest);\r\n            };\r\n            animation = new Animation(render, keyframes, Object.assign(Object.assign({}, options), { duration,\r\n                easing }));\r\n        }\r\n        else {\r\n            const target = keyframes[keyframes.length - 1];\r\n            style.set(element, name, definition && isNumber(target)\r\n                ? definition.toDefaultUnit(target)\r\n                : target);\r\n        }\r\n        if (isRecording) {\r\n            record(element, key, keyframes, {\r\n                duration,\r\n                delay: delay,\r\n                easing,\r\n                repeat,\r\n                offset,\r\n            }, \"motion-one\");\r\n        }\r\n        motionValue.setAnimation(animation);\r\n        return animation;\r\n    };\r\n}\r\n\r\nexport { animateStyle };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
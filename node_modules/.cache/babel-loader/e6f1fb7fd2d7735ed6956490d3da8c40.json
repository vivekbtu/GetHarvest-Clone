{"ast":null,"code":"import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n/**\r\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\r\n * to access information about whether it's still present in the React tree.\r\n *\r\n * ```jsx\r\n * import { usePresence } from \"framer-motion\"\r\n *\r\n * export const Component = () => {\r\n *   const [isPresent, safeToRemove] = usePresence()\r\n *\r\n *   useEffect(() => {\r\n *     !isPresent && setTimeout(safeToRemove, 1000)\r\n *   }, [isPresent])\r\n *\r\n *   return <div />\r\n * }\r\n * ```\r\n *\r\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\r\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\r\n *\r\n * @public\r\n */\n\nfunction usePresence() {\n  const context = useContext(PresenceContext);\n  if (context === null) return [true, null];\n  const {\n    isPresent,\n    onExitComplete,\n    register\n  } = context; // It's safe to call the following hooks conditionally (after an early return) because the context will always\n  // either be null or non-null for the lifespan of the component.\n  // Replace with useId when released in React\n\n  const id = useId();\n  useEffect(() => register(id), []);\n\n  const safeToRemove = () => onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id);\n\n  return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\r\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\r\n * There is no `safeToRemove` function.\r\n *\r\n * ```jsx\r\n * import { useIsPresent } from \"framer-motion\"\r\n *\r\n * export const Component = () => {\r\n *   const isPresent = useIsPresent()\r\n *\r\n *   useEffect(() => {\r\n *     !isPresent && console.log(\"I've been removed!\")\r\n *   }, [isPresent])\r\n *\r\n *   return <div />\r\n * }\r\n * ```\r\n *\r\n * @public\r\n */\n\n\nfunction useIsPresent() {\n  return isPresent(useContext(PresenceContext));\n}\n\nfunction isPresent(context) {\n  return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };","map":{"version":3,"names":["useContext","useId","useEffect","PresenceContext","usePresence","context","isPresent","onExitComplete","register","id","safeToRemove","useIsPresent"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs"],"sourcesContent":["import { useContext, useId, useEffect } from 'react';\r\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\r\n\r\n/**\r\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\r\n * to access information about whether it's still present in the React tree.\r\n *\r\n * ```jsx\r\n * import { usePresence } from \"framer-motion\"\r\n *\r\n * export const Component = () => {\r\n *   const [isPresent, safeToRemove] = usePresence()\r\n *\r\n *   useEffect(() => {\r\n *     !isPresent && setTimeout(safeToRemove, 1000)\r\n *   }, [isPresent])\r\n *\r\n *   return <div />\r\n * }\r\n * ```\r\n *\r\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\r\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\r\n *\r\n * @public\r\n */\r\nfunction usePresence() {\r\n    const context = useContext(PresenceContext);\r\n    if (context === null)\r\n        return [true, null];\r\n    const { isPresent, onExitComplete, register } = context;\r\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\r\n    // either be null or non-null for the lifespan of the component.\r\n    // Replace with useId when released in React\r\n    const id = useId();\r\n    useEffect(() => register(id), []);\r\n    const safeToRemove = () => onExitComplete === null || onExitComplete === void 0 ? void 0 : onExitComplete(id);\r\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\r\n}\r\n/**\r\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\r\n * There is no `safeToRemove` function.\r\n *\r\n * ```jsx\r\n * import { useIsPresent } from \"framer-motion\"\r\n *\r\n * export const Component = () => {\r\n *   const isPresent = useIsPresent()\r\n *\r\n *   useEffect(() => {\r\n *     !isPresent && console.log(\"I've been removed!\")\r\n *   }, [isPresent])\r\n *\r\n *   return <div />\r\n * }\r\n * ```\r\n *\r\n * @public\r\n */\r\nfunction useIsPresent() {\r\n    return isPresent(useContext(PresenceContext));\r\n}\r\nfunction isPresent(context) {\r\n    return context === null ? true : context.isPresent;\r\n}\r\n\r\nexport { isPresent, useIsPresent, usePresence };\r\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,KAArB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,eAAT,QAAgC,mCAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,GAAuB;EACnB,MAAMC,OAAO,GAAGL,UAAU,CAACG,eAAD,CAA1B;EACA,IAAIE,OAAO,KAAK,IAAhB,EACI,OAAO,CAAC,IAAD,EAAO,IAAP,CAAP;EACJ,MAAM;IAAEC,SAAF;IAAaC,cAAb;IAA6BC;EAA7B,IAA0CH,OAAhD,CAJmB,CAKnB;EACA;EACA;;EACA,MAAMI,EAAE,GAAGR,KAAK,EAAhB;EACAC,SAAS,CAAC,MAAMM,QAAQ,CAACC,EAAD,CAAf,EAAqB,EAArB,CAAT;;EACA,MAAMC,YAAY,GAAG,MAAMH,cAAc,KAAK,IAAnB,IAA2BA,cAAc,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,cAAc,CAACE,EAAD,CAAzG;;EACA,OAAO,CAACH,SAAD,IAAcC,cAAd,GAA+B,CAAC,KAAD,EAAQG,YAAR,CAA/B,GAAuD,CAAC,IAAD,CAA9D;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,GAAwB;EACpB,OAAOL,SAAS,CAACN,UAAU,CAACG,eAAD,CAAX,CAAhB;AACH;;AACD,SAASG,SAAT,CAAmBD,OAAnB,EAA4B;EACxB,OAAOA,OAAO,KAAK,IAAZ,GAAmB,IAAnB,GAA0BA,OAAO,CAACC,SAAzC;AACH;;AAED,SAASA,SAAT,EAAoBK,YAApB,EAAkCP,WAAlC"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nvar shouldForward = function shouldForward(key) {\n  return !isValidMotionProp(key);\n};\n\nfunction loadExternalIsValidProp(isValidProp) {\n  if (!isValidProp) return; // Explicitly filter our events\n\n  shouldForward = function shouldForward(key) {\n    return key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n  };\n}\n/**\r\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\r\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\r\n * of these should be passed to the underlying DOM node.\r\n *\r\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\r\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\r\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\r\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\r\n *\r\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\r\n * actually required.\r\n */\n\n\ntry {\n  /**\r\n   * We attempt to import this package but require won't be defined in esm environments, in that case\r\n   * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\r\n   * in favour of explicit injection.\r\n   */\n  loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n} catch (_a) {// We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\n\nfunction filterProps(props, isDom, forwardMotionProps) {\n  var filteredProps = {};\n\n  for (var key in props) {\n    if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || // If trying to use native HTML drag events, forward drag listeners\n    props[\"draggable\"] && key.startsWith(\"onDrag\")) {\n      filteredProps[key] = props[key];\n    }\n  }\n\n  return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };","map":{"version":3,"names":["isValidMotionProp","shouldForward","key","loadExternalIsValidProp","isValidProp","startsWith","require","default","_a","filterProps","props","isDom","forwardMotionProps","filteredProps"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs"],"sourcesContent":["import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\r\n\r\nlet shouldForward = (key) => !isValidMotionProp(key);\r\nfunction loadExternalIsValidProp(isValidProp) {\r\n    if (!isValidProp)\r\n        return;\r\n    // Explicitly filter our events\r\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\r\n}\r\n/**\r\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\r\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\r\n * of these should be passed to the underlying DOM node.\r\n *\r\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\r\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\r\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\r\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\r\n *\r\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\r\n * actually required.\r\n */\r\ntry {\r\n    /**\r\n     * We attempt to import this package but require won't be defined in esm environments, in that case\r\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\r\n     * in favour of explicit injection.\r\n     */\r\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\r\n}\r\ncatch (_a) {\r\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\r\n}\r\nfunction filterProps(props, isDom, forwardMotionProps) {\r\n    const filteredProps = {};\r\n    for (const key in props) {\r\n        if (shouldForward(key) ||\r\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\r\n            (!isDom && !isValidMotionProp(key)) ||\r\n            // If trying to use native HTML drag events, forward drag listeners\r\n            (props[\"draggable\"] && key.startsWith(\"onDrag\"))) {\r\n            filteredProps[key] = props[key];\r\n        }\r\n    }\r\n    return filteredProps;\r\n}\r\n\r\nexport { filterProps, loadExternalIsValidProp };\r\n"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,sCAAlC;;AAEA,IAAIC,aAAa,GAAG,uBAACC,GAAD;EAAA,OAAS,CAACF,iBAAiB,CAACE,GAAD,CAA3B;AAAA,CAApB;;AACA,SAASC,uBAAT,CAAiCC,WAAjC,EAA8C;EAC1C,IAAI,CAACA,WAAL,EACI,OAFsC,CAG1C;;EACAH,aAAa,GAAG,uBAACC,GAAD;IAAA,OAASA,GAAG,CAACG,UAAJ,CAAe,IAAf,IAAuB,CAACL,iBAAiB,CAACE,GAAD,CAAzC,GAAiDE,WAAW,CAACF,GAAD,CAArE;EAAA,CAAhB;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAI;EACA;AACJ;AACA;AACA;AACA;EACIC,uBAAuB,CAACG,OAAO,CAAC,wBAAD,CAAP,CAAkCC,OAAnC,CAAvB;AACH,CAPD,CAQA,OAAOC,EAAP,EAAW,CACP;AACH;;AACD,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,kBAAnC,EAAuD;EACnD,IAAMC,aAAa,GAAG,EAAtB;;EACA,KAAK,IAAMX,GAAX,IAAkBQ,KAAlB,EAAyB;IACrB,IAAIT,aAAa,CAACC,GAAD,CAAb,IACCU,kBAAkB,KAAK,IAAvB,IAA+BZ,iBAAiB,CAACE,GAAD,CADjD,IAEC,CAACS,KAAD,IAAU,CAACX,iBAAiB,CAACE,GAAD,CAF7B,IAGA;IACCQ,KAAK,CAAC,WAAD,CAAL,IAAsBR,GAAG,CAACG,UAAJ,CAAe,QAAf,CAJ3B,EAIsD;MAClDQ,aAAa,CAACX,GAAD,CAAb,GAAqBQ,KAAK,CAACR,GAAD,CAA1B;IACH;EACJ;;EACD,OAAOW,aAAP;AACH;;AAED,SAASJ,WAAT,EAAsBN,uBAAtB"},"metadata":{},"sourceType":"module"}
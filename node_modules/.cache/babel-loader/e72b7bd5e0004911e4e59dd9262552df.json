{"ast":null,"code":"import { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { startAnimation } from '../../animation/utils/transitions.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\nimport { mix } from 'popmotion';\nimport { percent } from 'style-value-types';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nconst elementDragControls = new WeakMap();\n/**\r\n *\r\n */\n// let latestPointerEvent: AnyPointerEvent\n\nclass VisualElementDragControls {\n  constructor(visualElement) {\n    // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n    this.openGlobalLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * The permitted boundaries of travel, in pixels.\r\n     */\n\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\r\n     * The per-axis resolved elastic values.\r\n     */\n\n    this.elastic = createBox();\n    this.visualElement = visualElement;\n  }\n\n  start(originEvent) {\n    let {\n      snapToCursor = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /**\r\n     * Don't start dragging if this component is exiting\r\n     */\n    if (this.visualElement.isPresent === false) return;\n\n    const onSessionStart = event => {\n      // Stop any animations on both axis values immediately. This allows the user to throw and catch\n      // the component.\n      this.stopAnimation();\n\n      if (snapToCursor) {\n        this.snapToCursor(extractEventInfo(event, \"page\").point);\n      }\n    };\n\n    const onStart = (event, info) => {\n      var _a; // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n\n\n      const {\n        drag,\n        dragPropagation,\n        onDragStart\n      } = this.getProps();\n\n      if (drag && !dragPropagation) {\n        if (this.openGlobalLock) this.openGlobalLock();\n        this.openGlobalLock = getGlobalLock(drag); // If we don 't have the lock, don't start dragging\n\n        if (!this.openGlobalLock) return;\n      }\n\n      this.isDragging = true;\n      this.currentDirection = null;\n      this.resolveConstraints();\n\n      if (this.visualElement.projection) {\n        this.visualElement.projection.isAnimationBlocked = true;\n        this.visualElement.projection.target = undefined;\n      }\n      /**\r\n       * Record gesture origin\r\n       */\n\n\n      eachAxis(axis => {\n        var _a, _b;\n\n        let current = this.getAxisMotionValue(axis).get() || 0;\n        /**\r\n         * If the MotionValue is a percentage value convert to px\r\n         */\n\n        if (percent.test(current)) {\n          const measuredAxis = (_b = (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.actual[axis];\n\n          if (measuredAxis) {\n            const length = calcLength(measuredAxis);\n            current = length * (parseFloat(current) / 100);\n          }\n        }\n\n        this.originPoint[axis] = current;\n      }); // Fire onDragStart event\n\n      onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n      (_a = this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\n    };\n\n    const onMove = (event, info) => {\n      // latestPointerEvent = event\n      const {\n        dragPropagation,\n        dragDirectionLock,\n        onDirectionLock,\n        onDrag\n      } = this.getProps(); // If we didn't successfully receive the gesture lock, early return.\n\n      if (!dragPropagation && !this.openGlobalLock) return;\n      const {\n        offset\n      } = info; // Attempt to detect drag direction if directionLock is true\n\n      if (dragDirectionLock && this.currentDirection === null) {\n        this.currentDirection = getCurrentDirection(offset); // If we've successfully set a direction, notify listener\n\n        if (this.currentDirection !== null) {\n          onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(this.currentDirection);\n        }\n\n        return;\n      } // Update each point with the latest position\n\n\n      this.updateAxis(\"x\", info.point, offset);\n      this.updateAxis(\"y\", info.point, offset);\n      /**\r\n       * Ideally we would leave the renderer to fire naturally at the end of\r\n       * this frame but if the element is about to change layout as the result\r\n       * of a re-render we want to ensure the browser can read the latest\r\n       * bounding box to ensure the pointer and element don't fall out of sync.\r\n       */\n\n      this.visualElement.syncRender();\n      /**\r\n       * This must fire after the syncRender call as it might trigger a state\r\n       * change which itself might trigger a layout update.\r\n       */\n\n      onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n    };\n\n    const onSessionEnd = (event, info) => this.stop(event, info);\n\n    this.panSession = new PanSession(originEvent, {\n      onSessionStart,\n      onStart,\n      onMove,\n      onSessionEnd\n    }, {\n      transformPagePoint: this.visualElement.getTransformPagePoint()\n    });\n  }\n\n  stop(event, info) {\n    const isDragging = this.isDragging;\n    this.cancel();\n    if (!isDragging) return;\n    const {\n      velocity\n    } = info;\n    this.startAnimation(velocity);\n    const {\n      onDragEnd\n    } = this.getProps();\n    onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n  }\n\n  cancel() {\n    var _a, _b;\n\n    this.isDragging = false;\n\n    if (this.visualElement.projection) {\n      this.visualElement.projection.isAnimationBlocked = false;\n    }\n\n    (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n    this.panSession = undefined;\n    const {\n      dragPropagation\n    } = this.getProps();\n\n    if (!dragPropagation && this.openGlobalLock) {\n      this.openGlobalLock();\n      this.openGlobalLock = null;\n    }\n\n    (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n  }\n\n  updateAxis(axis, _point, offset) {\n    const {\n      drag\n    } = this.getProps(); // If we're not dragging this axis, do an early return.\n\n    if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n    const axisValue = this.getAxisMotionValue(axis);\n    let next = this.originPoint[axis] + offset[axis]; // Apply constraints\n\n    if (this.constraints && this.constraints[axis]) {\n      next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n    }\n\n    axisValue.set(next);\n  }\n\n  resolveConstraints() {\n    const {\n      dragConstraints,\n      dragElastic\n    } = this.getProps();\n    const {\n      layout\n    } = this.visualElement.projection || {};\n    const prevConstraints = this.constraints;\n\n    if (dragConstraints && isRefObject(dragConstraints)) {\n      if (!this.constraints) {\n        this.constraints = this.resolveRefConstraints();\n      }\n    } else {\n      if (dragConstraints && layout) {\n        this.constraints = calcRelativeConstraints(layout.actual, dragConstraints);\n      } else {\n        this.constraints = false;\n      }\n    }\n\n    this.elastic = resolveDragElastic(dragElastic);\n    /**\r\n     * If we're outputting to external MotionValues, we want to rebase the measured constraints\r\n     * from viewport-relative to component-relative.\r\n     */\n\n    if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n      eachAxis(axis => {\n        if (this.getAxisMotionValue(axis)) {\n          this.constraints[axis] = rebaseAxisConstraints(layout.actual[axis], this.constraints[axis]);\n        }\n      });\n    }\n  }\n\n  resolveRefConstraints() {\n    const {\n      dragConstraints: constraints,\n      onMeasureDragConstraints\n    } = this.getProps();\n    if (!constraints || !isRefObject(constraints)) return false;\n    const constraintsElement = constraints.current;\n    invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n    const {\n      projection\n    } = this.visualElement; // TODO\n\n    if (!projection || !projection.layout) return false;\n    const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n    let measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);\n    /**\r\n     * If there's an onMeasureDragConstraints listener we call it and\r\n     * if different constraints are returned, set constraints to that\r\n     */\n\n    if (onMeasureDragConstraints) {\n      const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n      this.hasMutatedConstraints = !!userConstraints;\n\n      if (userConstraints) {\n        measuredConstraints = convertBoundingBoxToBox(userConstraints);\n      }\n    }\n\n    return measuredConstraints;\n  }\n\n  startAnimation(velocity) {\n    const {\n      drag,\n      dragMomentum,\n      dragElastic,\n      dragTransition,\n      dragSnapToOrigin,\n      onDragTransitionEnd\n    } = this.getProps();\n    const constraints = this.constraints || {};\n    const momentumAnimations = eachAxis(axis => {\n      var _a;\n\n      if (!shouldDrag(axis, drag, this.currentDirection)) {\n        return;\n      }\n\n      let transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n      if (dragSnapToOrigin) transition = {\n        min: 0,\n        max: 0\n      };\n      /**\r\n       * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\r\n       * of spring animations so we should look into adding a disable spring option to `inertia`.\r\n       * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\r\n       * using the value of `dragElastic`.\r\n       */\n\n      const bounceStiffness = dragElastic ? 200 : 1000000;\n      const bounceDamping = dragElastic ? 40 : 10000000;\n      const inertia = Object.assign(Object.assign({\n        type: \"inertia\",\n        velocity: dragMomentum ? velocity[axis] : 0,\n        bounceStiffness,\n        bounceDamping,\n        timeConstant: 750,\n        restDelta: 1,\n        restSpeed: 10\n      }, dragTransition), transition); // If we're not animating on an externally-provided `MotionValue` we can use the\n      // component's animation controls which will handle interactions with whileHover (etc),\n      // otherwise we just have to animate the `MotionValue` itself.\n\n      return this.startAxisValueAnimation(axis, inertia);\n    }); // Run all animations and then resolve the new drag constraints.\n\n    return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n  }\n\n  startAxisValueAnimation(axis, transition) {\n    const axisValue = this.getAxisMotionValue(axis);\n    return startAnimation(axis, axisValue, 0, transition);\n  }\n\n  stopAnimation() {\n    eachAxis(axis => this.getAxisMotionValue(axis).stop());\n  }\n  /**\r\n   * Drag works differently depending on which props are provided.\r\n   *\r\n   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\r\n   * - Otherwise, we apply the delta to the x/y motion values.\r\n   */\n\n\n  getAxisMotionValue(axis) {\n    var _a, _b;\n\n    const dragKey = \"_drag\" + axis.toUpperCase();\n    const externalMotionValue = this.visualElement.getProps()[dragKey];\n    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);\n  }\n\n  snapToCursor(point) {\n    eachAxis(axis => {\n      const {\n        drag\n      } = this.getProps(); // If we're not dragging this axis, do an early return.\n\n      if (!shouldDrag(axis, drag, this.currentDirection)) return;\n      const {\n        projection\n      } = this.visualElement;\n      const axisValue = this.getAxisMotionValue(axis);\n\n      if (projection && projection.layout) {\n        const {\n          min,\n          max\n        } = projection.layout.actual[axis];\n        axisValue.set(point[axis] - mix(min, max, 0.5));\n      }\n    });\n  }\n  /**\r\n   * When the viewport resizes we want to check if the measured constraints\r\n   * have changed and, if so, reposition the element within those new constraints\r\n   * relative to where it was before the resize.\r\n   */\n\n\n  scalePositionWithinConstraints() {\n    var _a;\n\n    const {\n      drag,\n      dragConstraints\n    } = this.getProps();\n    const {\n      projection\n    } = this.visualElement;\n    if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n    /**\r\n     * Stop current animations as there can be visual glitching if we try to do\r\n     * this mid-animation\r\n     */\n\n    this.stopAnimation();\n    /**\r\n     * Record the relative position of the dragged element relative to the\r\n     * constraints box and save as a progress value.\r\n     */\n\n    const boxProgress = {\n      x: 0,\n      y: 0\n    };\n    eachAxis(axis => {\n      const axisValue = this.getAxisMotionValue(axis);\n\n      if (axisValue) {\n        const latest = axisValue.get();\n        boxProgress[axis] = calcOrigin({\n          min: latest,\n          max: latest\n        }, this.constraints[axis]);\n      }\n    });\n    /**\r\n     * Update the layout of this element and resolve the latest drag constraints\r\n     */\n\n    const {\n      transformTemplate\n    } = this.visualElement.getProps();\n    this.visualElement.getInstance().style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n    (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n    projection.updateLayout();\n    this.resolveConstraints();\n    /**\r\n     * For each axis, calculate the current progress of the layout axis\r\n     * within the new constraints.\r\n     */\n\n    eachAxis(axis => {\n      if (!shouldDrag(axis, drag, null)) return;\n      /**\r\n       * Calculate a new transform based on the previous box progress\r\n       */\n\n      const axisValue = this.getAxisMotionValue(axis);\n      const {\n        min,\n        max\n      } = this.constraints[axis];\n      axisValue.set(mix(min, max, boxProgress[axis]));\n    });\n  }\n\n  addListeners() {\n    var _a;\n\n    elementDragControls.set(this.visualElement, this);\n    const element = this.visualElement.getInstance();\n    /**\r\n     * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\r\n     */\n\n    const stopPointerListener = addPointerEvent(element, \"pointerdown\", event => {\n      const {\n        drag,\n        dragListener = true\n      } = this.getProps();\n      drag && dragListener && this.start(event);\n    });\n\n    const measureDragConstraints = () => {\n      const {\n        dragConstraints\n      } = this.getProps();\n\n      if (isRefObject(dragConstraints)) {\n        this.constraints = this.resolveRefConstraints();\n      }\n    };\n\n    const {\n      projection\n    } = this.visualElement;\n    const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n\n    if (projection && !projection.layout) {\n      (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n      projection.updateLayout();\n    }\n\n    measureDragConstraints();\n    /**\r\n     * Attach a window resize listener to scale the draggable target within its defined\r\n     * constraints as the window resizes.\r\n     */\n\n    const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n    /**\r\n     * If the element's layout changes, calculate the delta and apply that to\r\n     * the drag gesture's origin point.\r\n     */\n\n    const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", _ref => {\n      let {\n        delta,\n        hasLayoutChanged\n      } = _ref;\n\n      if (this.isDragging && hasLayoutChanged) {\n        eachAxis(axis => {\n          const motionValue = this.getAxisMotionValue(axis);\n          if (!motionValue) return;\n          this.originPoint[axis] += delta[axis].translate;\n          motionValue.set(motionValue.get() + delta[axis].translate);\n        });\n        this.visualElement.syncRender();\n      }\n    });\n    return () => {\n      stopResizeListener();\n      stopPointerListener();\n      stopMeasureLayoutListener();\n      stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n    };\n  }\n\n  getProps() {\n    const props = this.visualElement.getProps();\n    const {\n      drag = false,\n      dragDirectionLock = false,\n      dragPropagation = false,\n      dragConstraints = false,\n      dragElastic = defaultElastic,\n      dragMomentum = true\n    } = props;\n    return Object.assign(Object.assign({}, props), {\n      drag,\n      dragDirectionLock,\n      dragPropagation,\n      dragConstraints,\n      dragElastic,\n      dragMomentum\n    });\n  }\n\n}\n\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\r\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\r\n * than the provided threshold, return `null`.\r\n *\r\n * @param offset - The x/y offset from origin.\r\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\r\n */\n\n\nfunction getCurrentDirection(offset) {\n  let lockThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  let direction = null;\n\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n\n  return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"names":["invariant","PanSession","getGlobalLock","isRefObject","addPointerEvent","applyConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","calcOrigin","defaultElastic","AnimationType","createBox","eachAxis","measurePageBox","extractEventInfo","startAnimation","convertBoxToBoundingBox","convertBoundingBoxToBox","addDomEvent","mix","percent","calcLength","elementDragControls","WeakMap","VisualElementDragControls","constructor","visualElement","openGlobalLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","start","originEvent","snapToCursor","isPresent","onSessionStart","event","stopAnimation","point","onStart","info","_a","drag","dragPropagation","onDragStart","getProps","resolveConstraints","projection","isAnimationBlocked","target","undefined","axis","_b","current","getAxisMotionValue","get","test","measuredAxis","layout","actual","length","parseFloat","animationState","setActive","Drag","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","syncRender","onSessionEnd","stop","panSession","transformPagePoint","getTransformPagePoint","cancel","velocity","onDragEnd","end","_point","shouldDrag","axisValue","next","set","dragConstraints","dragElastic","prevConstraints","resolveRefConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","userConstraints","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","Object","assign","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","dragKey","toUpperCase","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","latest","transformTemplate","getInstance","style","transform","updateScroll","updateLayout","addListeners","element","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","stopResizeListener","window","stopLayoutUpdateListener","delta","hasLayoutChanged","motionValue","translate","props","direction","lockThreshold","Math","abs"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"sourcesContent":["import { invariant } from 'hey-listen';\r\nimport { PanSession } from '../PanSession.mjs';\r\nimport { getGlobalLock } from './utils/lock.mjs';\r\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\r\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\r\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\r\nimport { AnimationType } from '../../render/utils/types.mjs';\r\nimport { createBox } from '../../projection/geometry/models.mjs';\r\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\r\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\r\nimport { extractEventInfo } from '../../events/event-info.mjs';\r\nimport { startAnimation } from '../../animation/utils/transitions.mjs';\r\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\r\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\r\nimport { mix } from 'popmotion';\r\nimport { percent } from 'style-value-types';\r\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\r\n\r\nconst elementDragControls = new WeakMap();\r\n/**\r\n *\r\n */\r\n// let latestPointerEvent: AnyPointerEvent\r\nclass VisualElementDragControls {\r\n    constructor(visualElement) {\r\n        // This is a reference to the global drag gesture lock, ensuring only one component\r\n        // can \"capture\" the drag of one or both axes.\r\n        // TODO: Look into moving this into pansession?\r\n        this.openGlobalLock = null;\r\n        this.isDragging = false;\r\n        this.currentDirection = null;\r\n        this.originPoint = { x: 0, y: 0 };\r\n        /**\r\n         * The permitted boundaries of travel, in pixels.\r\n         */\r\n        this.constraints = false;\r\n        this.hasMutatedConstraints = false;\r\n        /**\r\n         * The per-axis resolved elastic values.\r\n         */\r\n        this.elastic = createBox();\r\n        this.visualElement = visualElement;\r\n    }\r\n    start(originEvent, { snapToCursor = false } = {}) {\r\n        /**\r\n         * Don't start dragging if this component is exiting\r\n         */\r\n        if (this.visualElement.isPresent === false)\r\n            return;\r\n        const onSessionStart = (event) => {\r\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\r\n            // the component.\r\n            this.stopAnimation();\r\n            if (snapToCursor) {\r\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\r\n            }\r\n        };\r\n        const onStart = (event, info) => {\r\n            var _a;\r\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\r\n            const { drag, dragPropagation, onDragStart } = this.getProps();\r\n            if (drag && !dragPropagation) {\r\n                if (this.openGlobalLock)\r\n                    this.openGlobalLock();\r\n                this.openGlobalLock = getGlobalLock(drag);\r\n                // If we don 't have the lock, don't start dragging\r\n                if (!this.openGlobalLock)\r\n                    return;\r\n            }\r\n            this.isDragging = true;\r\n            this.currentDirection = null;\r\n            this.resolveConstraints();\r\n            if (this.visualElement.projection) {\r\n                this.visualElement.projection.isAnimationBlocked = true;\r\n                this.visualElement.projection.target = undefined;\r\n            }\r\n            /**\r\n             * Record gesture origin\r\n             */\r\n            eachAxis((axis) => {\r\n                var _a, _b;\r\n                let current = this.getAxisMotionValue(axis).get() || 0;\r\n                /**\r\n                 * If the MotionValue is a percentage value convert to px\r\n                 */\r\n                if (percent.test(current)) {\r\n                    const measuredAxis = (_b = (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.actual[axis];\r\n                    if (measuredAxis) {\r\n                        const length = calcLength(measuredAxis);\r\n                        current = length * (parseFloat(current) / 100);\r\n                    }\r\n                }\r\n                this.originPoint[axis] = current;\r\n            });\r\n            // Fire onDragStart event\r\n            onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\r\n            (_a = this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\r\n        };\r\n        const onMove = (event, info) => {\r\n            // latestPointerEvent = event\r\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\r\n            // If we didn't successfully receive the gesture lock, early return.\r\n            if (!dragPropagation && !this.openGlobalLock)\r\n                return;\r\n            const { offset } = info;\r\n            // Attempt to detect drag direction if directionLock is true\r\n            if (dragDirectionLock && this.currentDirection === null) {\r\n                this.currentDirection = getCurrentDirection(offset);\r\n                // If we've successfully set a direction, notify listener\r\n                if (this.currentDirection !== null) {\r\n                    onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(this.currentDirection);\r\n                }\r\n                return;\r\n            }\r\n            // Update each point with the latest position\r\n            this.updateAxis(\"x\", info.point, offset);\r\n            this.updateAxis(\"y\", info.point, offset);\r\n            /**\r\n             * Ideally we would leave the renderer to fire naturally at the end of\r\n             * this frame but if the element is about to change layout as the result\r\n             * of a re-render we want to ensure the browser can read the latest\r\n             * bounding box to ensure the pointer and element don't fall out of sync.\r\n             */\r\n            this.visualElement.syncRender();\r\n            /**\r\n             * This must fire after the syncRender call as it might trigger a state\r\n             * change which itself might trigger a layout update.\r\n             */\r\n            onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\r\n        };\r\n        const onSessionEnd = (event, info) => this.stop(event, info);\r\n        this.panSession = new PanSession(originEvent, {\r\n            onSessionStart,\r\n            onStart,\r\n            onMove,\r\n            onSessionEnd,\r\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\r\n    }\r\n    stop(event, info) {\r\n        const isDragging = this.isDragging;\r\n        this.cancel();\r\n        if (!isDragging)\r\n            return;\r\n        const { velocity } = info;\r\n        this.startAnimation(velocity);\r\n        const { onDragEnd } = this.getProps();\r\n        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\r\n    }\r\n    cancel() {\r\n        var _a, _b;\r\n        this.isDragging = false;\r\n        if (this.visualElement.projection) {\r\n            this.visualElement.projection.isAnimationBlocked = false;\r\n        }\r\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\r\n        this.panSession = undefined;\r\n        const { dragPropagation } = this.getProps();\r\n        if (!dragPropagation && this.openGlobalLock) {\r\n            this.openGlobalLock();\r\n            this.openGlobalLock = null;\r\n        }\r\n        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\r\n    }\r\n    updateAxis(axis, _point, offset) {\r\n        const { drag } = this.getProps();\r\n        // If we're not dragging this axis, do an early return.\r\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\r\n            return;\r\n        const axisValue = this.getAxisMotionValue(axis);\r\n        let next = this.originPoint[axis] + offset[axis];\r\n        // Apply constraints\r\n        if (this.constraints && this.constraints[axis]) {\r\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\r\n        }\r\n        axisValue.set(next);\r\n    }\r\n    resolveConstraints() {\r\n        const { dragConstraints, dragElastic } = this.getProps();\r\n        const { layout } = this.visualElement.projection || {};\r\n        const prevConstraints = this.constraints;\r\n        if (dragConstraints && isRefObject(dragConstraints)) {\r\n            if (!this.constraints) {\r\n                this.constraints = this.resolveRefConstraints();\r\n            }\r\n        }\r\n        else {\r\n            if (dragConstraints && layout) {\r\n                this.constraints = calcRelativeConstraints(layout.actual, dragConstraints);\r\n            }\r\n            else {\r\n                this.constraints = false;\r\n            }\r\n        }\r\n        this.elastic = resolveDragElastic(dragElastic);\r\n        /**\r\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\r\n         * from viewport-relative to component-relative.\r\n         */\r\n        if (prevConstraints !== this.constraints &&\r\n            layout &&\r\n            this.constraints &&\r\n            !this.hasMutatedConstraints) {\r\n            eachAxis((axis) => {\r\n                if (this.getAxisMotionValue(axis)) {\r\n                    this.constraints[axis] = rebaseAxisConstraints(layout.actual[axis], this.constraints[axis]);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    resolveRefConstraints() {\r\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\r\n        if (!constraints || !isRefObject(constraints))\r\n            return false;\r\n        const constraintsElement = constraints.current;\r\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\r\n        const { projection } = this.visualElement;\r\n        // TODO\r\n        if (!projection || !projection.layout)\r\n            return false;\r\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\r\n        let measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);\r\n        /**\r\n         * If there's an onMeasureDragConstraints listener we call it and\r\n         * if different constraints are returned, set constraints to that\r\n         */\r\n        if (onMeasureDragConstraints) {\r\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\r\n            this.hasMutatedConstraints = !!userConstraints;\r\n            if (userConstraints) {\r\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\r\n            }\r\n        }\r\n        return measuredConstraints;\r\n    }\r\n    startAnimation(velocity) {\r\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\r\n        const constraints = this.constraints || {};\r\n        const momentumAnimations = eachAxis((axis) => {\r\n            var _a;\r\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\r\n                return;\r\n            }\r\n            let transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\r\n            if (dragSnapToOrigin)\r\n                transition = { min: 0, max: 0 };\r\n            /**\r\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\r\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\r\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\r\n             * using the value of `dragElastic`.\r\n             */\r\n            const bounceStiffness = dragElastic ? 200 : 1000000;\r\n            const bounceDamping = dragElastic ? 40 : 10000000;\r\n            const inertia = Object.assign(Object.assign({ type: \"inertia\", velocity: dragMomentum ? velocity[axis] : 0, bounceStiffness,\r\n                bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition);\r\n            // If we're not animating on an externally-provided `MotionValue` we can use the\r\n            // component's animation controls which will handle interactions with whileHover (etc),\r\n            // otherwise we just have to animate the `MotionValue` itself.\r\n            return this.startAxisValueAnimation(axis, inertia);\r\n        });\r\n        // Run all animations and then resolve the new drag constraints.\r\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\r\n    }\r\n    startAxisValueAnimation(axis, transition) {\r\n        const axisValue = this.getAxisMotionValue(axis);\r\n        return startAnimation(axis, axisValue, 0, transition);\r\n    }\r\n    stopAnimation() {\r\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\r\n    }\r\n    /**\r\n     * Drag works differently depending on which props are provided.\r\n     *\r\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\r\n     * - Otherwise, we apply the delta to the x/y motion values.\r\n     */\r\n    getAxisMotionValue(axis) {\r\n        var _a, _b;\r\n        const dragKey = \"_drag\" + axis.toUpperCase();\r\n        const externalMotionValue = this.visualElement.getProps()[dragKey];\r\n        return externalMotionValue\r\n            ? externalMotionValue\r\n            : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);\r\n    }\r\n    snapToCursor(point) {\r\n        eachAxis((axis) => {\r\n            const { drag } = this.getProps();\r\n            // If we're not dragging this axis, do an early return.\r\n            if (!shouldDrag(axis, drag, this.currentDirection))\r\n                return;\r\n            const { projection } = this.visualElement;\r\n            const axisValue = this.getAxisMotionValue(axis);\r\n            if (projection && projection.layout) {\r\n                const { min, max } = projection.layout.actual[axis];\r\n                axisValue.set(point[axis] - mix(min, max, 0.5));\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * When the viewport resizes we want to check if the measured constraints\r\n     * have changed and, if so, reposition the element within those new constraints\r\n     * relative to where it was before the resize.\r\n     */\r\n    scalePositionWithinConstraints() {\r\n        var _a;\r\n        const { drag, dragConstraints } = this.getProps();\r\n        const { projection } = this.visualElement;\r\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\r\n            return;\r\n        /**\r\n         * Stop current animations as there can be visual glitching if we try to do\r\n         * this mid-animation\r\n         */\r\n        this.stopAnimation();\r\n        /**\r\n         * Record the relative position of the dragged element relative to the\r\n         * constraints box and save as a progress value.\r\n         */\r\n        const boxProgress = { x: 0, y: 0 };\r\n        eachAxis((axis) => {\r\n            const axisValue = this.getAxisMotionValue(axis);\r\n            if (axisValue) {\r\n                const latest = axisValue.get();\r\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\r\n            }\r\n        });\r\n        /**\r\n         * Update the layout of this element and resolve the latest drag constraints\r\n         */\r\n        const { transformTemplate } = this.visualElement.getProps();\r\n        this.visualElement.getInstance().style.transform = transformTemplate\r\n            ? transformTemplate({}, \"\")\r\n            : \"none\";\r\n        (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\r\n        projection.updateLayout();\r\n        this.resolveConstraints();\r\n        /**\r\n         * For each axis, calculate the current progress of the layout axis\r\n         * within the new constraints.\r\n         */\r\n        eachAxis((axis) => {\r\n            if (!shouldDrag(axis, drag, null))\r\n                return;\r\n            /**\r\n             * Calculate a new transform based on the previous box progress\r\n             */\r\n            const axisValue = this.getAxisMotionValue(axis);\r\n            const { min, max } = this.constraints[axis];\r\n            axisValue.set(mix(min, max, boxProgress[axis]));\r\n        });\r\n    }\r\n    addListeners() {\r\n        var _a;\r\n        elementDragControls.set(this.visualElement, this);\r\n        const element = this.visualElement.getInstance();\r\n        /**\r\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\r\n         */\r\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\r\n            const { drag, dragListener = true } = this.getProps();\r\n            drag && dragListener && this.start(event);\r\n        });\r\n        const measureDragConstraints = () => {\r\n            const { dragConstraints } = this.getProps();\r\n            if (isRefObject(dragConstraints)) {\r\n                this.constraints = this.resolveRefConstraints();\r\n            }\r\n        };\r\n        const { projection } = this.visualElement;\r\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\r\n        if (projection && !projection.layout) {\r\n            (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\r\n            projection.updateLayout();\r\n        }\r\n        measureDragConstraints();\r\n        /**\r\n         * Attach a window resize listener to scale the draggable target within its defined\r\n         * constraints as the window resizes.\r\n         */\r\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\r\n        /**\r\n         * If the element's layout changes, calculate the delta and apply that to\r\n         * the drag gesture's origin point.\r\n         */\r\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\r\n            if (this.isDragging && hasLayoutChanged) {\r\n                eachAxis((axis) => {\r\n                    const motionValue = this.getAxisMotionValue(axis);\r\n                    if (!motionValue)\r\n                        return;\r\n                    this.originPoint[axis] += delta[axis].translate;\r\n                    motionValue.set(motionValue.get() + delta[axis].translate);\r\n                });\r\n                this.visualElement.syncRender();\r\n            }\r\n        }));\r\n        return () => {\r\n            stopResizeListener();\r\n            stopPointerListener();\r\n            stopMeasureLayoutListener();\r\n            stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\r\n        };\r\n    }\r\n    getProps() {\r\n        const props = this.visualElement.getProps();\r\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\r\n        return Object.assign(Object.assign({}, props), { drag,\r\n            dragDirectionLock,\r\n            dragPropagation,\r\n            dragConstraints,\r\n            dragElastic,\r\n            dragMomentum });\r\n    }\r\n}\r\nfunction shouldDrag(direction, drag, currentDirection) {\r\n    return ((drag === true || drag === direction) &&\r\n        (currentDirection === null || currentDirection === direction));\r\n}\r\n/**\r\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\r\n * than the provided threshold, return `null`.\r\n *\r\n * @param offset - The x/y offset from origin.\r\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\r\n */\r\nfunction getCurrentDirection(offset, lockThreshold = 10) {\r\n    let direction = null;\r\n    if (Math.abs(offset.y) > lockThreshold) {\r\n        direction = \"y\";\r\n    }\r\n    else if (Math.abs(offset.x) > lockThreshold) {\r\n        direction = \"x\";\r\n    }\r\n    return direction;\r\n}\r\n\r\nexport { VisualElementDragControls, elementDragControls };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
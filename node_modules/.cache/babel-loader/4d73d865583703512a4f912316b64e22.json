{"ast":null,"code":"import { time } from '@motionone/utils';\nimport { calcGeneratorVelocity } from '../utils/velocity.es.js';\nimport { spring } from '../spring/index.es.js';\n\nvar glide = function glide(_ref) {\n  var _ref$from = _ref.from,\n      from = _ref$from === void 0 ? 0 : _ref$from,\n      _ref$velocity = _ref.velocity,\n      velocity = _ref$velocity === void 0 ? 0.0 : _ref$velocity,\n      _ref$power = _ref.power,\n      power = _ref$power === void 0 ? 0.8 : _ref$power,\n      _ref$decay = _ref.decay,\n      decay = _ref$decay === void 0 ? 0.325 : _ref$decay,\n      bounceDamping = _ref.bounceDamping,\n      bounceStiffness = _ref.bounceStiffness,\n      changeTarget = _ref.changeTarget,\n      min = _ref.min,\n      max = _ref.max,\n      _ref$restDistance = _ref.restDistance,\n      restDistance = _ref$restDistance === void 0 ? 0.5 : _ref$restDistance,\n      restSpeed = _ref.restSpeed;\n  decay = time.ms(decay);\n  var state = {\n    hasReachedTarget: false,\n    done: false,\n    current: from,\n    target: from\n  };\n\n  var isOutOfBounds = function isOutOfBounds(v) {\n    return min !== undefined && v < min || max !== undefined && v > max;\n  };\n\n  var nearestBoundary = function nearestBoundary(v) {\n    if (min === undefined) return max;\n    if (max === undefined) return min;\n    return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n  };\n\n  var amplitude = power * velocity;\n  var ideal = from + amplitude;\n  var target = changeTarget === undefined ? ideal : changeTarget(ideal);\n  state.target = target;\n  /**\r\n   * If the target has changed we need to re-calculate the amplitude, otherwise\r\n   * the animation will start from the wrong position.\r\n   */\n\n  if (target !== ideal) amplitude = target - from;\n\n  var calcDelta = function calcDelta(t) {\n    return -amplitude * Math.exp(-t / decay);\n  };\n\n  var calcLatest = function calcLatest(t) {\n    return target + calcDelta(t);\n  };\n\n  var applyFriction = function applyFriction(t) {\n    var delta = calcDelta(t);\n    var latest = calcLatest(t);\n    state.done = Math.abs(delta) <= restDistance;\n    state.current = state.done ? target : latest;\n  };\n  /**\r\n   * Ideally this would resolve for t in a stateless way, we could\r\n   * do that by always precalculating the animation but as we know\r\n   * this will be done anyway we can assume that spring will\r\n   * be discovered during that.\r\n   */\n\n\n  var timeReachedBoundary;\n  var spring$1;\n\n  var checkCatchBoundary = function checkCatchBoundary(t) {\n    if (!isOutOfBounds(state.current)) return;\n    timeReachedBoundary = t;\n    spring$1 = spring({\n      from: state.current,\n      to: nearestBoundary(state.current),\n      velocity: calcGeneratorVelocity(calcLatest, t, state.current),\n      damping: bounceDamping,\n      stiffness: bounceStiffness,\n      restDistance: restDistance,\n      restSpeed: restSpeed\n    });\n  };\n\n  checkCatchBoundary(0);\n  return function (t) {\n    /**\r\n     * We need to resolve the friction to figure out if we need a\r\n     * spring but we don't want to do this twice per frame. So here\r\n     * we flag if we updated for this frame and later if we did\r\n     * we can skip doing it again.\r\n     */\n    var hasUpdatedFrame = false;\n\n    if (!spring$1 && timeReachedBoundary === undefined) {\n      hasUpdatedFrame = true;\n      applyFriction(t);\n      checkCatchBoundary(t);\n    }\n    /**\r\n     * If we have a spring and the provided t is beyond the moment the friction\r\n     * animation crossed the min/max boundary, use the spring.\r\n     */\n\n\n    if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n      state.hasReachedTarget = true;\n      return spring$1(t - timeReachedBoundary);\n    } else {\n      state.hasReachedTarget = false;\n      !hasUpdatedFrame && applyFriction(t);\n      return state;\n    }\n  };\n};\n\nexport { glide };","map":{"version":3,"names":["time","calcGeneratorVelocity","spring","glide","from","velocity","power","decay","bounceDamping","bounceStiffness","changeTarget","min","max","restDistance","restSpeed","ms","state","hasReachedTarget","done","current","target","isOutOfBounds","v","undefined","nearestBoundary","Math","abs","amplitude","ideal","calcDelta","t","exp","calcLatest","applyFriction","delta","latest","timeReachedBoundary","spring$1","checkCatchBoundary","to","damping","stiffness","hasUpdatedFrame"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@motionone/generators/dist/glide/index.es.js"],"sourcesContent":["import { time } from '@motionone/utils';\r\nimport { calcGeneratorVelocity } from '../utils/velocity.es.js';\r\nimport { spring } from '../spring/index.es.js';\r\n\r\nconst glide = ({ from = 0, velocity = 0.0, power = 0.8, decay = 0.325, bounceDamping, bounceStiffness, changeTarget, min, max, restDistance = 0.5, restSpeed, }) => {\r\n    decay = time.ms(decay);\r\n    const state = {\r\n        hasReachedTarget: false,\r\n        done: false,\r\n        current: from,\r\n        target: from,\r\n    };\r\n    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);\r\n    const nearestBoundary = (v) => {\r\n        if (min === undefined)\r\n            return max;\r\n        if (max === undefined)\r\n            return min;\r\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\r\n    };\r\n    let amplitude = power * velocity;\r\n    const ideal = from + amplitude;\r\n    const target = changeTarget === undefined ? ideal : changeTarget(ideal);\r\n    state.target = target;\r\n    /**\r\n     * If the target has changed we need to re-calculate the amplitude, otherwise\r\n     * the animation will start from the wrong position.\r\n     */\r\n    if (target !== ideal)\r\n        amplitude = target - from;\r\n    const calcDelta = (t) => -amplitude * Math.exp(-t / decay);\r\n    const calcLatest = (t) => target + calcDelta(t);\r\n    const applyFriction = (t) => {\r\n        const delta = calcDelta(t);\r\n        const latest = calcLatest(t);\r\n        state.done = Math.abs(delta) <= restDistance;\r\n        state.current = state.done ? target : latest;\r\n    };\r\n    /**\r\n     * Ideally this would resolve for t in a stateless way, we could\r\n     * do that by always precalculating the animation but as we know\r\n     * this will be done anyway we can assume that spring will\r\n     * be discovered during that.\r\n     */\r\n    let timeReachedBoundary;\r\n    let spring$1;\r\n    const checkCatchBoundary = (t) => {\r\n        if (!isOutOfBounds(state.current))\r\n            return;\r\n        timeReachedBoundary = t;\r\n        spring$1 = spring({\r\n            from: state.current,\r\n            to: nearestBoundary(state.current),\r\n            velocity: calcGeneratorVelocity(calcLatest, t, state.current),\r\n            damping: bounceDamping,\r\n            stiffness: bounceStiffness,\r\n            restDistance,\r\n            restSpeed,\r\n        });\r\n    };\r\n    checkCatchBoundary(0);\r\n    return (t) => {\r\n        /**\r\n         * We need to resolve the friction to figure out if we need a\r\n         * spring but we don't want to do this twice per frame. So here\r\n         * we flag if we updated for this frame and later if we did\r\n         * we can skip doing it again.\r\n         */\r\n        let hasUpdatedFrame = false;\r\n        if (!spring$1 && timeReachedBoundary === undefined) {\r\n            hasUpdatedFrame = true;\r\n            applyFriction(t);\r\n            checkCatchBoundary(t);\r\n        }\r\n        /**\r\n         * If we have a spring and the provided t is beyond the moment the friction\r\n         * animation crossed the min/max boundary, use the spring.\r\n         */\r\n        if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\r\n            state.hasReachedTarget = true;\r\n            return spring$1(t - timeReachedBoundary);\r\n        }\r\n        else {\r\n            state.hasReachedTarget = false;\r\n            !hasUpdatedFrame && applyFriction(t);\r\n            return state;\r\n        }\r\n    };\r\n};\r\n\r\nexport { glide };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
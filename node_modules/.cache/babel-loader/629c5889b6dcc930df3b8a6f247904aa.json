{"ast":null,"code":"import { env } from '../../../utils/process.mjs';\nimport { useRef, useEffect } from 'react';\nimport { AnimationType } from '../../../render/utils/types.mjs';\nimport { warnOnce } from '../../../utils/warn-once.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nfunction useViewport(_ref) {\n  let {\n    visualElement,\n    whileInView,\n    onViewportEnter,\n    onViewportLeave,\n    viewport = {}\n  } = _ref;\n  const state = useRef({\n    hasEnteredView: false,\n    isInView: false\n  });\n  let shouldObserve = Boolean(whileInView || onViewportEnter || onViewportLeave);\n  if (viewport.once && state.current.hasEnteredView) shouldObserve = false;\n  const useObserver = typeof IntersectionObserver === \"undefined\" ? useMissingIntersectionObserver : useIntersectionObserver;\n  useObserver(shouldObserve, state.current, visualElement, viewport);\n}\n\nconst thresholdNames = {\n  some: 0,\n  all: 1\n};\n\nfunction useIntersectionObserver(shouldObserve, state, visualElement, _ref2) {\n  let {\n    root,\n    margin: rootMargin,\n    amount = \"some\",\n    once\n  } = _ref2;\n  useEffect(() => {\n    if (!shouldObserve) return;\n    const options = {\n      root: root === null || root === void 0 ? void 0 : root.current,\n      rootMargin,\n      threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n    };\n\n    const intersectionCallback = entry => {\n      var _a;\n\n      const {\n        isIntersecting\n      } = entry;\n      /**\n       * If there's been no change in the viewport state, early return.\n       */\n\n      if (state.isInView === isIntersecting) return;\n      state.isInView = isIntersecting;\n      /**\n       * Handle hasEnteredView. If this is only meant to run once, and\n       * element isn't visible, early return. Otherwise set hasEnteredView to true.\n       */\n\n      if (once && !isIntersecting && state.hasEnteredView) {\n        return;\n      } else if (isIntersecting) {\n        state.hasEnteredView = true;\n      }\n\n      (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.InView, isIntersecting);\n      /**\n       * Use the latest committed props rather than the ones in scope\n       * when this observer is created\n       */\n\n      const props = visualElement.getProps();\n      const callback = isIntersecting ? props.onViewportEnter : props.onViewportLeave;\n      callback === null || callback === void 0 ? void 0 : callback(entry);\n    };\n\n    return observeIntersection(visualElement.getInstance(), options, intersectionCallback);\n  }, [shouldObserve, root, rootMargin, amount]);\n}\n/**\n * If IntersectionObserver is missing, we activate inView and fire onViewportEnter\n * on mount. This way, the page will be in the state the author expects users\n * to see it in for everyone.\n */\n\n\nfunction useMissingIntersectionObserver(shouldObserve, state, visualElement, _ref3) {\n  let {\n    fallback = true\n  } = _ref3;\n  useEffect(() => {\n    if (!shouldObserve || !fallback) return;\n\n    if (env !== \"production\") {\n      warnOnce(false, \"IntersectionObserver not available on this device. whileInView animations will trigger on mount.\");\n    }\n    /**\n     * Fire this in an rAF because, at this point, the animation state\n     * won't have flushed for the first time and there's certain logic in\n     * there that behaves differently on the initial animation.\n     *\n     * This hook should be quite rarely called so setting this in an rAF\n     * is preferred to changing the behaviour of the animation state.\n     */\n\n\n    requestAnimationFrame(() => {\n      var _a;\n\n      state.hasEnteredView = true;\n      const {\n        onViewportEnter\n      } = visualElement.getProps();\n      onViewportEnter === null || onViewportEnter === void 0 ? void 0 : onViewportEnter(null);\n      (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.InView, true);\n    });\n  }, [shouldObserve]);\n}\n\nexport { useViewport };","map":{"version":3,"names":["env","useRef","useEffect","AnimationType","warnOnce","observeIntersection","useViewport","visualElement","whileInView","onViewportEnter","onViewportLeave","viewport","state","hasEnteredView","isInView","shouldObserve","Boolean","once","current","useObserver","IntersectionObserver","useMissingIntersectionObserver","useIntersectionObserver","thresholdNames","some","all","root","margin","rootMargin","amount","options","threshold","intersectionCallback","entry","_a","isIntersecting","animationState","setActive","InView","props","getProps","callback","getInstance","fallback","requestAnimationFrame"],"sources":["C:/Users/bittu/Desktop/Unit4Project-React/my-project/node_modules/framer-motion/dist/es/motion/features/viewport/use-viewport.mjs"],"sourcesContent":["import { env } from '../../../utils/process.mjs';\nimport { useRef, useEffect } from 'react';\nimport { AnimationType } from '../../../render/utils/types.mjs';\nimport { warnOnce } from '../../../utils/warn-once.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nfunction useViewport({ visualElement, whileInView, onViewportEnter, onViewportLeave, viewport = {}, }) {\n    const state = useRef({\n        hasEnteredView: false,\n        isInView: false,\n    });\n    let shouldObserve = Boolean(whileInView || onViewportEnter || onViewportLeave);\n    if (viewport.once && state.current.hasEnteredView)\n        shouldObserve = false;\n    const useObserver = typeof IntersectionObserver === \"undefined\"\n        ? useMissingIntersectionObserver\n        : useIntersectionObserver;\n    useObserver(shouldObserve, state.current, visualElement, viewport);\n}\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nfunction useIntersectionObserver(shouldObserve, state, visualElement, { root, margin: rootMargin, amount = \"some\", once }) {\n    useEffect(() => {\n        if (!shouldObserve)\n            return;\n        const options = {\n            root: root === null || root === void 0 ? void 0 : root.current,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const intersectionCallback = (entry) => {\n            var _a;\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (state.isInView === isIntersecting)\n                return;\n            state.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && state.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                state.hasEnteredView = true;\n            }\n            (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.InView, isIntersecting);\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const props = visualElement.getProps();\n            const callback = isIntersecting\n                ? props.onViewportEnter\n                : props.onViewportLeave;\n            callback === null || callback === void 0 ? void 0 : callback(entry);\n        };\n        return observeIntersection(visualElement.getInstance(), options, intersectionCallback);\n    }, [shouldObserve, root, rootMargin, amount]);\n}\n/**\n * If IntersectionObserver is missing, we activate inView and fire onViewportEnter\n * on mount. This way, the page will be in the state the author expects users\n * to see it in for everyone.\n */\nfunction useMissingIntersectionObserver(shouldObserve, state, visualElement, { fallback = true }) {\n    useEffect(() => {\n        if (!shouldObserve || !fallback)\n            return;\n        if (env !== \"production\") {\n            warnOnce(false, \"IntersectionObserver not available on this device. whileInView animations will trigger on mount.\");\n        }\n        /**\n         * Fire this in an rAF because, at this point, the animation state\n         * won't have flushed for the first time and there's certain logic in\n         * there that behaves differently on the initial animation.\n         *\n         * This hook should be quite rarely called so setting this in an rAF\n         * is preferred to changing the behaviour of the animation state.\n         */\n        requestAnimationFrame(() => {\n            var _a;\n            state.hasEnteredView = true;\n            const { onViewportEnter } = visualElement.getProps();\n            onViewportEnter === null || onViewportEnter === void 0 ? void 0 : onViewportEnter(null);\n            (_a = visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.InView, true);\n        });\n    }, [shouldObserve]);\n}\n\nexport { useViewport };\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,4BAApB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,SAASC,aAAT,QAA8B,iCAA9B;AACA,SAASC,QAAT,QAAyB,8BAAzB;AACA,SAASC,mBAAT,QAAoC,iBAApC;;AAEA,SAASC,WAAT,OAAuG;EAAA,IAAlF;IAAEC,aAAF;IAAiBC,WAAjB;IAA8BC,eAA9B;IAA+CC,eAA/C;IAAgEC,QAAQ,GAAG;EAA3E,CAAkF;EACnG,MAAMC,KAAK,GAAGX,MAAM,CAAC;IACjBY,cAAc,EAAE,KADC;IAEjBC,QAAQ,EAAE;EAFO,CAAD,CAApB;EAIA,IAAIC,aAAa,GAAGC,OAAO,CAACR,WAAW,IAAIC,eAAf,IAAkCC,eAAnC,CAA3B;EACA,IAAIC,QAAQ,CAACM,IAAT,IAAiBL,KAAK,CAACM,OAAN,CAAcL,cAAnC,EACIE,aAAa,GAAG,KAAhB;EACJ,MAAMI,WAAW,GAAG,OAAOC,oBAAP,KAAgC,WAAhC,GACdC,8BADc,GAEdC,uBAFN;EAGAH,WAAW,CAACJ,aAAD,EAAgBH,KAAK,CAACM,OAAtB,EAA+BX,aAA/B,EAA8CI,QAA9C,CAAX;AACH;;AACD,MAAMY,cAAc,GAAG;EACnBC,IAAI,EAAE,CADa;EAEnBC,GAAG,EAAE;AAFc,CAAvB;;AAIA,SAASH,uBAAT,CAAiCP,aAAjC,EAAgDH,KAAhD,EAAuDL,aAAvD,SAA2H;EAAA,IAArD;IAAEmB,IAAF;IAAQC,MAAM,EAAEC,UAAhB;IAA4BC,MAAM,GAAG,MAArC;IAA6CZ;EAA7C,CAAqD;EACvHf,SAAS,CAAC,MAAM;IACZ,IAAI,CAACa,aAAL,EACI;IACJ,MAAMe,OAAO,GAAG;MACZJ,IAAI,EAAEA,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACR,OAD3C;MAEZU,UAFY;MAGZG,SAAS,EAAE,OAAOF,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCN,cAAc,CAACM,MAAD;IAHnD,CAAhB;;IAKA,MAAMG,oBAAoB,GAAIC,KAAD,IAAW;MACpC,IAAIC,EAAJ;;MACA,MAAM;QAAEC;MAAF,IAAqBF,KAA3B;MACA;AACZ;AACA;;MACY,IAAIrB,KAAK,CAACE,QAAN,KAAmBqB,cAAvB,EACI;MACJvB,KAAK,CAACE,QAAN,GAAiBqB,cAAjB;MACA;AACZ;AACA;AACA;;MACY,IAAIlB,IAAI,IAAI,CAACkB,cAAT,IAA2BvB,KAAK,CAACC,cAArC,EAAqD;QACjD;MACH,CAFD,MAGK,IAAIsB,cAAJ,EAAoB;QACrBvB,KAAK,CAACC,cAAN,GAAuB,IAAvB;MACH;;MACD,CAACqB,EAAE,GAAG3B,aAAa,CAAC6B,cAApB,MAAwC,IAAxC,IAAgDF,EAAE,KAAK,KAAK,CAA5D,GAAgE,KAAK,CAArE,GAAyEA,EAAE,CAACG,SAAH,CAAalC,aAAa,CAACmC,MAA3B,EAAmCH,cAAnC,CAAzE;MACA;AACZ;AACA;AACA;;MACY,MAAMI,KAAK,GAAGhC,aAAa,CAACiC,QAAd,EAAd;MACA,MAAMC,QAAQ,GAAGN,cAAc,GACzBI,KAAK,CAAC9B,eADmB,GAEzB8B,KAAK,CAAC7B,eAFZ;MAGA+B,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACR,KAAD,CAA5D;IACH,CA7BD;;IA8BA,OAAO5B,mBAAmB,CAACE,aAAa,CAACmC,WAAd,EAAD,EAA8BZ,OAA9B,EAAuCE,oBAAvC,CAA1B;EACH,CAvCQ,EAuCN,CAACjB,aAAD,EAAgBW,IAAhB,EAAsBE,UAAtB,EAAkCC,MAAlC,CAvCM,CAAT;AAwCH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASR,8BAAT,CAAwCN,aAAxC,EAAuDH,KAAvD,EAA8DL,aAA9D,SAAkG;EAAA,IAArB;IAAEoC,QAAQ,GAAG;EAAb,CAAqB;EAC9FzC,SAAS,CAAC,MAAM;IACZ,IAAI,CAACa,aAAD,IAAkB,CAAC4B,QAAvB,EACI;;IACJ,IAAI3C,GAAG,KAAK,YAAZ,EAA0B;MACtBI,QAAQ,CAAC,KAAD,EAAQ,kGAAR,CAAR;IACH;IACD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQwC,qBAAqB,CAAC,MAAM;MACxB,IAAIV,EAAJ;;MACAtB,KAAK,CAACC,cAAN,GAAuB,IAAvB;MACA,MAAM;QAAEJ;MAAF,IAAsBF,aAAa,CAACiC,QAAd,EAA5B;MACA/B,eAAe,KAAK,IAApB,IAA4BA,eAAe,KAAK,KAAK,CAArD,GAAyD,KAAK,CAA9D,GAAkEA,eAAe,CAAC,IAAD,CAAjF;MACA,CAACyB,EAAE,GAAG3B,aAAa,CAAC6B,cAApB,MAAwC,IAAxC,IAAgDF,EAAE,KAAK,KAAK,CAA5D,GAAgE,KAAK,CAArE,GAAyEA,EAAE,CAACG,SAAH,CAAalC,aAAa,CAACmC,MAA3B,EAAmC,IAAnC,CAAzE;IACH,CANoB,CAArB;EAOH,CArBQ,EAqBN,CAACvB,aAAD,CArBM,CAAT;AAsBH;;AAED,SAAST,WAAT"},"metadata":{},"sourceType":"module"}
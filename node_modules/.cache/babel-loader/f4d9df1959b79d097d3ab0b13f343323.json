{"ast":null,"code":"import _slicedToArray from \"C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport sync from 'framesync';\nimport React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\nvar MeasureLayoutWithContext = /*#__PURE__*/function (_React__default$Compo) {\n  _inherits(MeasureLayoutWithContext, _React__default$Compo);\n\n  var _super = _createSuper(MeasureLayoutWithContext);\n\n  function MeasureLayoutWithContext() {\n    _classCallCheck(this, MeasureLayoutWithContext);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MeasureLayoutWithContext, [{\n    key: \"componentDidMount\",\n    value:\n    /**\r\n     * This only mounts projection nodes for components that\r\n     * need measuring, we might want to do it for all components\r\n     * in order to incorporate transforms\r\n     */\n    function componentDidMount() {\n      var _this = this;\n\n      var _this$props = this.props,\n          visualElement = _this$props.visualElement,\n          layoutGroup = _this$props.layoutGroup,\n          switchLayoutGroup = _this$props.switchLayoutGroup,\n          layoutId = _this$props.layoutId;\n      var projection = visualElement.projection;\n      addScaleCorrector(defaultScaleCorrectors);\n\n      if (projection) {\n        if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group) layoutGroup.group.add(projection);\n\n        if ((switchLayoutGroup === null || switchLayoutGroup === void 0 ? void 0 : switchLayoutGroup.register) && layoutId) {\n          switchLayoutGroup.register(projection);\n        }\n\n        projection.root.didUpdate();\n        projection.addEventListener(\"animationComplete\", function () {\n          _this.safeToRemove();\n        });\n        projection.setOptions(Object.assign(Object.assign({}, projection.options), {\n          onExitComplete: function onExitComplete() {\n            return _this.safeToRemove();\n          }\n        }));\n      }\n\n      globalProjectionState.hasEverUpdated = true;\n    }\n  }, {\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps) {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          layoutDependency = _this$props2.layoutDependency,\n          visualElement = _this$props2.visualElement,\n          drag = _this$props2.drag,\n          isPresent = _this$props2.isPresent;\n      var projection = visualElement.projection;\n      if (!projection) return null;\n      /**\r\n       * TODO: We use this data in relegate to determine whether to\r\n       * promote a previous element. There's no guarantee its presence data\r\n       * will have updated by this point - if a bug like this arises it will\r\n       * have to be that we markForRelegation and then find a new lead some other way,\r\n       * perhaps in didUpdate\r\n       */\n\n      projection.isPresent = isPresent;\n\n      if (drag || prevProps.layoutDependency !== layoutDependency || layoutDependency === undefined) {\n        projection.willUpdate();\n      } else {\n        this.safeToRemove();\n      }\n\n      if (prevProps.isPresent !== isPresent) {\n        if (isPresent) {\n          projection.promote();\n        } else if (!projection.relegate()) {\n          /**\r\n           * If there's another stack member taking over from this one,\r\n           * it's in charge of the exit animation and therefore should\r\n           * be in charge of the safe to remove. Otherwise we call it here.\r\n           */\n          sync.postRender(function () {\n            var _a;\n\n            if (!((_a = projection.getStack()) === null || _a === void 0 ? void 0 : _a.members.length)) {\n              _this2.safeToRemove();\n            }\n          });\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var projection = this.props.visualElement.projection;\n\n      if (projection) {\n        projection.root.didUpdate();\n\n        if (!projection.currentAnimation && projection.isLead()) {\n          this.safeToRemove();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props3 = this.props,\n          visualElement = _this$props3.visualElement,\n          layoutGroup = _this$props3.layoutGroup,\n          promoteContext = _this$props3.switchLayoutGroup;\n      var projection = visualElement.projection;\n\n      if (projection) {\n        projection.scheduleCheckAfterUnmount();\n        if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group) layoutGroup.group.remove(projection);\n        if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister) promoteContext.deregister(projection);\n      }\n    }\n  }, {\n    key: \"safeToRemove\",\n    value: function safeToRemove() {\n      var safeToRemove = this.props.safeToRemove;\n      safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return MeasureLayoutWithContext;\n}(React__default.Component);\n\nfunction MeasureLayout(props) {\n  var _usePresence = usePresence(),\n      _usePresence2 = _slicedToArray(_usePresence, 2),\n      isPresent = _usePresence2[0],\n      safeToRemove = _usePresence2[1];\n\n  var layoutGroup = useContext(LayoutGroupContext);\n  return React__default.createElement(MeasureLayoutWithContext, Object.assign({}, props, {\n    layoutGroup: layoutGroup,\n    switchLayoutGroup: useContext(SwitchLayoutGroupContext),\n    isPresent: isPresent,\n    safeToRemove: safeToRemove\n  }));\n}\n\nvar defaultScaleCorrectors = {\n  borderRadius: Object.assign(Object.assign({}, correctBorderRadius), {\n    applyTo: [\"borderTopLeftRadius\", \"borderTopRightRadius\", \"borderBottomLeftRadius\", \"borderBottomRightRadius\"]\n  }),\n  borderTopLeftRadius: correctBorderRadius,\n  borderTopRightRadius: correctBorderRadius,\n  borderBottomLeftRadius: correctBorderRadius,\n  borderBottomRightRadius: correctBorderRadius,\n  boxShadow: correctBoxShadow\n};\nexport { MeasureLayout };","map":{"version":3,"names":["sync","React__default","useContext","usePresence","LayoutGroupContext","SwitchLayoutGroupContext","globalProjectionState","correctBorderRadius","correctBoxShadow","addScaleCorrector","MeasureLayoutWithContext","props","visualElement","layoutGroup","switchLayoutGroup","layoutId","projection","defaultScaleCorrectors","group","add","register","root","didUpdate","addEventListener","safeToRemove","setOptions","Object","assign","options","onExitComplete","hasEverUpdated","prevProps","layoutDependency","drag","isPresent","undefined","willUpdate","promote","relegate","postRender","_a","getStack","members","length","currentAnimation","isLead","promoteContext","scheduleCheckAfterUnmount","remove","deregister","Component","MeasureLayout","createElement","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs"],"sourcesContent":["import sync from 'framesync';\r\nimport React__default, { useContext } from 'react';\r\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\r\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\r\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\r\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\r\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\r\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\r\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\r\n\r\nclass MeasureLayoutWithContext extends React__default.Component {\r\n    /**\r\n     * This only mounts projection nodes for components that\r\n     * need measuring, we might want to do it for all components\r\n     * in order to incorporate transforms\r\n     */\r\n    componentDidMount() {\r\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\r\n        const { projection } = visualElement;\r\n        addScaleCorrector(defaultScaleCorrectors);\r\n        if (projection) {\r\n            if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)\r\n                layoutGroup.group.add(projection);\r\n            if ((switchLayoutGroup === null || switchLayoutGroup === void 0 ? void 0 : switchLayoutGroup.register) && layoutId) {\r\n                switchLayoutGroup.register(projection);\r\n            }\r\n            projection.root.didUpdate();\r\n            projection.addEventListener(\"animationComplete\", () => {\r\n                this.safeToRemove();\r\n            });\r\n            projection.setOptions(Object.assign(Object.assign({}, projection.options), { onExitComplete: () => this.safeToRemove() }));\r\n        }\r\n        globalProjectionState.hasEverUpdated = true;\r\n    }\r\n    getSnapshotBeforeUpdate(prevProps) {\r\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\r\n        const projection = visualElement.projection;\r\n        if (!projection)\r\n            return null;\r\n        /**\r\n         * TODO: We use this data in relegate to determine whether to\r\n         * promote a previous element. There's no guarantee its presence data\r\n         * will have updated by this point - if a bug like this arises it will\r\n         * have to be that we markForRelegation and then find a new lead some other way,\r\n         * perhaps in didUpdate\r\n         */\r\n        projection.isPresent = isPresent;\r\n        if (drag ||\r\n            prevProps.layoutDependency !== layoutDependency ||\r\n            layoutDependency === undefined) {\r\n            projection.willUpdate();\r\n        }\r\n        else {\r\n            this.safeToRemove();\r\n        }\r\n        if (prevProps.isPresent !== isPresent) {\r\n            if (isPresent) {\r\n                projection.promote();\r\n            }\r\n            else if (!projection.relegate()) {\r\n                /**\r\n                 * If there's another stack member taking over from this one,\r\n                 * it's in charge of the exit animation and therefore should\r\n                 * be in charge of the safe to remove. Otherwise we call it here.\r\n                 */\r\n                sync.postRender(() => {\r\n                    var _a;\r\n                    if (!((_a = projection.getStack()) === null || _a === void 0 ? void 0 : _a.members.length)) {\r\n                        this.safeToRemove();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    componentDidUpdate() {\r\n        const { projection } = this.props.visualElement;\r\n        if (projection) {\r\n            projection.root.didUpdate();\r\n            if (!projection.currentAnimation && projection.isLead()) {\r\n                this.safeToRemove();\r\n            }\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\r\n        const { projection } = visualElement;\r\n        if (projection) {\r\n            projection.scheduleCheckAfterUnmount();\r\n            if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)\r\n                layoutGroup.group.remove(projection);\r\n            if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister)\r\n                promoteContext.deregister(projection);\r\n        }\r\n    }\r\n    safeToRemove() {\r\n        const { safeToRemove } = this.props;\r\n        safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();\r\n    }\r\n    render() {\r\n        return null;\r\n    }\r\n}\r\nfunction MeasureLayout(props) {\r\n    const [isPresent, safeToRemove] = usePresence();\r\n    const layoutGroup = useContext(LayoutGroupContext);\r\n    return (React__default.createElement(MeasureLayoutWithContext, Object.assign({}, props, { layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove })));\r\n}\r\nconst defaultScaleCorrectors = {\r\n    borderRadius: Object.assign(Object.assign({}, correctBorderRadius), { applyTo: [\r\n            \"borderTopLeftRadius\",\r\n            \"borderTopRightRadius\",\r\n            \"borderBottomLeftRadius\",\r\n            \"borderBottomRightRadius\",\r\n        ] }),\r\n    borderTopLeftRadius: correctBorderRadius,\r\n    borderTopRightRadius: correctBorderRadius,\r\n    borderBottomLeftRadius: correctBorderRadius,\r\n    borderBottomRightRadius: correctBorderRadius,\r\n    boxShadow: correctBoxShadow,\r\n};\r\n\r\nexport { MeasureLayout };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
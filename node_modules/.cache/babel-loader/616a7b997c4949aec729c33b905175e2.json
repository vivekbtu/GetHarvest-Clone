{"ast":null,"code":"import _slicedToArray from \"C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { mix } from 'popmotion';\nimport { hasTransform } from '../utils/has-transform.mjs';\n/**\r\n * Scales a point based on a factor and an originPoint\r\n */\n\nfunction scalePoint(point, scale, originPoint) {\n  var distanceFromOrigin = point - originPoint;\n  var scaled = scale * distanceFromOrigin;\n  return originPoint + scaled;\n}\n/**\r\n * Applies a translate/scale delta to a point\r\n */\n\n\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n  if (boxScale !== undefined) {\n    point = scalePoint(point, boxScale, originPoint);\n  }\n\n  return scalePoint(point, scale, originPoint) + translate;\n}\n/**\r\n * Applies a translate/scale delta to an axis\r\n */\n\n\nfunction applyAxisDelta(axis) {\n  var translate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var originPoint = arguments.length > 3 ? arguments[3] : undefined;\n  var boxScale = arguments.length > 4 ? arguments[4] : undefined;\n  axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n  axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\r\n * Applies a translate/scale delta to a box\r\n */\n\n\nfunction applyBoxDelta(box, _ref) {\n  var x = _ref.x,\n      y = _ref.y;\n  applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n  applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\n/**\r\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\r\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\r\n *\r\n * This is the final nested loop within updateLayoutDelta for future refactoring\r\n */\n\n\nfunction applyTreeDeltas(box, treeScale, treePath) {\n  var isSharedTransition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  var _a, _b;\n\n  var treeLength = treePath.length;\n  if (!treeLength) return; // Reset the treeScale\n\n  treeScale.x = treeScale.y = 1;\n  var node;\n  var delta;\n\n  for (var i = 0; i < treeLength; i++) {\n    node = treePath[i];\n    delta = node.projectionDelta;\n    if (((_b = (_a = node.instance) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.display) === \"contents\") continue;\n\n    if (isSharedTransition && node.options.layoutScroll && node.scroll && node !== node.root) {\n      transformBox(box, {\n        x: -node.scroll.x,\n        y: -node.scroll.y\n      });\n    }\n\n    if (delta) {\n      // Incoporate each ancestor's scale into a culmulative treeScale for this component\n      treeScale.x *= delta.x.scale;\n      treeScale.y *= delta.y.scale; // Apply each ancestor's calculated delta into this component's recorded layout box\n\n      applyBoxDelta(box, delta);\n    }\n\n    if (isSharedTransition && hasTransform(node.latestValues)) {\n      transformBox(box, node.latestValues);\n    }\n  }\n}\n\nfunction translateAxis(axis, distance) {\n  axis.min = axis.min + distance;\n  axis.max = axis.max + distance;\n}\n/**\r\n * Apply a transform to an axis from the latest resolved motion values.\r\n * This function basically acts as a bridge between a flat motion value map\r\n * and applyAxisDelta\r\n */\n\n\nfunction transformAxis(axis, transforms, _ref2) {\n  var _ref3 = _slicedToArray(_ref2, 3),\n      key = _ref3[0],\n      scaleKey = _ref3[1],\n      originKey = _ref3[2];\n\n  var axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\n  var originPoint = mix(axis.min, axis.max, axisOrigin); // Apply the axis delta to the final axis\n\n  applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\n}\n/**\r\n * The names of the motion values we want to apply as translation, scale and origin.\r\n */\n\n\nvar xKeys = [\"x\", \"scaleX\", \"originX\"];\nvar yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\r\n * Apply a transform to a box from the latest resolved motion values.\r\n */\n\nfunction transformBox(box, transform) {\n  transformAxis(box.x, transform, xKeys);\n  transformAxis(box.y, transform, yKeys);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };","map":{"version":3,"names":["mix","hasTransform","scalePoint","point","scale","originPoint","distanceFromOrigin","scaled","applyPointDelta","translate","boxScale","undefined","applyAxisDelta","axis","min","max","applyBoxDelta","box","x","y","applyTreeDeltas","treeScale","treePath","isSharedTransition","_a","_b","treeLength","length","node","delta","i","projectionDelta","instance","style","display","options","layoutScroll","scroll","root","transformBox","latestValues","translateAxis","distance","transformAxis","transforms","key","scaleKey","originKey","axisOrigin","xKeys","yKeys","transform"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs"],"sourcesContent":["import { mix } from 'popmotion';\r\nimport { hasTransform } from '../utils/has-transform.mjs';\r\n\r\n/**\r\n * Scales a point based on a factor and an originPoint\r\n */\r\nfunction scalePoint(point, scale, originPoint) {\r\n    const distanceFromOrigin = point - originPoint;\r\n    const scaled = scale * distanceFromOrigin;\r\n    return originPoint + scaled;\r\n}\r\n/**\r\n * Applies a translate/scale delta to a point\r\n */\r\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\r\n    if (boxScale !== undefined) {\r\n        point = scalePoint(point, boxScale, originPoint);\r\n    }\r\n    return scalePoint(point, scale, originPoint) + translate;\r\n}\r\n/**\r\n * Applies a translate/scale delta to an axis\r\n */\r\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\r\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\r\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\r\n}\r\n/**\r\n * Applies a translate/scale delta to a box\r\n */\r\nfunction applyBoxDelta(box, { x, y }) {\r\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\r\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\r\n}\r\n/**\r\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\r\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\r\n *\r\n * This is the final nested loop within updateLayoutDelta for future refactoring\r\n */\r\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\r\n    var _a, _b;\r\n    const treeLength = treePath.length;\r\n    if (!treeLength)\r\n        return;\r\n    // Reset the treeScale\r\n    treeScale.x = treeScale.y = 1;\r\n    let node;\r\n    let delta;\r\n    for (let i = 0; i < treeLength; i++) {\r\n        node = treePath[i];\r\n        delta = node.projectionDelta;\r\n        if (((_b = (_a = node.instance) === null || _a === void 0 ? void 0 : _a.style) === null || _b === void 0 ? void 0 : _b.display) === \"contents\")\r\n            continue;\r\n        if (isSharedTransition &&\r\n            node.options.layoutScroll &&\r\n            node.scroll &&\r\n            node !== node.root) {\r\n            transformBox(box, { x: -node.scroll.x, y: -node.scroll.y });\r\n        }\r\n        if (delta) {\r\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\r\n            treeScale.x *= delta.x.scale;\r\n            treeScale.y *= delta.y.scale;\r\n            // Apply each ancestor's calculated delta into this component's recorded layout box\r\n            applyBoxDelta(box, delta);\r\n        }\r\n        if (isSharedTransition && hasTransform(node.latestValues)) {\r\n            transformBox(box, node.latestValues);\r\n        }\r\n    }\r\n}\r\nfunction translateAxis(axis, distance) {\r\n    axis.min = axis.min + distance;\r\n    axis.max = axis.max + distance;\r\n}\r\n/**\r\n * Apply a transform to an axis from the latest resolved motion values.\r\n * This function basically acts as a bridge between a flat motion value map\r\n * and applyAxisDelta\r\n */\r\nfunction transformAxis(axis, transforms, [key, scaleKey, originKey]) {\r\n    const axisOrigin = transforms[originKey] !== undefined ? transforms[originKey] : 0.5;\r\n    const originPoint = mix(axis.min, axis.max, axisOrigin);\r\n    // Apply the axis delta to the final axis\r\n    applyAxisDelta(axis, transforms[key], transforms[scaleKey], originPoint, transforms.scale);\r\n}\r\n/**\r\n * The names of the motion values we want to apply as translation, scale and origin.\r\n */\r\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\r\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\r\n/**\r\n * Apply a transform to a box from the latest resolved motion values.\r\n */\r\nfunction transformBox(box, transform) {\r\n    transformAxis(box.x, transform, xKeys);\r\n    transformAxis(box.y, transform, yKeys);\r\n}\r\n\r\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\r\n"],"mappings":";AAAA,SAASA,GAAT,QAAoB,WAApB;AACA,SAASC,YAAT,QAA6B,4BAA7B;AAEA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,KAA3B,EAAkCC,WAAlC,EAA+C;EAC3C,IAAMC,kBAAkB,GAAGH,KAAK,GAAGE,WAAnC;EACA,IAAME,MAAM,GAAGH,KAAK,GAAGE,kBAAvB;EACA,OAAOD,WAAW,GAAGE,MAArB;AACH;AACD;AACA;AACA;;;AACA,SAASC,eAAT,CAAyBL,KAAzB,EAAgCM,SAAhC,EAA2CL,KAA3C,EAAkDC,WAAlD,EAA+DK,QAA/D,EAAyE;EACrE,IAAIA,QAAQ,KAAKC,SAAjB,EAA4B;IACxBR,KAAK,GAAGD,UAAU,CAACC,KAAD,EAAQO,QAAR,EAAkBL,WAAlB,CAAlB;EACH;;EACD,OAAOH,UAAU,CAACC,KAAD,EAAQC,KAAR,EAAeC,WAAf,CAAV,GAAwCI,SAA/C;AACH;AACD;AACA;AACA;;;AACA,SAASG,cAAT,CAAwBC,IAAxB,EAA+E;EAAA,IAAjDJ,SAAiD,uEAArC,CAAqC;EAAA,IAAlCL,KAAkC,uEAA1B,CAA0B;EAAA,IAAvBC,WAAuB;EAAA,IAAVK,QAAU;EAC3EG,IAAI,CAACC,GAAL,GAAWN,eAAe,CAACK,IAAI,CAACC,GAAN,EAAWL,SAAX,EAAsBL,KAAtB,EAA6BC,WAA7B,EAA0CK,QAA1C,CAA1B;EACAG,IAAI,CAACE,GAAL,GAAWP,eAAe,CAACK,IAAI,CAACE,GAAN,EAAWN,SAAX,EAAsBL,KAAtB,EAA6BC,WAA7B,EAA0CK,QAA1C,CAA1B;AACH;AACD;AACA;AACA;;;AACA,SAASM,aAAT,CAAuBC,GAAvB,QAAsC;EAAA,IAARC,CAAQ,QAARA,CAAQ;EAAA,IAALC,CAAK,QAALA,CAAK;EAClCP,cAAc,CAACK,GAAG,CAACC,CAAL,EAAQA,CAAC,CAACT,SAAV,EAAqBS,CAAC,CAACd,KAAvB,EAA8Bc,CAAC,CAACb,WAAhC,CAAd;EACAO,cAAc,CAACK,GAAG,CAACE,CAAL,EAAQA,CAAC,CAACV,SAAV,EAAqBU,CAAC,CAACf,KAAvB,EAA8Be,CAAC,CAACd,WAAhC,CAAd;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASe,eAAT,CAAyBH,GAAzB,EAA8BI,SAA9B,EAAyCC,QAAzC,EAA+E;EAAA,IAA5BC,kBAA4B,uEAAP,KAAO;;EAC3E,IAAIC,EAAJ,EAAQC,EAAR;;EACA,IAAMC,UAAU,GAAGJ,QAAQ,CAACK,MAA5B;EACA,IAAI,CAACD,UAAL,EACI,OAJuE,CAK3E;;EACAL,SAAS,CAACH,CAAV,GAAcG,SAAS,CAACF,CAAV,GAAc,CAA5B;EACA,IAAIS,IAAJ;EACA,IAAIC,KAAJ;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAApB,EAAgCI,CAAC,EAAjC,EAAqC;IACjCF,IAAI,GAAGN,QAAQ,CAACQ,CAAD,CAAf;IACAD,KAAK,GAAGD,IAAI,CAACG,eAAb;IACA,IAAI,CAAC,CAACN,EAAE,GAAG,CAACD,EAAE,GAAGI,IAAI,CAACI,QAAX,MAAyB,IAAzB,IAAiCR,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACS,KAAnE,MAA8E,IAA9E,IAAsFR,EAAE,KAAK,KAAK,CAAlG,GAAsG,KAAK,CAA3G,GAA+GA,EAAE,CAACS,OAAnH,MAAgI,UAApI,EACI;;IACJ,IAAIX,kBAAkB,IAClBK,IAAI,CAACO,OAAL,CAAaC,YADb,IAEAR,IAAI,CAACS,MAFL,IAGAT,IAAI,KAAKA,IAAI,CAACU,IAHlB,EAGwB;MACpBC,YAAY,CAACtB,GAAD,EAAM;QAAEC,CAAC,EAAE,CAACU,IAAI,CAACS,MAAL,CAAYnB,CAAlB;QAAqBC,CAAC,EAAE,CAACS,IAAI,CAACS,MAAL,CAAYlB;MAArC,CAAN,CAAZ;IACH;;IACD,IAAIU,KAAJ,EAAW;MACP;MACAR,SAAS,CAACH,CAAV,IAAeW,KAAK,CAACX,CAAN,CAAQd,KAAvB;MACAiB,SAAS,CAACF,CAAV,IAAeU,KAAK,CAACV,CAAN,CAAQf,KAAvB,CAHO,CAIP;;MACAY,aAAa,CAACC,GAAD,EAAMY,KAAN,CAAb;IACH;;IACD,IAAIN,kBAAkB,IAAItB,YAAY,CAAC2B,IAAI,CAACY,YAAN,CAAtC,EAA2D;MACvDD,YAAY,CAACtB,GAAD,EAAMW,IAAI,CAACY,YAAX,CAAZ;IACH;EACJ;AACJ;;AACD,SAASC,aAAT,CAAuB5B,IAAvB,EAA6B6B,QAA7B,EAAuC;EACnC7B,IAAI,CAACC,GAAL,GAAWD,IAAI,CAACC,GAAL,GAAW4B,QAAtB;EACA7B,IAAI,CAACE,GAAL,GAAWF,IAAI,CAACE,GAAL,GAAW2B,QAAtB;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CAAuB9B,IAAvB,EAA6B+B,UAA7B,SAAqE;EAAA;EAAA,IAA3BC,GAA2B;EAAA,IAAtBC,QAAsB;EAAA,IAAZC,SAAY;;EACjE,IAAMC,UAAU,GAAGJ,UAAU,CAACG,SAAD,CAAV,KAA0BpC,SAA1B,GAAsCiC,UAAU,CAACG,SAAD,CAAhD,GAA8D,GAAjF;EACA,IAAM1C,WAAW,GAAGL,GAAG,CAACa,IAAI,CAACC,GAAN,EAAWD,IAAI,CAACE,GAAhB,EAAqBiC,UAArB,CAAvB,CAFiE,CAGjE;;EACApC,cAAc,CAACC,IAAD,EAAO+B,UAAU,CAACC,GAAD,CAAjB,EAAwBD,UAAU,CAACE,QAAD,CAAlC,EAA8CzC,WAA9C,EAA2DuC,UAAU,CAACxC,KAAtE,CAAd;AACH;AACD;AACA;AACA;;;AACA,IAAM6C,KAAK,GAAG,CAAC,GAAD,EAAM,QAAN,EAAgB,SAAhB,CAAd;AACA,IAAMC,KAAK,GAAG,CAAC,GAAD,EAAM,QAAN,EAAgB,SAAhB,CAAd;AACA;AACA;AACA;;AACA,SAASX,YAAT,CAAsBtB,GAAtB,EAA2BkC,SAA3B,EAAsC;EAClCR,aAAa,CAAC1B,GAAG,CAACC,CAAL,EAAQiC,SAAR,EAAmBF,KAAnB,CAAb;EACAN,aAAa,CAAC1B,GAAG,CAACE,CAAL,EAAQgC,SAAR,EAAmBD,KAAnB,CAAb;AACH;;AAED,SAAStC,cAAT,EAAyBI,aAAzB,EAAwCR,eAAxC,EAAyDY,eAAzD,EAA0ElB,UAA1E,EAAsFyC,aAAtF,EAAqGJ,YAArG,EAAmHE,aAAnH"},"metadata":{},"sourceType":"module"}
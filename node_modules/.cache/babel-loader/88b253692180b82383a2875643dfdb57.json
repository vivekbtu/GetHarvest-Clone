{"ast":null,"code":"import _toConsumableArray from \"C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { transformAxes } from '../../render/html/utils/transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\n/**\r\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\r\n * which has a noticeable difference in spring animations\r\n */\n\nvar animationTarget = 1000;\n\nfunction createProjectionNode(_ref) {\n  var attachResizeListener = _ref.attachResizeListener,\n      defaultParent = _ref.defaultParent,\n      measureScroll = _ref.measureScroll,\n      checkIsScrollRoot = _ref.checkIsScrollRoot,\n      _resetTransform = _ref.resetTransform;\n  return /*#__PURE__*/function () {\n    function ProjectionNode(id) {\n      var _this = this;\n\n      var latestValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n\n      _classCallCheck(this, ProjectionNode);\n\n      /**\r\n       * A Set containing all this component's children. This is used to iterate\r\n       * through the children.\r\n       *\r\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\r\n       */\n      this.children = new Set();\n      /**\r\n       * Options for the node. We use this to configure what kind of layout animations\r\n       * we should perform (if any).\r\n       */\n\n      this.options = {};\n      /**\r\n       * We use this to detect when its safe to shut down part of a projection tree.\r\n       * We have to keep projecting children for scale correction and relative projection\r\n       * until all their parents stop performing layout animations.\r\n       */\n\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\r\n       * Flag to true if we think this layout has been changed. We can't always know this,\r\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\r\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\r\n       * and if one node is dirtied, they all are.\r\n       */\n\n      this.isLayoutDirty = false;\n      /**\r\n       * Block layout updates for instant layout transitions throughout the tree.\r\n       */\n\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\r\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\r\n       * call.\r\n       */\n\n      this.isUpdating = false;\n      /**\r\n       * If this is an SVG element we currently disable projection transforms\r\n       */\n\n      this.isSVG = false;\n      /**\r\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\r\n       * its projection styles.\r\n       */\n\n      this.needsReset = false;\n      /**\r\n       * Flags whether this node should have its transform reset prior to measuring.\r\n       */\n\n      this.shouldResetTransform = false;\n      /**\r\n       * An object representing the calculated contextual/accumulated/tree scale.\r\n       * This will be used to scale calculcated projection transforms, as these are\r\n       * calculated in screen-space but need to be scaled for elements to actually\r\n       * make it to their calculated destinations.\r\n       *\r\n       * TODO: Lazy-init\r\n       */\n\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\r\n       *\r\n       */\n\n      this.eventHandlers = new Map(); // Note: Currently only running on root node\n\n      this.potentialNodes = new Map();\n\n      this.checkUpdateFailed = function () {\n        if (_this.isUpdating) {\n          _this.isUpdating = false;\n\n          _this.clearAllSnapshots();\n        }\n      };\n\n      this.updateProjection = function () {\n        _this.nodes.forEach(resolveTargetDelta);\n\n        _this.nodes.forEach(calcProjection);\n      };\n\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\r\n       * Shared layout\r\n       */\n      // TODO Only running on root node\n\n      this.sharedNodes = new Map();\n      this.id = id;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [].concat(_toConsumableArray(parent.path), [parent]) : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      id && this.root.registerPotentialNode(id, this);\n\n      for (var i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n\n    _createClass(ProjectionNode, [{\n      key: \"addEventListener\",\n      value: function addEventListener(name, handler) {\n        if (!this.eventHandlers.has(name)) {\n          this.eventHandlers.set(name, new SubscriptionManager());\n        }\n\n        return this.eventHandlers.get(name).add(handler);\n      }\n    }, {\n      key: \"notifyListeners\",\n      value: function notifyListeners(name) {\n        var subscriptionManager = this.eventHandlers.get(name);\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, args);\n      }\n    }, {\n      key: \"hasListeners\",\n      value: function hasListeners(name) {\n        return this.eventHandlers.has(name);\n      }\n    }, {\n      key: \"registerPotentialNode\",\n      value: function registerPotentialNode(id, node) {\n        this.potentialNodes.set(id, node);\n      }\n      /**\r\n       * Lifecycles\r\n       */\n\n    }, {\n      key: \"mount\",\n      value: function mount(instance) {\n        var _this2 = this;\n\n        var isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        var _a;\n\n        if (this.instance) return;\n        this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n        this.instance = instance;\n        var _this$options = this.options,\n            layoutId = _this$options.layoutId,\n            layout = _this$options.layout,\n            visualElement = _this$options.visualElement;\n\n        if (visualElement && !visualElement.getInstance()) {\n          visualElement.mount(instance);\n        }\n\n        this.root.nodes.add(this);\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n        this.id && this.root.potentialNodes.delete(this.id);\n\n        if (isLayoutDirty && (layout || layoutId)) {\n          this.isLayoutDirty = true;\n        }\n\n        if (attachResizeListener) {\n          var unblockTimeout;\n\n          var resizeUnblockUpdate = function resizeUnblockUpdate() {\n            return _this2.root.updateBlockedByResize = false;\n          };\n\n          attachResizeListener(instance, function () {\n            _this2.root.updateBlockedByResize = true;\n            clearTimeout(unblockTimeout);\n            unblockTimeout = window.setTimeout(resizeUnblockUpdate, 250);\n\n            if (globalProjectionState.hasAnimatedSinceResize) {\n              globalProjectionState.hasAnimatedSinceResize = false;\n\n              _this2.nodes.forEach(finishAnimation);\n            }\n          });\n        }\n\n        if (layoutId) {\n          this.root.registerSharedNode(layoutId, this);\n        } // Only register the handler if it requires layout animation\n\n\n        if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n          this.addEventListener(\"didUpdate\", function (_ref2) {\n            var delta = _ref2.delta,\n                hasLayoutChanged = _ref2.hasLayoutChanged,\n                hasRelativeTargetChanged = _ref2.hasRelativeTargetChanged,\n                newLayout = _ref2.layout;\n\n            var _a, _b, _c, _d, _e;\n\n            if (_this2.isTreeAnimationBlocked()) {\n              _this2.target = undefined;\n              _this2.relativeTarget = undefined;\n              return;\n            } // TODO: Check here if an animation exists\n\n\n            var layoutTransition = (_b = (_a = _this2.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n\n            var _visualElement$getPro = visualElement.getProps(),\n                onLayoutAnimationStart = _visualElement$getPro.onLayoutAnimationStart,\n                onLayoutAnimationComplete = _visualElement$getPro.onLayoutAnimationComplete;\n            /**\r\n             * The target layout of the element might stay the same,\r\n             * but its position relative to its parent has changed.\r\n             */\n\n\n            var targetChanged = !_this2.targetLayout || !boxEquals(_this2.targetLayout, newLayout) || hasRelativeTargetChanged;\n            /**\r\n             * If the layout hasn't seemed to have changed, it might be that the\r\n             * element is visually in the same place in the document but its position\r\n             * relative to its parent has indeed changed. So here we check for that.\r\n             */\n\n            var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n\n            if (((_c = _this2.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this2.currentAnimation)) {\n              if (_this2.resumeFrom) {\n                _this2.resumingFrom = _this2.resumeFrom;\n                _this2.resumingFrom.resumingFrom = undefined;\n              }\n\n              _this2.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n\n              var animationOptions = Object.assign(Object.assign({}, getValueTransition(layoutTransition, \"layout\")), {\n                onPlay: onLayoutAnimationStart,\n                onComplete: onLayoutAnimationComplete\n              });\n\n              if (visualElement.shouldReduceMotion) {\n                animationOptions.delay = 0;\n                animationOptions.type = false;\n              }\n\n              _this2.startAnimation(animationOptions);\n            } else {\n              /**\r\n               * If the layout hasn't changed and we have an animation that hasn't started yet,\r\n               * finish it immediately. Otherwise it will be animating from a location\r\n               * that was probably never commited to screen and look like a jumpy box.\r\n               */\n              if (!hasLayoutChanged && _this2.animationProgress === 0) {\n                _this2.finishAnimation();\n              }\n\n              _this2.isLead() && ((_e = (_d = _this2.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n            }\n\n            _this2.targetLayout = newLayout;\n          });\n        }\n      }\n    }, {\n      key: \"unmount\",\n      value: function unmount() {\n        var _a, _b;\n\n        this.options.layoutId && this.willUpdate();\n        this.root.nodes.remove(this);\n        (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n        (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n        this.instance = undefined;\n        cancelSync.preRender(this.updateProjection);\n      } // only on the root\n\n    }, {\n      key: \"blockUpdate\",\n      value: function blockUpdate() {\n        this.updateManuallyBlocked = true;\n      }\n    }, {\n      key: \"unblockUpdate\",\n      value: function unblockUpdate() {\n        this.updateManuallyBlocked = false;\n      }\n    }, {\n      key: \"isUpdateBlocked\",\n      value: function isUpdateBlocked() {\n        return this.updateManuallyBlocked || this.updateBlockedByResize;\n      }\n    }, {\n      key: \"isTreeAnimationBlocked\",\n      value: function isTreeAnimationBlocked() {\n        var _a;\n\n        return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n      } // Note: currently only running on root node\n\n    }, {\n      key: \"startUpdate\",\n      value: function startUpdate() {\n        var _a;\n\n        if (this.isUpdateBlocked()) return;\n        this.isUpdating = true;\n        (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n      }\n    }, {\n      key: \"willUpdate\",\n      value: function willUpdate() {\n        var shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        var _a, _b, _c;\n\n        if (this.root.isUpdateBlocked()) {\n          (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n          return;\n        }\n\n        !this.root.isUpdating && this.root.startUpdate();\n        if (this.isLayoutDirty) return;\n        this.isLayoutDirty = true;\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          node.shouldResetTransform = true;\n          /**\r\n           * TODO: Check we haven't updated the scroll\r\n           * since the last didUpdate\r\n           */\n\n          node.updateScroll();\n        }\n\n        var _this$options2 = this.options,\n            layoutId = _this$options2.layoutId,\n            layout = _this$options2.layout;\n        if (layoutId === undefined && !layout) return;\n        var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n        this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n        this.updateSnapshot();\n        shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n      } // Note: Currently only running on root node\n\n    }, {\n      key: \"didUpdate\",\n      value: function didUpdate() {\n        var updateWasBlocked = this.isUpdateBlocked(); // When doing an instant transition, we skip the layout update,\n        // but should still clean up the measurements so that the next\n        // snapshot could be taken correctly.\n\n        if (updateWasBlocked) {\n          this.unblockUpdate();\n          this.clearAllSnapshots();\n          this.nodes.forEach(clearMeasurements);\n          return;\n        }\n\n        if (!this.isUpdating) return;\n        this.isUpdating = false;\n        /**\r\n         * Search for and mount newly-added projection elements.\r\n         *\r\n         * TODO: Every time a new component is rendered we could search up the tree for\r\n         * the closest mounted node and query from there rather than document.\r\n         */\n\n        if (this.potentialNodes.size) {\n          this.potentialNodes.forEach(mountNodeEarly);\n          this.potentialNodes.clear();\n        }\n        /**\r\n         * Write\r\n         */\n\n\n        this.nodes.forEach(resetTransformStyle);\n        /**\r\n         * Read ==================\r\n         */\n        // Update layout measurements of updated children\n\n        this.nodes.forEach(updateLayout);\n        /**\r\n         * Write\r\n         */\n        // Notify listeners that the layout is updated\n\n        this.nodes.forEach(notifyLayoutUpdate);\n        this.clearAllSnapshots(); // Flush any scheduled updates\n\n        flushSync.update();\n        flushSync.preRender();\n        flushSync.render();\n      }\n    }, {\n      key: \"clearAllSnapshots\",\n      value: function clearAllSnapshots() {\n        this.nodes.forEach(clearSnapshot);\n        this.sharedNodes.forEach(removeLeadSnapshots);\n      }\n    }, {\n      key: \"scheduleUpdateProjection\",\n      value: function scheduleUpdateProjection() {\n        sync.preRender(this.updateProjection, false, true);\n      }\n    }, {\n      key: \"scheduleCheckAfterUnmount\",\n      value: function scheduleCheckAfterUnmount() {\n        var _this3 = this;\n\n        /**\r\n         * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\r\n         * we manually call didUpdate to give a chance to the siblings to animate.\r\n         * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\r\n         */\n        sync.postRender(function () {\n          if (_this3.isLayoutDirty) {\n            _this3.root.didUpdate();\n          } else {\n            _this3.root.checkUpdateFailed();\n          }\n        });\n      }\n      /**\r\n       * Update measurements\r\n       */\n\n    }, {\n      key: \"updateSnapshot\",\n      value: function updateSnapshot() {\n        if (this.snapshot || !this.instance) return;\n        var measured = this.measure();\n        var layout = this.removeTransform(this.removeElementScroll(measured));\n        roundBox(layout);\n        this.snapshot = {\n          measured: measured,\n          layout: layout,\n          latestValues: {}\n        };\n      }\n    }, {\n      key: \"updateLayout\",\n      value: function updateLayout() {\n        var _a;\n\n        if (!this.instance) return; // TODO: Incorporate into a forwarded scroll offset\n\n        this.updateScroll();\n\n        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n          return;\n        }\n        /**\r\n         * When a node is mounted, it simply resumes from the prevLead's\r\n         * snapshot instead of taking a new one, but the ancestors scroll\r\n         * might have updated while the prevLead is unmounted. We need to\r\n         * update the scroll again to make sure the layout we measure is\r\n         * up to date.\r\n         */\n\n\n        if (this.resumeFrom && !this.resumeFrom.instance) {\n          for (var i = 0; i < this.path.length; i++) {\n            var node = this.path[i];\n            node.updateScroll();\n          }\n        }\n\n        var measured = this.measure();\n        roundBox(measured);\n        var prevLayout = this.layout;\n        this.layout = {\n          measured: measured,\n          actual: this.removeElementScroll(measured)\n        };\n        this.layoutCorrected = createBox();\n        this.isLayoutDirty = false;\n        this.projectionDelta = undefined;\n        this.notifyListeners(\"measure\", this.layout.actual);\n        (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n      }\n    }, {\n      key: \"updateScroll\",\n      value: function updateScroll() {\n        if (this.options.layoutScroll && this.instance) {\n          this.isScrollRoot = checkIsScrollRoot(this.instance);\n          this.scroll = measureScroll(this.instance);\n        }\n      }\n    }, {\n      key: \"resetTransform\",\n      value: function resetTransform() {\n        var _a;\n\n        if (!_resetTransform) return;\n        var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n        var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n        var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n        var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n        var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n\n        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n          _resetTransform(this.instance, transformTemplateValue);\n\n          this.shouldResetTransform = false;\n          this.scheduleRender();\n        }\n      }\n    }, {\n      key: \"measure\",\n      value: function measure() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return createBox();\n        var box = visualElement.measureViewportBox(); // Remove viewport scroll to give page-relative coordinates\n\n        var scroll = this.root.scroll;\n\n        if (scroll) {\n          translateAxis(box.x, scroll.x);\n          translateAxis(box.y, scroll.y);\n        }\n\n        return box;\n      }\n    }, {\n      key: \"removeElementScroll\",\n      value: function removeElementScroll(box) {\n        var boxWithoutScroll = createBox();\n        copyBoxInto(boxWithoutScroll, box);\n        /**\r\n         * Performance TODO: Keep a cumulative scroll offset down the tree\r\n         * rather than loop back up the path.\r\n         */\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          var scroll = node.scroll,\n              options = node.options,\n              isScrollRoot = node.isScrollRoot;\n\n          if (node !== this.root && scroll && options.layoutScroll) {\n            /**\r\n             * If this is a new scroll root, we want to remove all previous scrolls\r\n             * from the viewport box.\r\n             */\n            if (isScrollRoot) {\n              copyBoxInto(boxWithoutScroll, box);\n              var rootScroll = this.root.scroll;\n              /**\r\n               * Undo the application of page scroll that was originally added\r\n               * to the measured bounding box.\r\n               */\n\n              if (rootScroll) {\n                translateAxis(boxWithoutScroll.x, -rootScroll.x);\n                translateAxis(boxWithoutScroll.y, -rootScroll.y);\n              }\n            }\n\n            translateAxis(boxWithoutScroll.x, scroll.x);\n            translateAxis(boxWithoutScroll.y, scroll.y);\n          }\n        }\n\n        return boxWithoutScroll;\n      }\n    }, {\n      key: \"applyTransform\",\n      value: function applyTransform(box) {\n        var transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var withTransforms = createBox();\n        copyBoxInto(withTransforms, box);\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n\n          if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(withTransforms, {\n              x: -node.scroll.x,\n              y: -node.scroll.y\n            });\n          }\n\n          if (!hasTransform(node.latestValues)) continue;\n          transformBox(withTransforms, node.latestValues);\n        }\n\n        if (hasTransform(this.latestValues)) {\n          transformBox(withTransforms, this.latestValues);\n        }\n\n        return withTransforms;\n      }\n    }, {\n      key: \"removeTransform\",\n      value: function removeTransform(box) {\n        var _a;\n\n        var boxWithoutTransform = createBox();\n        copyBoxInto(boxWithoutTransform, box);\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!node.instance) continue;\n          if (!hasTransform(node.latestValues)) continue;\n          hasScale(node.latestValues) && node.updateSnapshot();\n          var sourceBox = createBox();\n          var nodeBox = node.measure();\n          copyBoxInto(sourceBox, nodeBox);\n          removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n        }\n\n        if (hasTransform(this.latestValues)) {\n          removeBoxTransforms(boxWithoutTransform, this.latestValues);\n        }\n\n        return boxWithoutTransform;\n      }\n      /**\r\n       *\r\n       */\n\n    }, {\n      key: \"setTargetDelta\",\n      value: function setTargetDelta(delta) {\n        this.targetDelta = delta;\n        this.root.scheduleUpdateProjection();\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(options) {\n        var _a;\n\n        this.options = Object.assign(Object.assign(Object.assign({}, this.options), options), {\n          crossfade: (_a = options.crossfade) !== null && _a !== void 0 ? _a : true\n        });\n      }\n    }, {\n      key: \"clearMeasurements\",\n      value: function clearMeasurements() {\n        this.scroll = undefined;\n        this.layout = undefined;\n        this.snapshot = undefined;\n        this.prevTransformTemplateValue = undefined;\n        this.targetDelta = undefined;\n        this.target = undefined;\n        this.isLayoutDirty = false;\n      }\n      /**\r\n       * Frame calculations\r\n       */\n\n    }, {\n      key: \"resolveTargetDelta\",\n      value: function resolveTargetDelta() {\n        var _a;\n\n        var _this$options3 = this.options,\n            layout = _this$options3.layout,\n            layoutId = _this$options3.layoutId;\n        /**\r\n         * If we have no layout, we can't perform projection, so early return\r\n         */\n\n        if (!this.layout || !(layout || layoutId)) return;\n        /**\r\n         * If we don't have a targetDelta but do have a layout, we can attempt to resolve\r\n         * a relativeParent. This will allow a component to perform scale correction\r\n         * even if no animation has started.\r\n         */\n        // TODO If this is unsuccessful this currently happens every frame\n\n        if (!this.targetDelta && !this.relativeTarget) {\n          // TODO: This is a semi-repetition of further down this function, make DRY\n          this.relativeParent = this.getClosestProjectingParent();\n\n          if (this.relativeParent && this.relativeParent.layout) {\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          }\n        }\n        /**\r\n         * If we have no relative target or no target delta our target isn't valid\r\n         * for this frame.\r\n         */\n\n\n        if (!this.relativeTarget && !this.targetDelta) return;\n        /**\r\n         * Lazy-init target data structure\r\n         */\n\n        if (!this.target) {\n          this.target = createBox();\n          this.targetWithTransforms = createBox();\n        }\n        /**\r\n         * If we've got a relative box for this component, resolve it into a target relative to the parent.\r\n         */\n\n\n        if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n          /**\r\n           * If we've only got a targetDelta, resolve it into a target\r\n           */\n        } else if (this.targetDelta) {\n          if (Boolean(this.resumingFrom)) {\n            // TODO: This is creating a new object every frame\n            this.target = this.applyTransform(this.layout.actual);\n          } else {\n            copyBoxInto(this.target, this.layout.actual);\n          }\n\n          applyBoxDelta(this.target, this.targetDelta);\n        } else {\n          /**\r\n           * If no target, use own layout as target\r\n           */\n          copyBoxInto(this.target, this.layout.actual);\n        }\n        /**\r\n         * If we've been told to attempt to resolve a relative target, do so.\r\n         */\n\n\n        if (this.attemptToResolveRelativeTarget) {\n          this.attemptToResolveRelativeTarget = false;\n          this.relativeParent = this.getClosestProjectingParent();\n\n          if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          }\n        }\n      }\n    }, {\n      key: \"getClosestProjectingParent\",\n      value: function getClosestProjectingParent() {\n        if (!this.parent || hasTransform(this.parent.latestValues)) return undefined;\n\n        if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {\n          return this.parent;\n        } else {\n          return this.parent.getClosestProjectingParent();\n        }\n      }\n    }, {\n      key: \"calcProjection\",\n      value: function calcProjection() {\n        var _a;\n\n        var _this$options4 = this.options,\n            layout = _this$options4.layout,\n            layoutId = _this$options4.layoutId;\n        /**\r\n         * If this section of the tree isn't animating we can\r\n         * delete our target sources for the following frame.\r\n         */\n\n        this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n\n        if (!this.isTreeAnimating) {\n          this.targetDelta = this.relativeTarget = undefined;\n        }\n\n        if (!this.layout || !(layout || layoutId)) return;\n        var lead = this.getLead();\n        /**\r\n         * Reset the corrected box with the latest values from box, as we're then going\r\n         * to perform mutative operations on it.\r\n         */\n\n        copyBoxInto(this.layoutCorrected, this.layout.actual);\n        /**\r\n         * Apply all the parent deltas to this box to produce the corrected box. This\r\n         * is the layout box, as it will appear on screen as a result of the transforms of its parents.\r\n         */\n\n        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n        var target = lead.target;\n        if (!target) return;\n\n        if (!this.projectionDelta) {\n          this.projectionDelta = createDelta();\n          this.projectionDeltaWithTransform = createDelta();\n        }\n\n        var prevTreeScaleX = this.treeScale.x;\n        var prevTreeScaleY = this.treeScale.y;\n        var prevProjectionTransform = this.projectionTransform;\n        /**\r\n         * Update the delta between the corrected box and the target box before user-set transforms were applied.\r\n         * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\r\n         * for our layout reprojection, but still allow them to be scaled correctly by the user.\r\n         * It might be that to simplify this we may want to accept that user-set scale is also corrected\r\n         * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\r\n         * to allow people to choose whether these styles are corrected based on just the\r\n         * layout reprojection or the final bounding box.\r\n         */\n\n        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n        this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n\n        if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n          this.hasProjected = true;\n          this.scheduleRender();\n          this.notifyListeners(\"projectionUpdate\", target);\n        }\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.isVisible = false; // TODO: Schedule render\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.isVisible = true; // TODO: Schedule render\n      }\n    }, {\n      key: \"scheduleRender\",\n      value: function scheduleRender() {\n        var notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        var _a, _b, _c;\n\n        (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n        notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n\n        if (this.resumingFrom && !this.resumingFrom.instance) {\n          this.resumingFrom = undefined;\n        }\n      }\n    }, {\n      key: \"setAnimationOrigin\",\n      value: function setAnimationOrigin(delta) {\n        var _this4 = this;\n\n        var hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        var _a;\n\n        var snapshot = this.snapshot;\n        var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n        var mixedValues = Object.assign({}, this.latestValues);\n        var targetDelta = createDelta();\n        this.relativeTarget = this.relativeTargetOrigin = undefined;\n        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n        var relativeLayout = createBox();\n        var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n        var isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n        var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n        this.animationProgress = 0;\n\n        this.mixTargetDelta = function (latest) {\n          var _a;\n\n          var progress = latest / 1000;\n          mixAxisDelta(targetDelta.x, delta.x, progress);\n          mixAxisDelta(targetDelta.y, delta.y, progress);\n\n          _this4.setTargetDelta(targetDelta);\n\n          if (_this4.relativeTarget && _this4.relativeTargetOrigin && _this4.layout && ((_a = _this4.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n            calcRelativePosition(relativeLayout, _this4.layout.actual, _this4.relativeParent.layout.actual);\n            mixBox(_this4.relativeTarget, _this4.relativeTargetOrigin, relativeLayout, progress);\n          }\n\n          if (isSharedLayoutAnimation) {\n            _this4.animationValues = mixedValues;\n            mixValues(mixedValues, snapshotLatestValues, _this4.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n          }\n\n          _this4.root.scheduleUpdateProjection();\n\n          _this4.scheduleRender();\n\n          _this4.animationProgress = progress;\n        };\n\n        this.mixTargetDelta(0);\n      }\n    }, {\n      key: \"startAnimation\",\n      value: function startAnimation(options) {\n        var _this5 = this;\n\n        var _a, _b;\n\n        this.notifyListeners(\"animationStart\");\n        (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n\n        if (this.resumingFrom) {\n          (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n        }\n\n        if (this.pendingAnimation) {\n          cancelSync.update(this.pendingAnimation);\n          this.pendingAnimation = undefined;\n        }\n        /**\r\n         * Start the animation in the next frame to have a frame with progress 0,\r\n         * where the target is the same as when the animation started, so we can\r\n         * calculate the relative positions correctly for instant transitions.\r\n         */\n\n\n        this.pendingAnimation = sync.update(function () {\n          globalProjectionState.hasAnimatedSinceResize = true;\n          _this5.currentAnimation = animate(0, animationTarget, Object.assign(Object.assign({}, options), {\n            onUpdate: function onUpdate(latest) {\n              var _a;\n\n              _this5.mixTargetDelta(latest);\n\n              (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n            },\n            onComplete: function onComplete() {\n              var _a;\n\n              (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n\n              _this5.completeAnimation();\n            }\n          }));\n\n          if (_this5.resumingFrom) {\n            _this5.resumingFrom.currentAnimation = _this5.currentAnimation;\n          }\n\n          _this5.pendingAnimation = undefined;\n        });\n      }\n    }, {\n      key: \"completeAnimation\",\n      value: function completeAnimation() {\n        var _a;\n\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = undefined;\n          this.resumingFrom.preserveOpacity = undefined;\n        }\n\n        (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n        this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n        this.notifyListeners(\"animationComplete\");\n      }\n    }, {\n      key: \"finishAnimation\",\n      value: function finishAnimation() {\n        var _a;\n\n        if (this.currentAnimation) {\n          (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n          this.currentAnimation.stop();\n        }\n\n        this.completeAnimation();\n      }\n    }, {\n      key: \"applyTransformsToTarget\",\n      value: function applyTransformsToTarget() {\n        var _this$getLead = this.getLead(),\n            targetWithTransforms = _this$getLead.targetWithTransforms,\n            target = _this$getLead.target,\n            layout = _this$getLead.layout,\n            latestValues = _this$getLead.latestValues;\n\n        if (!targetWithTransforms || !target || !layout) return;\n        copyBoxInto(targetWithTransforms, target);\n        /**\r\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\r\n         * This is the final box that we will then project into by calculating a transform delta and\r\n         * applying it to the corrected box.\r\n         */\n\n        transformBox(targetWithTransforms, latestValues);\n        /**\r\n         * Update the delta between the corrected box and the final target box, after\r\n         * user-set transforms are applied to it. This will be used by the renderer to\r\n         * create a transform style that will reproject the element from its actual layout\r\n         * into the desired bounding box.\r\n         */\n\n        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n      }\n    }, {\n      key: \"registerSharedNode\",\n      value: function registerSharedNode(layoutId, node) {\n        var _a, _b, _c;\n\n        if (!this.sharedNodes.has(layoutId)) {\n          this.sharedNodes.set(layoutId, new NodeStack());\n        }\n\n        var stack = this.sharedNodes.get(layoutId);\n        stack.add(node);\n        node.promote({\n          transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n          preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n        });\n      }\n    }, {\n      key: \"isLead\",\n      value: function isLead() {\n        var stack = this.getStack();\n        return stack ? stack.lead === this : true;\n      }\n    }, {\n      key: \"getLead\",\n      value: function getLead() {\n        var _a;\n\n        var layoutId = this.options.layoutId;\n        return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n      }\n    }, {\n      key: \"getPrevLead\",\n      value: function getPrevLead() {\n        var _a;\n\n        var layoutId = this.options.layoutId;\n        return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n      }\n    }, {\n      key: \"getStack\",\n      value: function getStack() {\n        var layoutId = this.options.layoutId;\n        if (layoutId) return this.root.sharedNodes.get(layoutId);\n      }\n    }, {\n      key: \"promote\",\n      value: function promote() {\n        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            needsReset = _ref3.needsReset,\n            transition = _ref3.transition,\n            preserveFollowOpacity = _ref3.preserveFollowOpacity;\n\n        var stack = this.getStack();\n        if (stack) stack.promote(this, preserveFollowOpacity);\n\n        if (needsReset) {\n          this.projectionDelta = undefined;\n          this.needsReset = true;\n        }\n\n        if (transition) this.setOptions({\n          transition: transition\n        });\n      }\n    }, {\n      key: \"relegate\",\n      value: function relegate() {\n        var stack = this.getStack();\n\n        if (stack) {\n          return stack.relegate(this);\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"resetRotation\",\n      value: function resetRotation() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return; // If there's no detected rotation values, we can early return without a forced render.\n\n        var hasRotate = false; // Keep a record of all the values we've reset\n\n        var resetValues = {}; // Check the rotate value of all axes and reset to 0\n\n        for (var i = 0; i < transformAxes.length; i++) {\n          var axis = transformAxes[i];\n          var key = \"rotate\" + axis; // If this rotation doesn't exist as a motion value, then we don't\n          // need to reset it\n\n          if (!visualElement.getStaticValue(key)) {\n            continue;\n          }\n\n          hasRotate = true; // Record the rotation and then temporarily set it to 0\n\n          resetValues[key] = visualElement.getStaticValue(key);\n          visualElement.setStaticValue(key, 0);\n        } // If there's no rotation values, we don't need to do any more.\n\n\n        if (!hasRotate) return; // Force a render of this element to apply the transform with all rotations\n        // set to 0.\n\n        visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender(); // Put back all the values we reset\n\n        for (var _key2 in resetValues) {\n          visualElement.setStaticValue(_key2, resetValues[_key2]);\n        } // Schedule a render for the next frame. This ensures we won't visually\n        // see the element with the reset rotate value applied.\n\n\n        visualElement.scheduleRender();\n      }\n    }, {\n      key: \"getProjectionStyles\",\n      value: function getProjectionStyles() {\n        var styleProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var _a, _b, _c, _d, _e, _f; // TODO: Return lifecycle-persistent object\n\n\n        var styles = {};\n        if (!this.instance || this.isSVG) return styles;\n\n        if (!this.isVisible) {\n          return {\n            visibility: \"hidden\"\n          };\n        } else {\n          styles.visibility = \"\";\n        }\n\n        var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n\n        if (this.needsReset) {\n          this.needsReset = false;\n          styles.opacity = \"\";\n          styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n          return styles;\n        }\n\n        var lead = this.getLead();\n\n        if (!this.projectionDelta || !this.layout || !lead.target) {\n          var emptyStyles = {};\n\n          if (this.options.layoutId) {\n            emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;\n            emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          }\n\n          if (this.hasProjected && !hasTransform(this.latestValues)) {\n            emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n            this.hasProjected = false;\n          }\n\n          return emptyStyles;\n        }\n\n        var valuesToRender = lead.animationValues || lead.latestValues;\n        this.applyTransformsToTarget();\n        styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n\n        if (transformTemplate) {\n          styles.transform = transformTemplate(valuesToRender, styles.transform);\n        }\n\n        var _this$projectionDelta = this.projectionDelta,\n            x = _this$projectionDelta.x,\n            y = _this$projectionDelta.y;\n        styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n\n        if (lead.animationValues) {\n          /**\r\n           * If the lead component is animating, assign this either the entering/leaving\r\n           * opacity\r\n           */\n          styles.opacity = lead === this ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n        } else {\n          /**\r\n           * Or we're not animating at all, set the lead component to its actual\r\n           * opacity and other components to hidden.\r\n           */\n          styles.opacity = lead === this ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : \"\" : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;\n        }\n        /**\r\n         * Apply scale correction\r\n         */\n\n\n        for (var key in scaleCorrectors) {\n          if (valuesToRender[key] === undefined) continue;\n          var _scaleCorrectors$key = scaleCorrectors[key],\n              correct = _scaleCorrectors$key.correct,\n              applyTo = _scaleCorrectors$key.applyTo;\n          var corrected = correct(valuesToRender[key], lead);\n\n          if (applyTo) {\n            var num = applyTo.length;\n\n            for (var i = 0; i < num; i++) {\n              styles[applyTo[i]] = corrected;\n            }\n          } else {\n            styles[key] = corrected;\n          }\n        }\n        /**\r\n         * Disable pointer events on follow components. This is to ensure\r\n         * that if a follow component covers a lead component it doesn't block\r\n         * pointer events on the lead.\r\n         */\n\n\n        if (this.options.layoutId) {\n          styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n        }\n\n        return styles;\n      }\n    }, {\n      key: \"clearSnapshot\",\n      value: function clearSnapshot() {\n        this.resumeFrom = this.snapshot = undefined;\n      } // Only run on root\n\n    }, {\n      key: \"resetTree\",\n      value: function resetTree() {\n        this.root.nodes.forEach(function (node) {\n          var _a;\n\n          return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        });\n        this.root.nodes.forEach(clearMeasurements);\n        this.root.sharedNodes.clear();\n      }\n    }]);\n\n    return ProjectionNode;\n  }();\n}\n\nfunction updateLayout(node) {\n  node.updateLayout();\n}\n\nfunction notifyLayoutUpdate(node) {\n  var _a, _b, _c, _d;\n\n  var snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;\n\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    var _node$layout = node.layout,\n        layout = _node$layout.actual,\n        measuredLayout = _node$layout.measured; // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n\n    if (node.options.animationType === \"size\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        var length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (node.options.animationType === \"position\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        var length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n\n    var layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layout);\n    var visualDelta = createDelta();\n\n    if (snapshot.isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layout);\n    }\n\n    var hasLayoutChanged = !isDeltaZero(layoutDelta);\n    var hasRelativeTargetChanged = false;\n\n    if (!node.resumeFrom) {\n      node.relativeParent = node.getClosestProjectingParent();\n      /**\r\n       * If the relativeParent is itself resuming from a different element then\r\n       * the relative snapshot is not relavent\r\n       */\n\n      if (node.relativeParent && !node.relativeParent.resumeFrom) {\n        var _node$relativeParent = node.relativeParent,\n            parentSnapshot = _node$relativeParent.snapshot,\n            parentLayout = _node$relativeParent.layout;\n\n        if (parentSnapshot && parentLayout) {\n          var relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n          var relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.actual);\n\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n        }\n      }\n    }\n\n    node.notifyListeners(\"didUpdate\", {\n      layout: layout,\n      snapshot: snapshot,\n      delta: visualDelta,\n      layoutDelta: layoutDelta,\n      hasLayoutChanged: hasLayoutChanged,\n      hasRelativeTargetChanged: hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);\n  }\n  /**\r\n   * Clearing transition\r\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\r\n   * and why we need it at all\r\n   */\n\n\n  node.options.transition = undefined;\n}\n\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\n\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\n\nfunction resetTransformStyle(node) {\n  var visualElement = node.options.visualElement;\n\n  if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notifyBeforeLayoutMeasure();\n  }\n\n  node.resetTransform();\n}\n\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\n\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\n\nfunction calcProjection(node) {\n  node.calcProjection();\n}\n\nfunction resetRotation(node) {\n  node.resetRotation();\n}\n\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\n\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\n\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\n\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\n\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\n\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\n\nfunction mountNodeEarly(node, id) {\n  /**\r\n   * Rather than searching the DOM from document we can search the\r\n   * path for the deepest mounted ancestor and search from there\r\n   */\n  var searchNode = node.root;\n\n  for (var i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n\n  var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(id, \"\\\"]\"));\n  if (element) node.mount(element, true);\n}\n\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\n\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };","map":{"version":3,"names":["sync","cancelSync","flushSync","mix","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","transformAxes","FlatTree","resolveMotionValue","globalProjectionState","animationTarget","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","id","latestValues","parent","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","length","name","handler","has","set","get","add","subscriptionManager","args","notify","node","instance","_a","SVGElement","tagName","layoutId","layout","visualElement","getInstance","mount","delete","unblockTimeout","resizeUnblockUpdate","clearTimeout","window","setTimeout","hasAnimatedSinceResize","finishAnimation","registerSharedNode","addEventListener","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","_b","_c","_d","_e","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","getProps","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","Object","assign","onPlay","onComplete","shouldReduceMotion","delay","type","startAnimation","isLead","onExitComplete","call","willUpdate","remove","getStack","preRender","isUpdateBlocked","resetRotation","shouldNotifyListeners","startUpdate","updateScroll","transformTemplate","prevTransformTemplateValue","updateSnapshot","notifyListeners","updateWasBlocked","unblockUpdate","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","postRender","didUpdate","snapshot","measured","measure","removeTransform","removeElementScroll","roundBox","alwaysMeasureLayout","prevLayout","actual","layoutCorrected","projectionDelta","notifyLayoutMeasure","layoutScroll","isScrollRoot","scroll","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","box","measureViewportBox","boxWithoutScroll","rootScroll","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","targetDelta","scheduleUpdateProjection","crossfade","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","Boolean","applyTransform","attemptToResolveRelativeTarget","pendingAnimation","lead","getLead","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isShared","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","setTargetDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","stack","promote","initialPromotionConfig","preserveFollowOpacity","shouldPreserveFollowOpacity","prevLead","setOptions","relegate","hasRotate","resetValues","axis","key","getStaticValue","setStaticValue","syncRender","styleProp","_f","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","applyTransformsToTarget","transformOrigin","origin","opacityExit","correct","applyTo","corrected","num","hasListeners","measuredLayout","animationType","axisSnapshot","min","max","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","notifyBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"sourcesContent":["import sync, { cancelSync, flushSync } from 'framesync';\r\nimport { mix } from 'popmotion';\r\nimport { animate } from '../../animation/animate.mjs';\r\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\r\nimport { mixValues } from '../animation/mix-values.mjs';\r\nimport { copyBoxInto } from '../geometry/copy.mjs';\r\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\r\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\r\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\r\nimport { createBox, createDelta } from '../geometry/models.mjs';\r\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\r\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\r\nimport { NodeStack } from '../shared/stack.mjs';\r\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\r\nimport { buildProjectionTransform } from '../styles/transform.mjs';\r\nimport { eachAxis } from '../utils/each-axis.mjs';\r\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\r\nimport { transformAxes } from '../../render/html/utils/transform.mjs';\r\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\r\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\r\nimport { globalProjectionState } from './state.mjs';\r\n\r\n/**\r\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\r\n * which has a noticeable difference in spring animations\r\n */\r\nconst animationTarget = 1000;\r\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\r\n    return class ProjectionNode {\r\n        constructor(id, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\r\n            /**\r\n             * A Set containing all this component's children. This is used to iterate\r\n             * through the children.\r\n             *\r\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\r\n             */\r\n            this.children = new Set();\r\n            /**\r\n             * Options for the node. We use this to configure what kind of layout animations\r\n             * we should perform (if any).\r\n             */\r\n            this.options = {};\r\n            /**\r\n             * We use this to detect when its safe to shut down part of a projection tree.\r\n             * We have to keep projecting children for scale correction and relative projection\r\n             * until all their parents stop performing layout animations.\r\n             */\r\n            this.isTreeAnimating = false;\r\n            this.isAnimationBlocked = false;\r\n            /**\r\n             * Flag to true if we think this layout has been changed. We can't always know this,\r\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\r\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\r\n             * and if one node is dirtied, they all are.\r\n             */\r\n            this.isLayoutDirty = false;\r\n            /**\r\n             * Block layout updates for instant layout transitions throughout the tree.\r\n             */\r\n            this.updateManuallyBlocked = false;\r\n            this.updateBlockedByResize = false;\r\n            /**\r\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\r\n             * call.\r\n             */\r\n            this.isUpdating = false;\r\n            /**\r\n             * If this is an SVG element we currently disable projection transforms\r\n             */\r\n            this.isSVG = false;\r\n            /**\r\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\r\n             * its projection styles.\r\n             */\r\n            this.needsReset = false;\r\n            /**\r\n             * Flags whether this node should have its transform reset prior to measuring.\r\n             */\r\n            this.shouldResetTransform = false;\r\n            /**\r\n             * An object representing the calculated contextual/accumulated/tree scale.\r\n             * This will be used to scale calculcated projection transforms, as these are\r\n             * calculated in screen-space but need to be scaled for elements to actually\r\n             * make it to their calculated destinations.\r\n             *\r\n             * TODO: Lazy-init\r\n             */\r\n            this.treeScale = { x: 1, y: 1 };\r\n            /**\r\n             *\r\n             */\r\n            this.eventHandlers = new Map();\r\n            // Note: Currently only running on root node\r\n            this.potentialNodes = new Map();\r\n            this.checkUpdateFailed = () => {\r\n                if (this.isUpdating) {\r\n                    this.isUpdating = false;\r\n                    this.clearAllSnapshots();\r\n                }\r\n            };\r\n            this.updateProjection = () => {\r\n                this.nodes.forEach(resolveTargetDelta);\r\n                this.nodes.forEach(calcProjection);\r\n            };\r\n            this.hasProjected = false;\r\n            this.isVisible = true;\r\n            this.animationProgress = 0;\r\n            /**\r\n             * Shared layout\r\n             */\r\n            // TODO Only running on root node\r\n            this.sharedNodes = new Map();\r\n            this.id = id;\r\n            this.latestValues = latestValues;\r\n            this.root = parent ? parent.root || parent : this;\r\n            this.path = parent ? [...parent.path, parent] : [];\r\n            this.parent = parent;\r\n            this.depth = parent ? parent.depth + 1 : 0;\r\n            id && this.root.registerPotentialNode(id, this);\r\n            for (let i = 0; i < this.path.length; i++) {\r\n                this.path[i].shouldResetTransform = true;\r\n            }\r\n            if (this.root === this)\r\n                this.nodes = new FlatTree();\r\n        }\r\n        addEventListener(name, handler) {\r\n            if (!this.eventHandlers.has(name)) {\r\n                this.eventHandlers.set(name, new SubscriptionManager());\r\n            }\r\n            return this.eventHandlers.get(name).add(handler);\r\n        }\r\n        notifyListeners(name, ...args) {\r\n            const subscriptionManager = this.eventHandlers.get(name);\r\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\r\n        }\r\n        hasListeners(name) {\r\n            return this.eventHandlers.has(name);\r\n        }\r\n        registerPotentialNode(id, node) {\r\n            this.potentialNodes.set(id, node);\r\n        }\r\n        /**\r\n         * Lifecycles\r\n         */\r\n        mount(instance, isLayoutDirty = false) {\r\n            var _a;\r\n            if (this.instance)\r\n                return;\r\n            this.isSVG =\r\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\r\n            this.instance = instance;\r\n            const { layoutId, layout, visualElement } = this.options;\r\n            if (visualElement && !visualElement.getInstance()) {\r\n                visualElement.mount(instance);\r\n            }\r\n            this.root.nodes.add(this);\r\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\r\n            this.id && this.root.potentialNodes.delete(this.id);\r\n            if (isLayoutDirty && (layout || layoutId)) {\r\n                this.isLayoutDirty = true;\r\n            }\r\n            if (attachResizeListener) {\r\n                let unblockTimeout;\r\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\r\n                attachResizeListener(instance, () => {\r\n                    this.root.updateBlockedByResize = true;\r\n                    clearTimeout(unblockTimeout);\r\n                    unblockTimeout = window.setTimeout(resizeUnblockUpdate, 250);\r\n                    if (globalProjectionState.hasAnimatedSinceResize) {\r\n                        globalProjectionState.hasAnimatedSinceResize = false;\r\n                        this.nodes.forEach(finishAnimation);\r\n                    }\r\n                });\r\n            }\r\n            if (layoutId) {\r\n                this.root.registerSharedNode(layoutId, this);\r\n            }\r\n            // Only register the handler if it requires layout animation\r\n            if (this.options.animate !== false &&\r\n                visualElement &&\r\n                (layoutId || layout)) {\r\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\r\n                    var _a, _b, _c, _d, _e;\r\n                    if (this.isTreeAnimationBlocked()) {\r\n                        this.target = undefined;\r\n                        this.relativeTarget = undefined;\r\n                        return;\r\n                    }\r\n                    // TODO: Check here if an animation exists\r\n                    const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\r\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\r\n                    /**\r\n                     * The target layout of the element might stay the same,\r\n                     * but its position relative to its parent has changed.\r\n                     */\r\n                    const targetChanged = !this.targetLayout ||\r\n                        !boxEquals(this.targetLayout, newLayout) ||\r\n                        hasRelativeTargetChanged;\r\n                    /**\r\n                     * If the layout hasn't seemed to have changed, it might be that the\r\n                     * element is visually in the same place in the document but its position\r\n                     * relative to its parent has indeed changed. So here we check for that.\r\n                     */\r\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\r\n                    if (((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) ||\r\n                        hasOnlyRelativeTargetChanged ||\r\n                        (hasLayoutChanged &&\r\n                            (targetChanged || !this.currentAnimation))) {\r\n                        if (this.resumeFrom) {\r\n                            this.resumingFrom = this.resumeFrom;\r\n                            this.resumingFrom.resumingFrom = undefined;\r\n                        }\r\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\r\n                        const animationOptions = Object.assign(Object.assign({}, getValueTransition(layoutTransition, \"layout\")), { onPlay: onLayoutAnimationStart, onComplete: onLayoutAnimationComplete });\r\n                        if (visualElement.shouldReduceMotion) {\r\n                            animationOptions.delay = 0;\r\n                            animationOptions.type = false;\r\n                        }\r\n                        this.startAnimation(animationOptions);\r\n                    }\r\n                    else {\r\n                        /**\r\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\r\n                         * finish it immediately. Otherwise it will be animating from a location\r\n                         * that was probably never commited to screen and look like a jumpy box.\r\n                         */\r\n                        if (!hasLayoutChanged &&\r\n                            this.animationProgress === 0) {\r\n                            this.finishAnimation();\r\n                        }\r\n                        this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\r\n                    }\r\n                    this.targetLayout = newLayout;\r\n                });\r\n            }\r\n        }\r\n        unmount() {\r\n            var _a, _b;\r\n            this.options.layoutId && this.willUpdate();\r\n            this.root.nodes.remove(this);\r\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\r\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\r\n            this.instance = undefined;\r\n            cancelSync.preRender(this.updateProjection);\r\n        }\r\n        // only on the root\r\n        blockUpdate() {\r\n            this.updateManuallyBlocked = true;\r\n        }\r\n        unblockUpdate() {\r\n            this.updateManuallyBlocked = false;\r\n        }\r\n        isUpdateBlocked() {\r\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\r\n        }\r\n        isTreeAnimationBlocked() {\r\n            var _a;\r\n            return (this.isAnimationBlocked ||\r\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\r\n                false);\r\n        }\r\n        // Note: currently only running on root node\r\n        startUpdate() {\r\n            var _a;\r\n            if (this.isUpdateBlocked())\r\n                return;\r\n            this.isUpdating = true;\r\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\r\n        }\r\n        willUpdate(shouldNotifyListeners = true) {\r\n            var _a, _b, _c;\r\n            if (this.root.isUpdateBlocked()) {\r\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n                return;\r\n            }\r\n            !this.root.isUpdating && this.root.startUpdate();\r\n            if (this.isLayoutDirty)\r\n                return;\r\n            this.isLayoutDirty = true;\r\n            for (let i = 0; i < this.path.length; i++) {\r\n                const node = this.path[i];\r\n                node.shouldResetTransform = true;\r\n                /**\r\n                 * TODO: Check we haven't updated the scroll\r\n                 * since the last didUpdate\r\n                 */\r\n                node.updateScroll();\r\n            }\r\n            const { layoutId, layout } = this.options;\r\n            if (layoutId === undefined && !layout)\r\n                return;\r\n            const transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\r\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\r\n            this.updateSnapshot();\r\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\r\n        }\r\n        // Note: Currently only running on root node\r\n        didUpdate() {\r\n            const updateWasBlocked = this.isUpdateBlocked();\r\n            // When doing an instant transition, we skip the layout update,\r\n            // but should still clean up the measurements so that the next\r\n            // snapshot could be taken correctly.\r\n            if (updateWasBlocked) {\r\n                this.unblockUpdate();\r\n                this.clearAllSnapshots();\r\n                this.nodes.forEach(clearMeasurements);\r\n                return;\r\n            }\r\n            if (!this.isUpdating)\r\n                return;\r\n            this.isUpdating = false;\r\n            /**\r\n             * Search for and mount newly-added projection elements.\r\n             *\r\n             * TODO: Every time a new component is rendered we could search up the tree for\r\n             * the closest mounted node and query from there rather than document.\r\n             */\r\n            if (this.potentialNodes.size) {\r\n                this.potentialNodes.forEach(mountNodeEarly);\r\n                this.potentialNodes.clear();\r\n            }\r\n            /**\r\n             * Write\r\n             */\r\n            this.nodes.forEach(resetTransformStyle);\r\n            /**\r\n             * Read ==================\r\n             */\r\n            // Update layout measurements of updated children\r\n            this.nodes.forEach(updateLayout);\r\n            /**\r\n             * Write\r\n             */\r\n            // Notify listeners that the layout is updated\r\n            this.nodes.forEach(notifyLayoutUpdate);\r\n            this.clearAllSnapshots();\r\n            // Flush any scheduled updates\r\n            flushSync.update();\r\n            flushSync.preRender();\r\n            flushSync.render();\r\n        }\r\n        clearAllSnapshots() {\r\n            this.nodes.forEach(clearSnapshot);\r\n            this.sharedNodes.forEach(removeLeadSnapshots);\r\n        }\r\n        scheduleUpdateProjection() {\r\n            sync.preRender(this.updateProjection, false, true);\r\n        }\r\n        scheduleCheckAfterUnmount() {\r\n            /**\r\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\r\n             * we manually call didUpdate to give a chance to the siblings to animate.\r\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\r\n             */\r\n            sync.postRender(() => {\r\n                if (this.isLayoutDirty) {\r\n                    this.root.didUpdate();\r\n                }\r\n                else {\r\n                    this.root.checkUpdateFailed();\r\n                }\r\n            });\r\n        }\r\n        /**\r\n         * Update measurements\r\n         */\r\n        updateSnapshot() {\r\n            if (this.snapshot || !this.instance)\r\n                return;\r\n            const measured = this.measure();\r\n            const layout = this.removeTransform(this.removeElementScroll(measured));\r\n            roundBox(layout);\r\n            this.snapshot = {\r\n                measured,\r\n                layout,\r\n                latestValues: {},\r\n            };\r\n        }\r\n        updateLayout() {\r\n            var _a;\r\n            if (!this.instance)\r\n                return;\r\n            // TODO: Incorporate into a forwarded scroll offset\r\n            this.updateScroll();\r\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\r\n                !this.isLayoutDirty) {\r\n                return;\r\n            }\r\n            /**\r\n             * When a node is mounted, it simply resumes from the prevLead's\r\n             * snapshot instead of taking a new one, but the ancestors scroll\r\n             * might have updated while the prevLead is unmounted. We need to\r\n             * update the scroll again to make sure the layout we measure is\r\n             * up to date.\r\n             */\r\n            if (this.resumeFrom && !this.resumeFrom.instance) {\r\n                for (let i = 0; i < this.path.length; i++) {\r\n                    const node = this.path[i];\r\n                    node.updateScroll();\r\n                }\r\n            }\r\n            const measured = this.measure();\r\n            roundBox(measured);\r\n            const prevLayout = this.layout;\r\n            this.layout = {\r\n                measured,\r\n                actual: this.removeElementScroll(measured),\r\n            };\r\n            this.layoutCorrected = createBox();\r\n            this.isLayoutDirty = false;\r\n            this.projectionDelta = undefined;\r\n            this.notifyListeners(\"measure\", this.layout.actual);\r\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\r\n        }\r\n        updateScroll() {\r\n            if (this.options.layoutScroll && this.instance) {\r\n                this.isScrollRoot = checkIsScrollRoot(this.instance);\r\n                this.scroll = measureScroll(this.instance);\r\n            }\r\n        }\r\n        resetTransform() {\r\n            var _a;\r\n            if (!resetTransform)\r\n                return;\r\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\r\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\r\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\r\n            const transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\r\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\r\n            if (isResetRequested &&\r\n                (hasProjection ||\r\n                    hasTransform(this.latestValues) ||\r\n                    transformTemplateHasChanged)) {\r\n                resetTransform(this.instance, transformTemplateValue);\r\n                this.shouldResetTransform = false;\r\n                this.scheduleRender();\r\n            }\r\n        }\r\n        measure() {\r\n            const { visualElement } = this.options;\r\n            if (!visualElement)\r\n                return createBox();\r\n            const box = visualElement.measureViewportBox();\r\n            // Remove viewport scroll to give page-relative coordinates\r\n            const { scroll } = this.root;\r\n            if (scroll) {\r\n                translateAxis(box.x, scroll.x);\r\n                translateAxis(box.y, scroll.y);\r\n            }\r\n            return box;\r\n        }\r\n        removeElementScroll(box) {\r\n            const boxWithoutScroll = createBox();\r\n            copyBoxInto(boxWithoutScroll, box);\r\n            /**\r\n             * Performance TODO: Keep a cumulative scroll offset down the tree\r\n             * rather than loop back up the path.\r\n             */\r\n            for (let i = 0; i < this.path.length; i++) {\r\n                const node = this.path[i];\r\n                const { scroll, options, isScrollRoot } = node;\r\n                if (node !== this.root && scroll && options.layoutScroll) {\r\n                    /**\r\n                     * If this is a new scroll root, we want to remove all previous scrolls\r\n                     * from the viewport box.\r\n                     */\r\n                    if (isScrollRoot) {\r\n                        copyBoxInto(boxWithoutScroll, box);\r\n                        const { scroll: rootScroll } = this.root;\r\n                        /**\r\n                         * Undo the application of page scroll that was originally added\r\n                         * to the measured bounding box.\r\n                         */\r\n                        if (rootScroll) {\r\n                            translateAxis(boxWithoutScroll.x, -rootScroll.x);\r\n                            translateAxis(boxWithoutScroll.y, -rootScroll.y);\r\n                        }\r\n                    }\r\n                    translateAxis(boxWithoutScroll.x, scroll.x);\r\n                    translateAxis(boxWithoutScroll.y, scroll.y);\r\n                }\r\n            }\r\n            return boxWithoutScroll;\r\n        }\r\n        applyTransform(box, transformOnly = false) {\r\n            const withTransforms = createBox();\r\n            copyBoxInto(withTransforms, box);\r\n            for (let i = 0; i < this.path.length; i++) {\r\n                const node = this.path[i];\r\n                if (!transformOnly &&\r\n                    node.options.layoutScroll &&\r\n                    node.scroll &&\r\n                    node !== node.root) {\r\n                    transformBox(withTransforms, {\r\n                        x: -node.scroll.x,\r\n                        y: -node.scroll.y,\r\n                    });\r\n                }\r\n                if (!hasTransform(node.latestValues))\r\n                    continue;\r\n                transformBox(withTransforms, node.latestValues);\r\n            }\r\n            if (hasTransform(this.latestValues)) {\r\n                transformBox(withTransforms, this.latestValues);\r\n            }\r\n            return withTransforms;\r\n        }\r\n        removeTransform(box) {\r\n            var _a;\r\n            const boxWithoutTransform = createBox();\r\n            copyBoxInto(boxWithoutTransform, box);\r\n            for (let i = 0; i < this.path.length; i++) {\r\n                const node = this.path[i];\r\n                if (!node.instance)\r\n                    continue;\r\n                if (!hasTransform(node.latestValues))\r\n                    continue;\r\n                hasScale(node.latestValues) && node.updateSnapshot();\r\n                const sourceBox = createBox();\r\n                const nodeBox = node.measure();\r\n                copyBoxInto(sourceBox, nodeBox);\r\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\r\n            }\r\n            if (hasTransform(this.latestValues)) {\r\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\r\n            }\r\n            return boxWithoutTransform;\r\n        }\r\n        /**\r\n         *\r\n         */\r\n        setTargetDelta(delta) {\r\n            this.targetDelta = delta;\r\n            this.root.scheduleUpdateProjection();\r\n        }\r\n        setOptions(options) {\r\n            var _a;\r\n            this.options = Object.assign(Object.assign(Object.assign({}, this.options), options), { crossfade: (_a = options.crossfade) !== null && _a !== void 0 ? _a : true });\r\n        }\r\n        clearMeasurements() {\r\n            this.scroll = undefined;\r\n            this.layout = undefined;\r\n            this.snapshot = undefined;\r\n            this.prevTransformTemplateValue = undefined;\r\n            this.targetDelta = undefined;\r\n            this.target = undefined;\r\n            this.isLayoutDirty = false;\r\n        }\r\n        /**\r\n         * Frame calculations\r\n         */\r\n        resolveTargetDelta() {\r\n            var _a;\r\n            const { layout, layoutId } = this.options;\r\n            /**\r\n             * If we have no layout, we can't perform projection, so early return\r\n             */\r\n            if (!this.layout || !(layout || layoutId))\r\n                return;\r\n            /**\r\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\r\n             * a relativeParent. This will allow a component to perform scale correction\r\n             * even if no animation has started.\r\n             */\r\n            // TODO If this is unsuccessful this currently happens every frame\r\n            if (!this.targetDelta && !this.relativeTarget) {\r\n                // TODO: This is a semi-repetition of further down this function, make DRY\r\n                this.relativeParent = this.getClosestProjectingParent();\r\n                if (this.relativeParent && this.relativeParent.layout) {\r\n                    this.relativeTarget = createBox();\r\n                    this.relativeTargetOrigin = createBox();\r\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\r\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\r\n                }\r\n            }\r\n            /**\r\n             * If we have no relative target or no target delta our target isn't valid\r\n             * for this frame.\r\n             */\r\n            if (!this.relativeTarget && !this.targetDelta)\r\n                return;\r\n            /**\r\n             * Lazy-init target data structure\r\n             */\r\n            if (!this.target) {\r\n                this.target = createBox();\r\n                this.targetWithTransforms = createBox();\r\n            }\r\n            /**\r\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\r\n             */\r\n            if (this.relativeTarget &&\r\n                this.relativeTargetOrigin &&\r\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\r\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\r\n                /**\r\n                 * If we've only got a targetDelta, resolve it into a target\r\n                 */\r\n            }\r\n            else if (this.targetDelta) {\r\n                if (Boolean(this.resumingFrom)) {\r\n                    // TODO: This is creating a new object every frame\r\n                    this.target = this.applyTransform(this.layout.actual);\r\n                }\r\n                else {\r\n                    copyBoxInto(this.target, this.layout.actual);\r\n                }\r\n                applyBoxDelta(this.target, this.targetDelta);\r\n            }\r\n            else {\r\n                /**\r\n                 * If no target, use own layout as target\r\n                 */\r\n                copyBoxInto(this.target, this.layout.actual);\r\n            }\r\n            /**\r\n             * If we've been told to attempt to resolve a relative target, do so.\r\n             */\r\n            if (this.attemptToResolveRelativeTarget) {\r\n                this.attemptToResolveRelativeTarget = false;\r\n                this.relativeParent = this.getClosestProjectingParent();\r\n                if (this.relativeParent &&\r\n                    Boolean(this.relativeParent.resumingFrom) ===\r\n                        Boolean(this.resumingFrom) &&\r\n                    !this.relativeParent.options.layoutScroll &&\r\n                    this.relativeParent.target) {\r\n                    this.relativeTarget = createBox();\r\n                    this.relativeTargetOrigin = createBox();\r\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\r\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\r\n                }\r\n            }\r\n        }\r\n        getClosestProjectingParent() {\r\n            if (!this.parent || hasTransform(this.parent.latestValues))\r\n                return undefined;\r\n            if ((this.parent.relativeTarget || this.parent.targetDelta) &&\r\n                this.parent.layout) {\r\n                return this.parent;\r\n            }\r\n            else {\r\n                return this.parent.getClosestProjectingParent();\r\n            }\r\n        }\r\n        calcProjection() {\r\n            var _a;\r\n            const { layout, layoutId } = this.options;\r\n            /**\r\n             * If this section of the tree isn't animating we can\r\n             * delete our target sources for the following frame.\r\n             */\r\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\r\n                this.currentAnimation ||\r\n                this.pendingAnimation);\r\n            if (!this.isTreeAnimating) {\r\n                this.targetDelta = this.relativeTarget = undefined;\r\n            }\r\n            if (!this.layout || !(layout || layoutId))\r\n                return;\r\n            const lead = this.getLead();\r\n            /**\r\n             * Reset the corrected box with the latest values from box, as we're then going\r\n             * to perform mutative operations on it.\r\n             */\r\n            copyBoxInto(this.layoutCorrected, this.layout.actual);\r\n            /**\r\n             * Apply all the parent deltas to this box to produce the corrected box. This\r\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\r\n             */\r\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\r\n            const { target } = lead;\r\n            if (!target)\r\n                return;\r\n            if (!this.projectionDelta) {\r\n                this.projectionDelta = createDelta();\r\n                this.projectionDeltaWithTransform = createDelta();\r\n            }\r\n            const prevTreeScaleX = this.treeScale.x;\r\n            const prevTreeScaleY = this.treeScale.y;\r\n            const prevProjectionTransform = this.projectionTransform;\r\n            /**\r\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\r\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\r\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\r\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\r\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\r\n             * to allow people to choose whether these styles are corrected based on just the\r\n             * layout reprojection or the final bounding box.\r\n             */\r\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\r\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\r\n            if (this.projectionTransform !== prevProjectionTransform ||\r\n                this.treeScale.x !== prevTreeScaleX ||\r\n                this.treeScale.y !== prevTreeScaleY) {\r\n                this.hasProjected = true;\r\n                this.scheduleRender();\r\n                this.notifyListeners(\"projectionUpdate\", target);\r\n            }\r\n        }\r\n        hide() {\r\n            this.isVisible = false;\r\n            // TODO: Schedule render\r\n        }\r\n        show() {\r\n            this.isVisible = true;\r\n            // TODO: Schedule render\r\n        }\r\n        scheduleRender(notifyAll = true) {\r\n            var _a, _b, _c;\r\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\r\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\r\n            if (this.resumingFrom && !this.resumingFrom.instance) {\r\n                this.resumingFrom = undefined;\r\n            }\r\n        }\r\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\r\n            var _a;\r\n            const snapshot = this.snapshot;\r\n            const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\r\n            const mixedValues = Object.assign({}, this.latestValues);\r\n            const targetDelta = createDelta();\r\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\r\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\r\n            const relativeLayout = createBox();\r\n            const isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\r\n            const isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\r\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\r\n                !isOnlyMember &&\r\n                this.options.crossfade === true &&\r\n                !this.path.some(hasOpacityCrossfade));\r\n            this.animationProgress = 0;\r\n            this.mixTargetDelta = (latest) => {\r\n                var _a;\r\n                const progress = latest / 1000;\r\n                mixAxisDelta(targetDelta.x, delta.x, progress);\r\n                mixAxisDelta(targetDelta.y, delta.y, progress);\r\n                this.setTargetDelta(targetDelta);\r\n                if (this.relativeTarget &&\r\n                    this.relativeTargetOrigin &&\r\n                    this.layout &&\r\n                    ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\r\n                    calcRelativePosition(relativeLayout, this.layout.actual, this.relativeParent.layout.actual);\r\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\r\n                }\r\n                if (isSharedLayoutAnimation) {\r\n                    this.animationValues = mixedValues;\r\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\r\n                }\r\n                this.root.scheduleUpdateProjection();\r\n                this.scheduleRender();\r\n                this.animationProgress = progress;\r\n            };\r\n            this.mixTargetDelta(0);\r\n        }\r\n        startAnimation(options) {\r\n            var _a, _b;\r\n            this.notifyListeners(\"animationStart\");\r\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\r\n            if (this.resumingFrom) {\r\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\r\n            }\r\n            if (this.pendingAnimation) {\r\n                cancelSync.update(this.pendingAnimation);\r\n                this.pendingAnimation = undefined;\r\n            }\r\n            /**\r\n             * Start the animation in the next frame to have a frame with progress 0,\r\n             * where the target is the same as when the animation started, so we can\r\n             * calculate the relative positions correctly for instant transitions.\r\n             */\r\n            this.pendingAnimation = sync.update(() => {\r\n                globalProjectionState.hasAnimatedSinceResize = true;\r\n                this.currentAnimation = animate(0, animationTarget, Object.assign(Object.assign({}, options), { onUpdate: (latest) => {\r\n                        var _a;\r\n                        this.mixTargetDelta(latest);\r\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\r\n                    }, onComplete: () => {\r\n                        var _a;\r\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\r\n                        this.completeAnimation();\r\n                    } }));\r\n                if (this.resumingFrom) {\r\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\r\n                }\r\n                this.pendingAnimation = undefined;\r\n            });\r\n        }\r\n        completeAnimation() {\r\n            var _a;\r\n            if (this.resumingFrom) {\r\n                this.resumingFrom.currentAnimation = undefined;\r\n                this.resumingFrom.preserveOpacity = undefined;\r\n            }\r\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\r\n            this.resumingFrom =\r\n                this.currentAnimation =\r\n                    this.animationValues =\r\n                        undefined;\r\n            this.notifyListeners(\"animationComplete\");\r\n        }\r\n        finishAnimation() {\r\n            var _a;\r\n            if (this.currentAnimation) {\r\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\r\n                this.currentAnimation.stop();\r\n            }\r\n            this.completeAnimation();\r\n        }\r\n        applyTransformsToTarget() {\r\n            const { targetWithTransforms, target, layout, latestValues } = this.getLead();\r\n            if (!targetWithTransforms || !target || !layout)\r\n                return;\r\n            copyBoxInto(targetWithTransforms, target);\r\n            /**\r\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\r\n             * This is the final box that we will then project into by calculating a transform delta and\r\n             * applying it to the corrected box.\r\n             */\r\n            transformBox(targetWithTransforms, latestValues);\r\n            /**\r\n             * Update the delta between the corrected box and the final target box, after\r\n             * user-set transforms are applied to it. This will be used by the renderer to\r\n             * create a transform style that will reproject the element from its actual layout\r\n             * into the desired bounding box.\r\n             */\r\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\r\n        }\r\n        registerSharedNode(layoutId, node) {\r\n            var _a, _b, _c;\r\n            if (!this.sharedNodes.has(layoutId)) {\r\n                this.sharedNodes.set(layoutId, new NodeStack());\r\n            }\r\n            const stack = this.sharedNodes.get(layoutId);\r\n            stack.add(node);\r\n            node.promote({\r\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\r\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\r\n            });\r\n        }\r\n        isLead() {\r\n            const stack = this.getStack();\r\n            return stack ? stack.lead === this : true;\r\n        }\r\n        getLead() {\r\n            var _a;\r\n            const { layoutId } = this.options;\r\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\r\n        }\r\n        getPrevLead() {\r\n            var _a;\r\n            const { layoutId } = this.options;\r\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\r\n        }\r\n        getStack() {\r\n            const { layoutId } = this.options;\r\n            if (layoutId)\r\n                return this.root.sharedNodes.get(layoutId);\r\n        }\r\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\r\n            const stack = this.getStack();\r\n            if (stack)\r\n                stack.promote(this, preserveFollowOpacity);\r\n            if (needsReset) {\r\n                this.projectionDelta = undefined;\r\n                this.needsReset = true;\r\n            }\r\n            if (transition)\r\n                this.setOptions({ transition });\r\n        }\r\n        relegate() {\r\n            const stack = this.getStack();\r\n            if (stack) {\r\n                return stack.relegate(this);\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        resetRotation() {\r\n            const { visualElement } = this.options;\r\n            if (!visualElement)\r\n                return;\r\n            // If there's no detected rotation values, we can early return without a forced render.\r\n            let hasRotate = false;\r\n            // Keep a record of all the values we've reset\r\n            const resetValues = {};\r\n            // Check the rotate value of all axes and reset to 0\r\n            for (let i = 0; i < transformAxes.length; i++) {\r\n                const axis = transformAxes[i];\r\n                const key = \"rotate\" + axis;\r\n                // If this rotation doesn't exist as a motion value, then we don't\r\n                // need to reset it\r\n                if (!visualElement.getStaticValue(key)) {\r\n                    continue;\r\n                }\r\n                hasRotate = true;\r\n                // Record the rotation and then temporarily set it to 0\r\n                resetValues[key] = visualElement.getStaticValue(key);\r\n                visualElement.setStaticValue(key, 0);\r\n            }\r\n            // If there's no rotation values, we don't need to do any more.\r\n            if (!hasRotate)\r\n                return;\r\n            // Force a render of this element to apply the transform with all rotations\r\n            // set to 0.\r\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\r\n            // Put back all the values we reset\r\n            for (const key in resetValues) {\r\n                visualElement.setStaticValue(key, resetValues[key]);\r\n            }\r\n            // Schedule a render for the next frame. This ensures we won't visually\r\n            // see the element with the reset rotate value applied.\r\n            visualElement.scheduleRender();\r\n        }\r\n        getProjectionStyles(styleProp = {}) {\r\n            var _a, _b, _c, _d, _e, _f;\r\n            // TODO: Return lifecycle-persistent object\r\n            const styles = {};\r\n            if (!this.instance || this.isSVG)\r\n                return styles;\r\n            if (!this.isVisible) {\r\n                return { visibility: \"hidden\" };\r\n            }\r\n            else {\r\n                styles.visibility = \"\";\r\n            }\r\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\r\n            if (this.needsReset) {\r\n                this.needsReset = false;\r\n                styles.opacity = \"\";\r\n                styles.pointerEvents =\r\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\r\n                styles.transform = transformTemplate\r\n                    ? transformTemplate(this.latestValues, \"\")\r\n                    : \"none\";\r\n                return styles;\r\n            }\r\n            const lead = this.getLead();\r\n            if (!this.projectionDelta || !this.layout || !lead.target) {\r\n                const emptyStyles = {};\r\n                if (this.options.layoutId) {\r\n                    emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;\r\n                    emptyStyles.pointerEvents =\r\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\r\n                }\r\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\r\n                    emptyStyles.transform = transformTemplate\r\n                        ? transformTemplate({}, \"\")\r\n                        : \"none\";\r\n                    this.hasProjected = false;\r\n                }\r\n                return emptyStyles;\r\n            }\r\n            const valuesToRender = lead.animationValues || lead.latestValues;\r\n            this.applyTransformsToTarget();\r\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\r\n            if (transformTemplate) {\r\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\r\n            }\r\n            const { x, y } = this.projectionDelta;\r\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\r\n            if (lead.animationValues) {\r\n                /**\r\n                 * If the lead component is animating, assign this either the entering/leaving\r\n                 * opacity\r\n                 */\r\n                styles.opacity =\r\n                    lead === this\r\n                        ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1\r\n                        : this.preserveOpacity\r\n                            ? this.latestValues.opacity\r\n                            : valuesToRender.opacityExit;\r\n            }\r\n            else {\r\n                /**\r\n                 * Or we're not animating at all, set the lead component to its actual\r\n                 * opacity and other components to hidden.\r\n                 */\r\n                styles.opacity =\r\n                    lead === this\r\n                        ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : \"\"\r\n                        : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;\r\n            }\r\n            /**\r\n             * Apply scale correction\r\n             */\r\n            for (const key in scaleCorrectors) {\r\n                if (valuesToRender[key] === undefined)\r\n                    continue;\r\n                const { correct, applyTo } = scaleCorrectors[key];\r\n                const corrected = correct(valuesToRender[key], lead);\r\n                if (applyTo) {\r\n                    const num = applyTo.length;\r\n                    for (let i = 0; i < num; i++) {\r\n                        styles[applyTo[i]] = corrected;\r\n                    }\r\n                }\r\n                else {\r\n                    styles[key] = corrected;\r\n                }\r\n            }\r\n            /**\r\n             * Disable pointer events on follow components. This is to ensure\r\n             * that if a follow component covers a lead component it doesn't block\r\n             * pointer events on the lead.\r\n             */\r\n            if (this.options.layoutId) {\r\n                styles.pointerEvents =\r\n                    lead === this\r\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\r\n                        : \"none\";\r\n            }\r\n            return styles;\r\n        }\r\n        clearSnapshot() {\r\n            this.resumeFrom = this.snapshot = undefined;\r\n        }\r\n        // Only run on root\r\n        resetTree() {\r\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\r\n            this.root.nodes.forEach(clearMeasurements);\r\n            this.root.sharedNodes.clear();\r\n        }\r\n    };\r\n}\r\nfunction updateLayout(node) {\r\n    node.updateLayout();\r\n}\r\nfunction notifyLayoutUpdate(node) {\r\n    var _a, _b, _c, _d;\r\n    const snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;\r\n    if (node.isLead() &&\r\n        node.layout &&\r\n        snapshot &&\r\n        node.hasListeners(\"didUpdate\")) {\r\n        const { actual: layout, measured: measuredLayout } = node.layout;\r\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\r\n        // animations for instance if layout=\"size\" and an element has only changed position\r\n        if (node.options.animationType === \"size\") {\r\n            eachAxis((axis) => {\r\n                const axisSnapshot = snapshot.isShared\r\n                    ? snapshot.measured[axis]\r\n                    : snapshot.layout[axis];\r\n                const length = calcLength(axisSnapshot);\r\n                axisSnapshot.min = layout[axis].min;\r\n                axisSnapshot.max = axisSnapshot.min + length;\r\n            });\r\n        }\r\n        else if (node.options.animationType === \"position\") {\r\n            eachAxis((axis) => {\r\n                const axisSnapshot = snapshot.isShared\r\n                    ? snapshot.measured[axis]\r\n                    : snapshot.layout[axis];\r\n                const length = calcLength(layout[axis]);\r\n                axisSnapshot.max = axisSnapshot.min + length;\r\n            });\r\n        }\r\n        const layoutDelta = createDelta();\r\n        calcBoxDelta(layoutDelta, layout, snapshot.layout);\r\n        const visualDelta = createDelta();\r\n        if (snapshot.isShared) {\r\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\r\n        }\r\n        else {\r\n            calcBoxDelta(visualDelta, layout, snapshot.layout);\r\n        }\r\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\r\n        let hasRelativeTargetChanged = false;\r\n        if (!node.resumeFrom) {\r\n            node.relativeParent = node.getClosestProjectingParent();\r\n            /**\r\n             * If the relativeParent is itself resuming from a different element then\r\n             * the relative snapshot is not relavent\r\n             */\r\n            if (node.relativeParent && !node.relativeParent.resumeFrom) {\r\n                const { snapshot: parentSnapshot, layout: parentLayout } = node.relativeParent;\r\n                if (parentSnapshot && parentLayout) {\r\n                    const relativeSnapshot = createBox();\r\n                    calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\r\n                    const relativeLayout = createBox();\r\n                    calcRelativePosition(relativeLayout, layout, parentLayout.actual);\r\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\r\n                        hasRelativeTargetChanged = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        node.notifyListeners(\"didUpdate\", {\r\n            layout,\r\n            snapshot,\r\n            delta: visualDelta,\r\n            layoutDelta,\r\n            hasLayoutChanged,\r\n            hasRelativeTargetChanged,\r\n        });\r\n    }\r\n    else if (node.isLead()) {\r\n        (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);\r\n    }\r\n    /**\r\n     * Clearing transition\r\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\r\n     * and why we need it at all\r\n     */\r\n    node.options.transition = undefined;\r\n}\r\nfunction clearSnapshot(node) {\r\n    node.clearSnapshot();\r\n}\r\nfunction clearMeasurements(node) {\r\n    node.clearMeasurements();\r\n}\r\nfunction resetTransformStyle(node) {\r\n    const { visualElement } = node.options;\r\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\r\n        visualElement.notifyBeforeLayoutMeasure();\r\n    }\r\n    node.resetTransform();\r\n}\r\nfunction finishAnimation(node) {\r\n    node.finishAnimation();\r\n    node.targetDelta = node.relativeTarget = node.target = undefined;\r\n}\r\nfunction resolveTargetDelta(node) {\r\n    node.resolveTargetDelta();\r\n}\r\nfunction calcProjection(node) {\r\n    node.calcProjection();\r\n}\r\nfunction resetRotation(node) {\r\n    node.resetRotation();\r\n}\r\nfunction removeLeadSnapshots(stack) {\r\n    stack.removeLeadSnapshot();\r\n}\r\nfunction mixAxisDelta(output, delta, p) {\r\n    output.translate = mix(delta.translate, 0, p);\r\n    output.scale = mix(delta.scale, 1, p);\r\n    output.origin = delta.origin;\r\n    output.originPoint = delta.originPoint;\r\n}\r\nfunction mixAxis(output, from, to, p) {\r\n    output.min = mix(from.min, to.min, p);\r\n    output.max = mix(from.max, to.max, p);\r\n}\r\nfunction mixBox(output, from, to, p) {\r\n    mixAxis(output.x, from.x, to.x, p);\r\n    mixAxis(output.y, from.y, to.y, p);\r\n}\r\nfunction hasOpacityCrossfade(node) {\r\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\r\n}\r\nconst defaultLayoutTransition = {\r\n    duration: 0.45,\r\n    ease: [0.4, 0, 0.1, 1],\r\n};\r\nfunction mountNodeEarly(node, id) {\r\n    /**\r\n     * Rather than searching the DOM from document we can search the\r\n     * path for the deepest mounted ancestor and search from there\r\n     */\r\n    let searchNode = node.root;\r\n    for (let i = node.path.length - 1; i >= 0; i--) {\r\n        if (Boolean(node.path[i].instance)) {\r\n            searchNode = node.path[i];\r\n            break;\r\n        }\r\n    }\r\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\r\n    const element = searchElement.querySelector(`[data-projection-id=\"${id}\"]`);\r\n    if (element)\r\n        node.mount(element, true);\r\n}\r\nfunction roundAxis(axis) {\r\n    axis.min = Math.round(axis.min);\r\n    axis.max = Math.round(axis.max);\r\n}\r\nfunction roundBox(box) {\r\n    roundAxis(box.x);\r\n    roundAxis(box.y);\r\n}\r\n\r\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
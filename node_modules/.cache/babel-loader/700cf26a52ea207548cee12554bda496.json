{"ast":null,"code":"import _slicedToArray from \"C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { isBrowser } from './is-browser.mjs'; // Does this device prefer reduced motion? Returns `null` server-side.\n\nvar prefersReducedMotion = {\n  current: null\n};\nvar hasDetected = false;\n\nfunction initPrefersReducedMotion() {\n  hasDetected = true;\n  if (!isBrowser) return;\n\n  if (window.matchMedia) {\n    var motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n\n    var setReducedMotionPreferences = function setReducedMotionPreferences() {\n      return prefersReducedMotion.current = motionMediaQuery.matches;\n    };\n\n    motionMediaQuery.addListener(setReducedMotionPreferences);\n    setReducedMotionPreferences();\n  } else {\n    prefersReducedMotion.current = false;\n  }\n}\n/**\r\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\r\n *\r\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\r\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\r\n *\r\n * It will actively respond to changes and re-render your components with the latest setting.\r\n *\r\n * ```jsx\r\n * export function Sidebar({ isOpen }) {\r\n *   const shouldReduceMotion = useReducedMotion()\r\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\r\n *\r\n *   return (\r\n *     <motion.div animate={{\r\n *       opacity: isOpen ? 1 : 0,\r\n *       x: isOpen ? 0 : closedX\r\n *     }} />\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @return boolean\r\n *\r\n * @public\r\n */\n\n\nfunction useReducedMotion() {\n  /**\r\n   * Lazy initialisation of prefersReducedMotion\r\n   */\n  !hasDetected && initPrefersReducedMotion();\n\n  var _useState = useState(prefersReducedMotion.current),\n      _useState2 = _slicedToArray(_useState, 1),\n      shouldReduceMotion = _useState2[0];\n  /**\r\n   * TODO See if people miss automatically updating shouldReduceMotion setting\r\n   */\n\n\n  return shouldReduceMotion;\n}\n\nfunction useReducedMotionConfig() {\n  var reducedMotionPreference = useReducedMotion();\n\n  var _useContext = useContext(MotionConfigContext),\n      reducedMotion = _useContext.reducedMotion;\n\n  if (reducedMotion === \"never\") {\n    return false;\n  } else if (reducedMotion === \"always\") {\n    return true;\n  } else {\n    return reducedMotionPreference;\n  }\n}\n\nexport { useReducedMotion, useReducedMotionConfig };","map":{"version":3,"names":["useState","useContext","MotionConfigContext","isBrowser","prefersReducedMotion","current","hasDetected","initPrefersReducedMotion","window","matchMedia","motionMediaQuery","setReducedMotionPreferences","matches","addListener","useReducedMotion","shouldReduceMotion","useReducedMotionConfig","reducedMotionPreference","reducedMotion"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/utils/use-reduced-motion.mjs"],"sourcesContent":["import { useState, useContext } from 'react';\r\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\r\nimport { isBrowser } from './is-browser.mjs';\r\n\r\n// Does this device prefer reduced motion? Returns `null` server-side.\r\nconst prefersReducedMotion = { current: null };\r\nlet hasDetected = false;\r\nfunction initPrefersReducedMotion() {\r\n    hasDetected = true;\r\n    if (!isBrowser)\r\n        return;\r\n    if (window.matchMedia) {\r\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\r\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\r\n        motionMediaQuery.addListener(setReducedMotionPreferences);\r\n        setReducedMotionPreferences();\r\n    }\r\n    else {\r\n        prefersReducedMotion.current = false;\r\n    }\r\n}\r\n/**\r\n * A hook that returns `true` if we should be using reduced motion based on the current device's Reduced Motion setting.\r\n *\r\n * This can be used to implement changes to your UI based on Reduced Motion. For instance, replacing motion-sickness inducing\r\n * `x`/`y` animations with `opacity`, disabling the autoplay of background videos, or turning off parallax motion.\r\n *\r\n * It will actively respond to changes and re-render your components with the latest setting.\r\n *\r\n * ```jsx\r\n * export function Sidebar({ isOpen }) {\r\n *   const shouldReduceMotion = useReducedMotion()\r\n *   const closedX = shouldReduceMotion ? 0 : \"-100%\"\r\n *\r\n *   return (\r\n *     <motion.div animate={{\r\n *       opacity: isOpen ? 1 : 0,\r\n *       x: isOpen ? 0 : closedX\r\n *     }} />\r\n *   )\r\n * }\r\n * ```\r\n *\r\n * @return boolean\r\n *\r\n * @public\r\n */\r\nfunction useReducedMotion() {\r\n    /**\r\n     * Lazy initialisation of prefersReducedMotion\r\n     */\r\n    !hasDetected && initPrefersReducedMotion();\r\n    const [shouldReduceMotion] = useState(prefersReducedMotion.current);\r\n    /**\r\n     * TODO See if people miss automatically updating shouldReduceMotion setting\r\n     */\r\n    return shouldReduceMotion;\r\n}\r\nfunction useReducedMotionConfig() {\r\n    const reducedMotionPreference = useReducedMotion();\r\n    const { reducedMotion } = useContext(MotionConfigContext);\r\n    if (reducedMotion === \"never\") {\r\n        return false;\r\n    }\r\n    else if (reducedMotion === \"always\") {\r\n        return true;\r\n    }\r\n    else {\r\n        return reducedMotionPreference;\r\n    }\r\n}\r\n\r\nexport { useReducedMotion, useReducedMotionConfig };\r\n"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,OAArC;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B,C,CAEA;;AACA,IAAMC,oBAAoB,GAAG;EAAEC,OAAO,EAAE;AAAX,CAA7B;AACA,IAAIC,WAAW,GAAG,KAAlB;;AACA,SAASC,wBAAT,GAAoC;EAChCD,WAAW,GAAG,IAAd;EACA,IAAI,CAACH,SAAL,EACI;;EACJ,IAAIK,MAAM,CAACC,UAAX,EAAuB;IACnB,IAAMC,gBAAgB,GAAGF,MAAM,CAACC,UAAP,CAAkB,0BAAlB,CAAzB;;IACA,IAAME,2BAA2B,GAAG,SAA9BA,2BAA8B;MAAA,OAAOP,oBAAoB,CAACC,OAArB,GAA+BK,gBAAgB,CAACE,OAAvD;IAAA,CAApC;;IACAF,gBAAgB,CAACG,WAAjB,CAA6BF,2BAA7B;IACAA,2BAA2B;EAC9B,CALD,MAMK;IACDP,oBAAoB,CAACC,OAArB,GAA+B,KAA/B;EACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,gBAAT,GAA4B;EACxB;AACJ;AACA;EACI,CAACR,WAAD,IAAgBC,wBAAwB,EAAxC;;EACA,gBAA6BP,QAAQ,CAACI,oBAAoB,CAACC,OAAtB,CAArC;EAAA;EAAA,IAAOU,kBAAP;EACA;AACJ;AACA;;;EACI,OAAOA,kBAAP;AACH;;AACD,SAASC,sBAAT,GAAkC;EAC9B,IAAMC,uBAAuB,GAAGH,gBAAgB,EAAhD;;EACA,kBAA0Bb,UAAU,CAACC,mBAAD,CAApC;EAAA,IAAQgB,aAAR,eAAQA,aAAR;;EACA,IAAIA,aAAa,KAAK,OAAtB,EAA+B;IAC3B,OAAO,KAAP;EACH,CAFD,MAGK,IAAIA,aAAa,KAAK,QAAtB,EAAgC;IACjC,OAAO,IAAP;EACH,CAFI,MAGA;IACD,OAAOD,uBAAP;EACH;AACJ;;AAED,SAASH,gBAAT,EAA2BE,sBAA3B"},"metadata":{},"sourceType":"module"}
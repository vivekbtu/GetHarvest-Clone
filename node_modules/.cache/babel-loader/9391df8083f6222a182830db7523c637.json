{"ast":null,"code":"import { resolveElements } from '../utils/resolve-elements.es.js';\nimport { isFunction } from '@motionone/utils';\nconst thresholds = {\n  any: 0,\n  all: 1\n};\n\nfunction inView(elementOrSelector, onStart) {\n  let {\n    root,\n    margin: rootMargin,\n    amount = \"any\"\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  /**\r\n   * If this browser doesn't support IntersectionObserver, return a dummy stop function.\r\n   * Default triggering of onStart is tricky - it could be used for starting/stopping\r\n   * videos, lazy loading content etc. We could provide an option to enable a fallback, or\r\n   * provide a fallback callback option.\r\n   */\n  if (typeof IntersectionObserver === \"undefined\") {\n    return () => {};\n  }\n\n  const elements = resolveElements(elementOrSelector);\n  const activeIntersections = new WeakMap();\n\n  const onIntersectionChange = entries => {\n    entries.forEach(entry => {\n      const onEnd = activeIntersections.get(entry.target);\n      /**\r\n       * If there's no change to the intersection, we don't need to\r\n       * do anything here.\r\n       */\n\n      if (entry.isIntersecting === Boolean(onEnd)) return;\n\n      if (entry.isIntersecting) {\n        const newOnEnd = onStart(entry);\n\n        if (isFunction(newOnEnd)) {\n          activeIntersections.set(entry.target, newOnEnd);\n        } else {\n          observer.unobserve(entry.target);\n        }\n      } else if (onEnd) {\n        onEnd(entry);\n        activeIntersections.delete(entry.target);\n      }\n    });\n  };\n\n  const observer = new IntersectionObserver(onIntersectionChange, {\n    root,\n    rootMargin,\n    threshold: typeof amount === \"number\" ? amount : thresholds[amount]\n  });\n  elements.forEach(element => observer.observe(element));\n  return () => observer.disconnect();\n}\n\nexport { inView };","map":{"version":3,"names":["resolveElements","isFunction","thresholds","any","all","inView","elementOrSelector","onStart","root","margin","rootMargin","amount","IntersectionObserver","elements","activeIntersections","WeakMap","onIntersectionChange","entries","forEach","entry","onEnd","get","target","isIntersecting","Boolean","newOnEnd","set","observer","unobserve","delete","threshold","element","observe","disconnect"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@motionone/dom/dist/gestures/in-view.es.js"],"sourcesContent":["import { resolveElements } from '../utils/resolve-elements.es.js';\r\nimport { isFunction } from '@motionone/utils';\r\n\r\nconst thresholds = {\r\n    any: 0,\r\n    all: 1,\r\n};\r\nfunction inView(elementOrSelector, onStart, { root, margin: rootMargin, amount = \"any\" } = {}) {\r\n    /**\r\n     * If this browser doesn't support IntersectionObserver, return a dummy stop function.\r\n     * Default triggering of onStart is tricky - it could be used for starting/stopping\r\n     * videos, lazy loading content etc. We could provide an option to enable a fallback, or\r\n     * provide a fallback callback option.\r\n     */\r\n    if (typeof IntersectionObserver === \"undefined\") {\r\n        return () => { };\r\n    }\r\n    const elements = resolveElements(elementOrSelector);\r\n    const activeIntersections = new WeakMap();\r\n    const onIntersectionChange = (entries) => {\r\n        entries.forEach((entry) => {\r\n            const onEnd = activeIntersections.get(entry.target);\r\n            /**\r\n             * If there's no change to the intersection, we don't need to\r\n             * do anything here.\r\n             */\r\n            if (entry.isIntersecting === Boolean(onEnd))\r\n                return;\r\n            if (entry.isIntersecting) {\r\n                const newOnEnd = onStart(entry);\r\n                if (isFunction(newOnEnd)) {\r\n                    activeIntersections.set(entry.target, newOnEnd);\r\n                }\r\n                else {\r\n                    observer.unobserve(entry.target);\r\n                }\r\n            }\r\n            else if (onEnd) {\r\n                onEnd(entry);\r\n                activeIntersections.delete(entry.target);\r\n            }\r\n        });\r\n    };\r\n    const observer = new IntersectionObserver(onIntersectionChange, {\r\n        root,\r\n        rootMargin,\r\n        threshold: typeof amount === \"number\" ? amount : thresholds[amount],\r\n    });\r\n    elements.forEach((element) => observer.observe(element));\r\n    return () => observer.disconnect();\r\n}\r\n\r\nexport { inView };\r\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,iCAAhC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,MAAMC,UAAU,GAAG;EACfC,GAAG,EAAE,CADU;EAEfC,GAAG,EAAE;AAFU,CAAnB;;AAIA,SAASC,MAAT,CAAgBC,iBAAhB,EAAmCC,OAAnC,EAA+F;EAAA,IAAnD;IAAEC,IAAF;IAAQC,MAAM,EAAEC,UAAhB;IAA4BC,MAAM,GAAG;EAArC,CAAmD,uEAAJ,EAAI;;EAC3F;AACJ;AACA;AACA;AACA;AACA;EACI,IAAI,OAAOC,oBAAP,KAAgC,WAApC,EAAiD;IAC7C,OAAO,MAAM,CAAG,CAAhB;EACH;;EACD,MAAMC,QAAQ,GAAGb,eAAe,CAACM,iBAAD,CAAhC;EACA,MAAMQ,mBAAmB,GAAG,IAAIC,OAAJ,EAA5B;;EACA,MAAMC,oBAAoB,GAAIC,OAAD,IAAa;IACtCA,OAAO,CAACC,OAAR,CAAiBC,KAAD,IAAW;MACvB,MAAMC,KAAK,GAAGN,mBAAmB,CAACO,GAApB,CAAwBF,KAAK,CAACG,MAA9B,CAAd;MACA;AACZ;AACA;AACA;;MACY,IAAIH,KAAK,CAACI,cAAN,KAAyBC,OAAO,CAACJ,KAAD,CAApC,EACI;;MACJ,IAAID,KAAK,CAACI,cAAV,EAA0B;QACtB,MAAME,QAAQ,GAAGlB,OAAO,CAACY,KAAD,CAAxB;;QACA,IAAIlB,UAAU,CAACwB,QAAD,CAAd,EAA0B;UACtBX,mBAAmB,CAACY,GAApB,CAAwBP,KAAK,CAACG,MAA9B,EAAsCG,QAAtC;QACH,CAFD,MAGK;UACDE,QAAQ,CAACC,SAAT,CAAmBT,KAAK,CAACG,MAAzB;QACH;MACJ,CARD,MASK,IAAIF,KAAJ,EAAW;QACZA,KAAK,CAACD,KAAD,CAAL;QACAL,mBAAmB,CAACe,MAApB,CAA2BV,KAAK,CAACG,MAAjC;MACH;IACJ,CArBD;EAsBH,CAvBD;;EAwBA,MAAMK,QAAQ,GAAG,IAAIf,oBAAJ,CAAyBI,oBAAzB,EAA+C;IAC5DR,IAD4D;IAE5DE,UAF4D;IAG5DoB,SAAS,EAAE,OAAOnB,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsCT,UAAU,CAACS,MAAD;EAHC,CAA/C,CAAjB;EAKAE,QAAQ,CAACK,OAAT,CAAkBa,OAAD,IAAaJ,QAAQ,CAACK,OAAT,CAAiBD,OAAjB,CAA9B;EACA,OAAO,MAAMJ,QAAQ,CAACM,UAAT,EAAb;AACH;;AAED,SAAS5B,MAAT"},"metadata":{},"sourceType":"module"}
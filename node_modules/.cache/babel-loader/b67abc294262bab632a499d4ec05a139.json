{"ast":null,"code":"import { sortTransformProps } from './transform.mjs';\nconst translateAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\",\n  transformPerspective: \"perspective\"\n};\n/**\r\n * Build a CSS transform style from individual x/y/scale etc properties.\r\n *\r\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\r\n * providing a transformTemplate function.\r\n */\n\nfunction buildTransform(_ref, _ref2, transformIsDefault, transformTemplate) {\n  let {\n    transform,\n    transformKeys\n  } = _ref;\n  let {\n    enableHardwareAcceleration = true,\n    allowTransformNone = true\n  } = _ref2;\n  // The transform string we're going to build into.\n  let transformString = \"\"; // Transform keys into their default order - this will determine the output order.\n\n  transformKeys.sort(sortTransformProps); // Track whether the defined transform has a defined z so we don't add a\n  // second to enable hardware acceleration\n\n  let transformHasZ = false; // Loop over each transform and build them into transformString\n\n  const numTransformKeys = transformKeys.length;\n\n  for (let i = 0; i < numTransformKeys; i++) {\n    const key = transformKeys[i];\n    transformString += `${translateAlias[key] || key}(${transform[key]}) `;\n    if (key === \"z\") transformHasZ = true;\n  }\n\n  if (!transformHasZ && enableHardwareAcceleration) {\n    transformString += \"translateZ(0)\";\n  }\n\n  transformString = transformString.trim(); // If we have a custom `transform` template, pass our transform values and\n  // generated transformString to that before returning\n\n  if (transformTemplate) {\n    transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\n  } else if (allowTransformNone && transformIsDefault) {\n    transformString = \"none\";\n  }\n\n  return transformString;\n}\n/**\r\n * Build a transformOrigin style. Uses the same defaults as the browser for\r\n * undefined origins.\r\n */\n\n\nfunction buildTransformOrigin(_ref3) {\n  let {\n    originX = \"50%\",\n    originY = \"50%\",\n    originZ = 0\n  } = _ref3;\n  return `${originX} ${originY} ${originZ}`;\n}\n\nexport { buildTransform, buildTransformOrigin };","map":{"version":3,"names":["sortTransformProps","translateAlias","x","y","z","transformPerspective","buildTransform","transformIsDefault","transformTemplate","transform","transformKeys","enableHardwareAcceleration","allowTransformNone","transformString","sort","transformHasZ","numTransformKeys","length","i","key","trim","buildTransformOrigin","originX","originY","originZ"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs"],"sourcesContent":["import { sortTransformProps } from './transform.mjs';\r\n\r\nconst translateAlias = {\r\n    x: \"translateX\",\r\n    y: \"translateY\",\r\n    z: \"translateZ\",\r\n    transformPerspective: \"perspective\",\r\n};\r\n/**\r\n * Build a CSS transform style from individual x/y/scale etc properties.\r\n *\r\n * This outputs with a default order of transforms/scales/rotations, this can be customised by\r\n * providing a transformTemplate function.\r\n */\r\nfunction buildTransform({ transform, transformKeys }, { enableHardwareAcceleration = true, allowTransformNone = true, }, transformIsDefault, transformTemplate) {\r\n    // The transform string we're going to build into.\r\n    let transformString = \"\";\r\n    // Transform keys into their default order - this will determine the output order.\r\n    transformKeys.sort(sortTransformProps);\r\n    // Track whether the defined transform has a defined z so we don't add a\r\n    // second to enable hardware acceleration\r\n    let transformHasZ = false;\r\n    // Loop over each transform and build them into transformString\r\n    const numTransformKeys = transformKeys.length;\r\n    for (let i = 0; i < numTransformKeys; i++) {\r\n        const key = transformKeys[i];\r\n        transformString += `${translateAlias[key] || key}(${transform[key]}) `;\r\n        if (key === \"z\")\r\n            transformHasZ = true;\r\n    }\r\n    if (!transformHasZ && enableHardwareAcceleration) {\r\n        transformString += \"translateZ(0)\";\r\n    }\r\n    transformString = transformString.trim();\r\n    // If we have a custom `transform` template, pass our transform values and\r\n    // generated transformString to that before returning\r\n    if (transformTemplate) {\r\n        transformString = transformTemplate(transform, transformIsDefault ? \"\" : transformString);\r\n    }\r\n    else if (allowTransformNone && transformIsDefault) {\r\n        transformString = \"none\";\r\n    }\r\n    return transformString;\r\n}\r\n/**\r\n * Build a transformOrigin style. Uses the same defaults as the browser for\r\n * undefined origins.\r\n */\r\nfunction buildTransformOrigin({ originX = \"50%\", originY = \"50%\", originZ = 0, }) {\r\n    return `${originX} ${originY} ${originZ}`;\r\n}\r\n\r\nexport { buildTransform, buildTransformOrigin };\r\n"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,iBAAnC;AAEA,MAAMC,cAAc,GAAG;EACnBC,CAAC,EAAE,YADgB;EAEnBC,CAAC,EAAE,YAFgB;EAGnBC,CAAC,EAAE,YAHgB;EAInBC,oBAAoB,EAAE;AAJH,CAAvB;AAMA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,cAAyHC,kBAAzH,EAA6IC,iBAA7I,EAAgK;EAAA,IAAxI;IAAEC,SAAF;IAAaC;EAAb,CAAwI;EAAA,IAA1G;IAAEC,0BAA0B,GAAG,IAA/B;IAAqCC,kBAAkB,GAAG;EAA1D,CAA0G;EAC5J;EACA,IAAIC,eAAe,GAAG,EAAtB,CAF4J,CAG5J;;EACAH,aAAa,CAACI,IAAd,CAAmBd,kBAAnB,EAJ4J,CAK5J;EACA;;EACA,IAAIe,aAAa,GAAG,KAApB,CAP4J,CAQ5J;;EACA,MAAMC,gBAAgB,GAAGN,aAAa,CAACO,MAAvC;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,gBAApB,EAAsCE,CAAC,EAAvC,EAA2C;IACvC,MAAMC,GAAG,GAAGT,aAAa,CAACQ,CAAD,CAAzB;IACAL,eAAe,IAAK,GAAEZ,cAAc,CAACkB,GAAD,CAAd,IAAuBA,GAAI,IAAGV,SAAS,CAACU,GAAD,CAAM,IAAnE;IACA,IAAIA,GAAG,KAAK,GAAZ,EACIJ,aAAa,GAAG,IAAhB;EACP;;EACD,IAAI,CAACA,aAAD,IAAkBJ,0BAAtB,EAAkD;IAC9CE,eAAe,IAAI,eAAnB;EACH;;EACDA,eAAe,GAAGA,eAAe,CAACO,IAAhB,EAAlB,CAnB4J,CAoB5J;EACA;;EACA,IAAIZ,iBAAJ,EAAuB;IACnBK,eAAe,GAAGL,iBAAiB,CAACC,SAAD,EAAYF,kBAAkB,GAAG,EAAH,GAAQM,eAAtC,CAAnC;EACH,CAFD,MAGK,IAAID,kBAAkB,IAAIL,kBAA1B,EAA8C;IAC/CM,eAAe,GAAG,MAAlB;EACH;;EACD,OAAOA,eAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,SAASQ,oBAAT,QAAkF;EAAA,IAApD;IAAEC,OAAO,GAAG,KAAZ;IAAmBC,OAAO,GAAG,KAA7B;IAAoCC,OAAO,GAAG;EAA9C,CAAoD;EAC9E,OAAQ,GAAEF,OAAQ,IAAGC,OAAQ,IAAGC,OAAQ,EAAxC;AACH;;AAED,SAASlB,cAAT,EAAyBe,oBAAzB"},"metadata":{},"sourceType":"module"}
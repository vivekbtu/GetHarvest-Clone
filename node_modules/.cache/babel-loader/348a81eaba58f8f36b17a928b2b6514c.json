{"ast":null,"code":"import { noopReturn, addUniqueItem } from '@motionone/utils';\nimport { getAnimationData } from '../data.es.js';\n/**\r\n * A list of all transformable axes. We'll use this list to generated a version\r\n * of each axes for each transform.\r\n */\n\nconst axes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\r\n * An ordered array of each transformable value. By default, transform values\r\n * will be sorted to this order.\r\n */\n\nconst order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\nconst transformAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\"\n};\nconst rotation = {\n  syntax: \"<angle>\",\n  initialValue: \"0deg\",\n  toDefaultUnit: v => v + \"deg\"\n};\nconst baseTransformProperties = {\n  translate: {\n    syntax: \"<length-percentage>\",\n    initialValue: \"0px\",\n    toDefaultUnit: v => v + \"px\"\n  },\n  rotate: rotation,\n  scale: {\n    syntax: \"<number>\",\n    initialValue: 1,\n    toDefaultUnit: noopReturn\n  },\n  skew: rotation\n};\nconst transformDefinitions = new Map();\n\nconst asTransformCssVar = name => `--motion-${name}`;\n/**\r\n * Generate a list of every possible transform key\r\n */\n\n\nconst transforms = [\"x\", \"y\", \"z\"];\norder.forEach(name => {\n  axes.forEach(axis => {\n    transforms.push(name + axis);\n    transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\n  });\n});\n/**\r\n * A function to use with Array.sort to sort transform keys by their default order.\r\n */\n\nconst compareTransformOrder = (a, b) => transforms.indexOf(a) - transforms.indexOf(b);\n/**\r\n * Provide a quick way to check if a string is the name of a transform\r\n */\n\n\nconst transformLookup = new Set(transforms);\n\nconst isTransform = name => transformLookup.has(name);\n\nconst addTransformToElement = (element, name) => {\n  // Map x to translateX etc\n  if (transformAlias[name]) name = transformAlias[name];\n  const {\n    transforms\n  } = getAnimationData(element);\n  addUniqueItem(transforms, name);\n  /**\r\n   * TODO: An optimisation here could be to cache the transform in element data\r\n   * and only update if this has changed.\r\n   */\n\n  element.style.transform = buildTransformTemplate(transforms);\n};\n\nconst buildTransformTemplate = transforms => transforms.sort(compareTransformOrder).reduce(transformListToString, \"\").trim();\n\nconst transformListToString = (template, name) => `${template} ${name}(var(${asTransformCssVar(name)}))`;\n\nexport { addTransformToElement, asTransformCssVar, axes, buildTransformTemplate, compareTransformOrder, isTransform, transformAlias, transformDefinitions };","map":{"version":3,"names":["noopReturn","addUniqueItem","getAnimationData","axes","order","transformAlias","x","y","z","rotation","syntax","initialValue","toDefaultUnit","v","baseTransformProperties","translate","rotate","scale","skew","transformDefinitions","Map","asTransformCssVar","name","transforms","forEach","axis","push","set","compareTransformOrder","a","b","indexOf","transformLookup","Set","isTransform","has","addTransformToElement","element","style","transform","buildTransformTemplate","sort","reduce","transformListToString","trim","template"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@motionone/dom/dist/animate/utils/transforms.es.js"],"sourcesContent":["import { noopReturn, addUniqueItem } from '@motionone/utils';\r\nimport { getAnimationData } from '../data.es.js';\r\n\r\n/**\r\n * A list of all transformable axes. We'll use this list to generated a version\r\n * of each axes for each transform.\r\n */\r\nconst axes = [\"\", \"X\", \"Y\", \"Z\"];\r\n/**\r\n * An ordered array of each transformable value. By default, transform values\r\n * will be sorted to this order.\r\n */\r\nconst order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\r\nconst transformAlias = {\r\n    x: \"translateX\",\r\n    y: \"translateY\",\r\n    z: \"translateZ\",\r\n};\r\nconst rotation = {\r\n    syntax: \"<angle>\",\r\n    initialValue: \"0deg\",\r\n    toDefaultUnit: (v) => v + \"deg\",\r\n};\r\nconst baseTransformProperties = {\r\n    translate: {\r\n        syntax: \"<length-percentage>\",\r\n        initialValue: \"0px\",\r\n        toDefaultUnit: (v) => v + \"px\",\r\n    },\r\n    rotate: rotation,\r\n    scale: {\r\n        syntax: \"<number>\",\r\n        initialValue: 1,\r\n        toDefaultUnit: noopReturn,\r\n    },\r\n    skew: rotation,\r\n};\r\nconst transformDefinitions = new Map();\r\nconst asTransformCssVar = (name) => `--motion-${name}`;\r\n/**\r\n * Generate a list of every possible transform key\r\n */\r\nconst transforms = [\"x\", \"y\", \"z\"];\r\norder.forEach((name) => {\r\n    axes.forEach((axis) => {\r\n        transforms.push(name + axis);\r\n        transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\r\n    });\r\n});\r\n/**\r\n * A function to use with Array.sort to sort transform keys by their default order.\r\n */\r\nconst compareTransformOrder = (a, b) => transforms.indexOf(a) - transforms.indexOf(b);\r\n/**\r\n * Provide a quick way to check if a string is the name of a transform\r\n */\r\nconst transformLookup = new Set(transforms);\r\nconst isTransform = (name) => transformLookup.has(name);\r\nconst addTransformToElement = (element, name) => {\r\n    // Map x to translateX etc\r\n    if (transformAlias[name])\r\n        name = transformAlias[name];\r\n    const { transforms } = getAnimationData(element);\r\n    addUniqueItem(transforms, name);\r\n    /**\r\n     * TODO: An optimisation here could be to cache the transform in element data\r\n     * and only update if this has changed.\r\n     */\r\n    element.style.transform = buildTransformTemplate(transforms);\r\n};\r\nconst buildTransformTemplate = (transforms) => transforms\r\n    .sort(compareTransformOrder)\r\n    .reduce(transformListToString, \"\")\r\n    .trim();\r\nconst transformListToString = (template, name) => `${template} ${name}(var(${asTransformCssVar(name)}))`;\r\n\r\nexport { addTransformToElement, asTransformCssVar, axes, buildTransformTemplate, compareTransformOrder, isTransform, transformAlias, transformDefinitions };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
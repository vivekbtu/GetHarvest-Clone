{"ast":null,"code":"import { useCombineMotionValues } from './use-combine-values.mjs';\n/**\r\n * Combine multiple motion values into a new one using a string template literal.\r\n *\r\n * ```jsx\r\n * import {\r\n *   motion,\r\n *   useSpring,\r\n *   useMotionValue,\r\n *   useMotionTemplate\r\n * } from \"framer-motion\"\r\n *\r\n * function Component() {\r\n *   const shadowX = useSpring(0)\r\n *   const shadowY = useMotionValue(0)\r\n *   const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`\r\n *\r\n *   return <motion.div style={{ filter: shadow }} />\r\n * }\r\n * ```\r\n *\r\n * @public\r\n */\n\nfunction useMotionTemplate(fragments) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  /**\r\n   * Create a function that will build a string from the latest motion values.\r\n   */\n  const numFragments = fragments.length;\n\n  function buildValue() {\n    let output = ``;\n\n    for (let i = 0; i < numFragments; i++) {\n      output += fragments[i];\n      const value = values[i];\n      if (value) output += values[i].get();\n    }\n\n    return output;\n  }\n\n  return useCombineMotionValues(values, buildValue);\n}\n\nexport { useMotionTemplate };","map":{"version":3,"names":["useCombineMotionValues","useMotionTemplate","fragments","values","numFragments","length","buildValue","output","i","value","get"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/value/use-motion-template.mjs"],"sourcesContent":["import { useCombineMotionValues } from './use-combine-values.mjs';\r\n\r\n/**\r\n * Combine multiple motion values into a new one using a string template literal.\r\n *\r\n * ```jsx\r\n * import {\r\n *   motion,\r\n *   useSpring,\r\n *   useMotionValue,\r\n *   useMotionTemplate\r\n * } from \"framer-motion\"\r\n *\r\n * function Component() {\r\n *   const shadowX = useSpring(0)\r\n *   const shadowY = useMotionValue(0)\r\n *   const shadow = useMotionTemplate`drop-shadow(${shadowX}px ${shadowY}px 20px rgba(0,0,0,0.3))`\r\n *\r\n *   return <motion.div style={{ filter: shadow }} />\r\n * }\r\n * ```\r\n *\r\n * @public\r\n */\r\nfunction useMotionTemplate(fragments, ...values) {\r\n    /**\r\n     * Create a function that will build a string from the latest motion values.\r\n     */\r\n    const numFragments = fragments.length;\r\n    function buildValue() {\r\n        let output = ``;\r\n        for (let i = 0; i < numFragments; i++) {\r\n            output += fragments[i];\r\n            const value = values[i];\r\n            if (value)\r\n                output += values[i].get();\r\n        }\r\n        return output;\r\n    }\r\n    return useCombineMotionValues(values, buildValue);\r\n}\r\n\r\nexport { useMotionTemplate };\r\n"],"mappings":"AAAA,SAASA,sBAAT,QAAuC,0BAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,SAA3B,EAAiD;EAAA,kCAARC,MAAQ;IAARA,MAAQ;EAAA;;EAC7C;AACJ;AACA;EACI,MAAMC,YAAY,GAAGF,SAAS,CAACG,MAA/B;;EACA,SAASC,UAAT,GAAsB;IAClB,IAAIC,MAAM,GAAI,EAAd;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,YAApB,EAAkCI,CAAC,EAAnC,EAAuC;MACnCD,MAAM,IAAIL,SAAS,CAACM,CAAD,CAAnB;MACA,MAAMC,KAAK,GAAGN,MAAM,CAACK,CAAD,CAApB;MACA,IAAIC,KAAJ,EACIF,MAAM,IAAIJ,MAAM,CAACK,CAAD,CAAN,CAAUE,GAAV,EAAV;IACP;;IACD,OAAOH,MAAP;EACH;;EACD,OAAOP,sBAAsB,CAACG,MAAD,EAASG,UAAT,CAA7B;AACH;;AAED,SAASL,iBAAT"},"metadata":{},"sourceType":"module"}
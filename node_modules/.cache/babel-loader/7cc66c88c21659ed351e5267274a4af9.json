{"ast":null,"code":"import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { PanSession } from './PanSession.mjs';\n/**\r\n *\r\n * @param handlers -\r\n * @param ref -\r\n *\r\n * @privateRemarks\r\n * Currently this sets new pan gesture functions every render. The memo route has been explored\r\n * in the past but ultimately we're still creating new functions every render. An optimisation\r\n * to explore is creating the pan gestures and loading them into a `ref`.\r\n *\r\n * @internal\r\n */\n\nfunction usePanGesture(_ref) {\n  var onPan = _ref.onPan,\n      onPanStart = _ref.onPanStart,\n      onPanEnd = _ref.onPanEnd,\n      onPanSessionStart = _ref.onPanSessionStart,\n      visualElement = _ref.visualElement;\n  var hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n  var panSession = useRef(null);\n\n  var _useContext = useContext(MotionConfigContext),\n      transformPagePoint = _useContext.transformPagePoint;\n\n  var handlers = {\n    onSessionStart: onPanSessionStart,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd: function onEnd(event, info) {\n      panSession.current = null;\n      onPanEnd && onPanEnd(event, info);\n    }\n  };\n  useEffect(function () {\n    if (panSession.current !== null) {\n      panSession.current.updateHandlers(handlers);\n    }\n  });\n\n  function onPointerDown(event) {\n    panSession.current = new PanSession(event, handlers, {\n      transformPagePoint: transformPagePoint\n    });\n  }\n\n  usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n  useUnmountEffect(function () {\n    return panSession.current && panSession.current.end();\n  });\n}\n\nexport { usePanGesture };","map":{"version":3,"names":["useRef","useContext","useEffect","MotionConfigContext","useUnmountEffect","usePointerEvent","PanSession","usePanGesture","onPan","onPanStart","onPanEnd","onPanSessionStart","visualElement","hasPanEvents","panSession","transformPagePoint","handlers","onSessionStart","onStart","onMove","onEnd","event","info","current","updateHandlers","onPointerDown","end"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/gestures/use-pan-gesture.mjs"],"sourcesContent":["import { useRef, useContext, useEffect } from 'react';\r\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\r\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\r\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\r\nimport { PanSession } from './PanSession.mjs';\r\n\r\n/**\r\n *\r\n * @param handlers -\r\n * @param ref -\r\n *\r\n * @privateRemarks\r\n * Currently this sets new pan gesture functions every render. The memo route has been explored\r\n * in the past but ultimately we're still creating new functions every render. An optimisation\r\n * to explore is creating the pan gestures and loading them into a `ref`.\r\n *\r\n * @internal\r\n */\r\nfunction usePanGesture({ onPan, onPanStart, onPanEnd, onPanSessionStart, visualElement, }) {\r\n    const hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\r\n    const panSession = useRef(null);\r\n    const { transformPagePoint } = useContext(MotionConfigContext);\r\n    const handlers = {\r\n        onSessionStart: onPanSessionStart,\r\n        onStart: onPanStart,\r\n        onMove: onPan,\r\n        onEnd: (event, info) => {\r\n            panSession.current = null;\r\n            onPanEnd && onPanEnd(event, info);\r\n        },\r\n    };\r\n    useEffect(() => {\r\n        if (panSession.current !== null) {\r\n            panSession.current.updateHandlers(handlers);\r\n        }\r\n    });\r\n    function onPointerDown(event) {\r\n        panSession.current = new PanSession(event, handlers, {\r\n            transformPagePoint,\r\n        });\r\n    }\r\n    usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\r\n    useUnmountEffect(() => panSession.current && panSession.current.end());\r\n}\r\n\r\nexport { usePanGesture };\r\n"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,UAAjB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,OAA2F;EAAA,IAAlEC,KAAkE,QAAlEA,KAAkE;EAAA,IAA3DC,UAA2D,QAA3DA,UAA2D;EAAA,IAA/CC,QAA+C,QAA/CA,QAA+C;EAAA,IAArCC,iBAAqC,QAArCA,iBAAqC;EAAA,IAAlBC,aAAkB,QAAlBA,aAAkB;EACvF,IAAMC,YAAY,GAAGL,KAAK,IAAIC,UAAT,IAAuBC,QAAvB,IAAmCC,iBAAxD;EACA,IAAMG,UAAU,GAAGd,MAAM,CAAC,IAAD,CAAzB;;EACA,kBAA+BC,UAAU,CAACE,mBAAD,CAAzC;EAAA,IAAQY,kBAAR,eAAQA,kBAAR;;EACA,IAAMC,QAAQ,GAAG;IACbC,cAAc,EAAEN,iBADH;IAEbO,OAAO,EAAET,UAFI;IAGbU,MAAM,EAAEX,KAHK;IAIbY,KAAK,EAAE,eAACC,KAAD,EAAQC,IAAR,EAAiB;MACpBR,UAAU,CAACS,OAAX,GAAqB,IAArB;MACAb,QAAQ,IAAIA,QAAQ,CAACW,KAAD,EAAQC,IAAR,CAApB;IACH;EAPY,CAAjB;EASApB,SAAS,CAAC,YAAM;IACZ,IAAIY,UAAU,CAACS,OAAX,KAAuB,IAA3B,EAAiC;MAC7BT,UAAU,CAACS,OAAX,CAAmBC,cAAnB,CAAkCR,QAAlC;IACH;EACJ,CAJQ,CAAT;;EAKA,SAASS,aAAT,CAAuBJ,KAAvB,EAA8B;IAC1BP,UAAU,CAACS,OAAX,GAAqB,IAAIjB,UAAJ,CAAee,KAAf,EAAsBL,QAAtB,EAAgC;MACjDD,kBAAkB,EAAlBA;IADiD,CAAhC,CAArB;EAGH;;EACDV,eAAe,CAACO,aAAD,EAAgB,aAAhB,EAA+BC,YAAY,IAAIY,aAA/C,CAAf;EACArB,gBAAgB,CAAC;IAAA,OAAMU,UAAU,CAACS,OAAX,IAAsBT,UAAU,CAACS,OAAX,CAAmBG,GAAnB,EAA5B;EAAA,CAAD,CAAhB;AACH;;AAED,SAASnB,aAAT"},"metadata":{},"sourceType":"module"}
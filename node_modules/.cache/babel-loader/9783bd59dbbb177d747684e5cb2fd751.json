{"ast":null,"code":"import _classCallCheck from \"C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { startAnimation } from '../../animation/utils/transitions.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\nimport { mix } from 'popmotion';\nimport { percent } from 'style-value-types';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nvar elementDragControls = new WeakMap();\n/**\r\n *\r\n */\n// let latestPointerEvent: AnyPointerEvent\n\nvar VisualElementDragControls = /*#__PURE__*/function () {\n  function VisualElementDragControls(visualElement) {\n    _classCallCheck(this, VisualElementDragControls);\n\n    // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n    this.openGlobalLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\r\n     * The permitted boundaries of travel, in pixels.\r\n     */\n\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\r\n     * The per-axis resolved elastic values.\r\n     */\n\n    this.elastic = createBox();\n    this.visualElement = visualElement;\n  }\n\n  _createClass(VisualElementDragControls, [{\n    key: \"start\",\n    value: function start(originEvent) {\n      var _this = this;\n\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$snapToCursor = _ref.snapToCursor,\n          snapToCursor = _ref$snapToCursor === void 0 ? false : _ref$snapToCursor;\n\n      /**\r\n       * Don't start dragging if this component is exiting\r\n       */\n      if (this.visualElement.isPresent === false) return;\n\n      var onSessionStart = function onSessionStart(event) {\n        // Stop any animations on both axis values immediately. This allows the user to throw and catch\n        // the component.\n        _this.stopAnimation();\n\n        if (snapToCursor) {\n          _this.snapToCursor(extractEventInfo(event, \"page\").point);\n        }\n      };\n\n      var onStart = function onStart(event, info) {\n        var _a; // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n\n\n        var _this$getProps = _this.getProps(),\n            drag = _this$getProps.drag,\n            dragPropagation = _this$getProps.dragPropagation,\n            onDragStart = _this$getProps.onDragStart;\n\n        if (drag && !dragPropagation) {\n          if (_this.openGlobalLock) _this.openGlobalLock();\n          _this.openGlobalLock = getGlobalLock(drag); // If we don 't have the lock, don't start dragging\n\n          if (!_this.openGlobalLock) return;\n        }\n\n        _this.isDragging = true;\n        _this.currentDirection = null;\n\n        _this.resolveConstraints();\n\n        if (_this.visualElement.projection) {\n          _this.visualElement.projection.isAnimationBlocked = true;\n          _this.visualElement.projection.target = undefined;\n        }\n        /**\r\n         * Record gesture origin\r\n         */\n\n\n        eachAxis(function (axis) {\n          var _a, _b;\n\n          var current = _this.getAxisMotionValue(axis).get() || 0;\n          /**\r\n           * If the MotionValue is a percentage value convert to px\r\n           */\n\n          if (percent.test(current)) {\n            var measuredAxis = (_b = (_a = _this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.actual[axis];\n\n            if (measuredAxis) {\n              var length = calcLength(measuredAxis);\n              current = length * (parseFloat(current) / 100);\n            }\n          }\n\n          _this.originPoint[axis] = current;\n        }); // Fire onDragStart event\n\n        onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n        (_a = _this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\n      };\n\n      var onMove = function onMove(event, info) {\n        // latestPointerEvent = event\n        var _this$getProps2 = _this.getProps(),\n            dragPropagation = _this$getProps2.dragPropagation,\n            dragDirectionLock = _this$getProps2.dragDirectionLock,\n            onDirectionLock = _this$getProps2.onDirectionLock,\n            onDrag = _this$getProps2.onDrag; // If we didn't successfully receive the gesture lock, early return.\n\n\n        if (!dragPropagation && !_this.openGlobalLock) return;\n        var offset = info.offset; // Attempt to detect drag direction if directionLock is true\n\n        if (dragDirectionLock && _this.currentDirection === null) {\n          _this.currentDirection = getCurrentDirection(offset); // If we've successfully set a direction, notify listener\n\n          if (_this.currentDirection !== null) {\n            onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(_this.currentDirection);\n          }\n\n          return;\n        } // Update each point with the latest position\n\n\n        _this.updateAxis(\"x\", info.point, offset);\n\n        _this.updateAxis(\"y\", info.point, offset);\n        /**\r\n         * Ideally we would leave the renderer to fire naturally at the end of\r\n         * this frame but if the element is about to change layout as the result\r\n         * of a re-render we want to ensure the browser can read the latest\r\n         * bounding box to ensure the pointer and element don't fall out of sync.\r\n         */\n\n\n        _this.visualElement.syncRender();\n        /**\r\n         * This must fire after the syncRender call as it might trigger a state\r\n         * change which itself might trigger a layout update.\r\n         */\n\n\n        onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n      };\n\n      var onSessionEnd = function onSessionEnd(event, info) {\n        return _this.stop(event, info);\n      };\n\n      this.panSession = new PanSession(originEvent, {\n        onSessionStart: onSessionStart,\n        onStart: onStart,\n        onMove: onMove,\n        onSessionEnd: onSessionEnd\n      }, {\n        transformPagePoint: this.visualElement.getTransformPagePoint()\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(event, info) {\n      var isDragging = this.isDragging;\n      this.cancel();\n      if (!isDragging) return;\n      var velocity = info.velocity;\n      this.startAnimation(velocity);\n\n      var _this$getProps3 = this.getProps(),\n          onDragEnd = _this$getProps3.onDragEnd;\n\n      onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _a, _b;\n\n      this.isDragging = false;\n\n      if (this.visualElement.projection) {\n        this.visualElement.projection.isAnimationBlocked = false;\n      }\n\n      (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n      this.panSession = undefined;\n\n      var _this$getProps4 = this.getProps(),\n          dragPropagation = _this$getProps4.dragPropagation;\n\n      if (!dragPropagation && this.openGlobalLock) {\n        this.openGlobalLock();\n        this.openGlobalLock = null;\n      }\n\n      (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n    }\n  }, {\n    key: \"updateAxis\",\n    value: function updateAxis(axis, _point, offset) {\n      var _this$getProps5 = this.getProps(),\n          drag = _this$getProps5.drag; // If we're not dragging this axis, do an early return.\n\n\n      if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n      var axisValue = this.getAxisMotionValue(axis);\n      var next = this.originPoint[axis] + offset[axis]; // Apply constraints\n\n      if (this.constraints && this.constraints[axis]) {\n        next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n      }\n\n      axisValue.set(next);\n    }\n  }, {\n    key: \"resolveConstraints\",\n    value: function resolveConstraints() {\n      var _this2 = this;\n\n      var _this$getProps6 = this.getProps(),\n          dragConstraints = _this$getProps6.dragConstraints,\n          dragElastic = _this$getProps6.dragElastic;\n\n      var _ref2 = this.visualElement.projection || {},\n          layout = _ref2.layout;\n\n      var prevConstraints = this.constraints;\n\n      if (dragConstraints && isRefObject(dragConstraints)) {\n        if (!this.constraints) {\n          this.constraints = this.resolveRefConstraints();\n        }\n      } else {\n        if (dragConstraints && layout) {\n          this.constraints = calcRelativeConstraints(layout.actual, dragConstraints);\n        } else {\n          this.constraints = false;\n        }\n      }\n\n      this.elastic = resolveDragElastic(dragElastic);\n      /**\r\n       * If we're outputting to external MotionValues, we want to rebase the measured constraints\r\n       * from viewport-relative to component-relative.\r\n       */\n\n      if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n        eachAxis(function (axis) {\n          if (_this2.getAxisMotionValue(axis)) {\n            _this2.constraints[axis] = rebaseAxisConstraints(layout.actual[axis], _this2.constraints[axis]);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"resolveRefConstraints\",\n    value: function resolveRefConstraints() {\n      var _this$getProps7 = this.getProps(),\n          constraints = _this$getProps7.dragConstraints,\n          onMeasureDragConstraints = _this$getProps7.onMeasureDragConstraints;\n\n      if (!constraints || !isRefObject(constraints)) return false;\n      var constraintsElement = constraints.current;\n      invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n      var projection = this.visualElement.projection; // TODO\n\n      if (!projection || !projection.layout) return false;\n      var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n      var measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);\n      /**\r\n       * If there's an onMeasureDragConstraints listener we call it and\r\n       * if different constraints are returned, set constraints to that\r\n       */\n\n      if (onMeasureDragConstraints) {\n        var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n        this.hasMutatedConstraints = !!userConstraints;\n\n        if (userConstraints) {\n          measuredConstraints = convertBoundingBoxToBox(userConstraints);\n        }\n      }\n\n      return measuredConstraints;\n    }\n  }, {\n    key: \"startAnimation\",\n    value: function startAnimation(velocity) {\n      var _this3 = this;\n\n      var _this$getProps8 = this.getProps(),\n          drag = _this$getProps8.drag,\n          dragMomentum = _this$getProps8.dragMomentum,\n          dragElastic = _this$getProps8.dragElastic,\n          dragTransition = _this$getProps8.dragTransition,\n          dragSnapToOrigin = _this$getProps8.dragSnapToOrigin,\n          onDragTransitionEnd = _this$getProps8.onDragTransitionEnd;\n\n      var constraints = this.constraints || {};\n      var momentumAnimations = eachAxis(function (axis) {\n        var _a;\n\n        if (!shouldDrag(axis, drag, _this3.currentDirection)) {\n          return;\n        }\n\n        var transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n        if (dragSnapToOrigin) transition = {\n          min: 0,\n          max: 0\n        };\n        /**\r\n         * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\r\n         * of spring animations so we should look into adding a disable spring option to `inertia`.\r\n         * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\r\n         * using the value of `dragElastic`.\r\n         */\n\n        var bounceStiffness = dragElastic ? 200 : 1000000;\n        var bounceDamping = dragElastic ? 40 : 10000000;\n        var inertia = Object.assign(Object.assign({\n          type: \"inertia\",\n          velocity: dragMomentum ? velocity[axis] : 0,\n          bounceStiffness: bounceStiffness,\n          bounceDamping: bounceDamping,\n          timeConstant: 750,\n          restDelta: 1,\n          restSpeed: 10\n        }, dragTransition), transition); // If we're not animating on an externally-provided `MotionValue` we can use the\n        // component's animation controls which will handle interactions with whileHover (etc),\n        // otherwise we just have to animate the `MotionValue` itself.\n\n        return _this3.startAxisValueAnimation(axis, inertia);\n      }); // Run all animations and then resolve the new drag constraints.\n\n      return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n  }, {\n    key: \"startAxisValueAnimation\",\n    value: function startAxisValueAnimation(axis, transition) {\n      var axisValue = this.getAxisMotionValue(axis);\n      return startAnimation(axis, axisValue, 0, transition);\n    }\n  }, {\n    key: \"stopAnimation\",\n    value: function stopAnimation() {\n      var _this4 = this;\n\n      eachAxis(function (axis) {\n        return _this4.getAxisMotionValue(axis).stop();\n      });\n    }\n    /**\r\n     * Drag works differently depending on which props are provided.\r\n     *\r\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\r\n     * - Otherwise, we apply the delta to the x/y motion values.\r\n     */\n\n  }, {\n    key: \"getAxisMotionValue\",\n    value: function getAxisMotionValue(axis) {\n      var _a, _b;\n\n      var dragKey = \"_drag\" + axis.toUpperCase();\n      var externalMotionValue = this.visualElement.getProps()[dragKey];\n      return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);\n    }\n  }, {\n    key: \"snapToCursor\",\n    value: function snapToCursor(point) {\n      var _this5 = this;\n\n      eachAxis(function (axis) {\n        var _this5$getProps = _this5.getProps(),\n            drag = _this5$getProps.drag; // If we're not dragging this axis, do an early return.\n\n\n        if (!shouldDrag(axis, drag, _this5.currentDirection)) return;\n        var projection = _this5.visualElement.projection;\n\n        var axisValue = _this5.getAxisMotionValue(axis);\n\n        if (projection && projection.layout) {\n          var _projection$layout$ac = projection.layout.actual[axis],\n              min = _projection$layout$ac.min,\n              max = _projection$layout$ac.max;\n          axisValue.set(point[axis] - mix(min, max, 0.5));\n        }\n      });\n    }\n    /**\r\n     * When the viewport resizes we want to check if the measured constraints\r\n     * have changed and, if so, reposition the element within those new constraints\r\n     * relative to where it was before the resize.\r\n     */\n\n  }, {\n    key: \"scalePositionWithinConstraints\",\n    value: function scalePositionWithinConstraints() {\n      var _this6 = this;\n\n      var _a;\n\n      var _this$getProps9 = this.getProps(),\n          drag = _this$getProps9.drag,\n          dragConstraints = _this$getProps9.dragConstraints;\n\n      var projection = this.visualElement.projection;\n      if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n      /**\r\n       * Stop current animations as there can be visual glitching if we try to do\r\n       * this mid-animation\r\n       */\n\n      this.stopAnimation();\n      /**\r\n       * Record the relative position of the dragged element relative to the\r\n       * constraints box and save as a progress value.\r\n       */\n\n      var boxProgress = {\n        x: 0,\n        y: 0\n      };\n      eachAxis(function (axis) {\n        var axisValue = _this6.getAxisMotionValue(axis);\n\n        if (axisValue) {\n          var latest = axisValue.get();\n          boxProgress[axis] = calcOrigin({\n            min: latest,\n            max: latest\n          }, _this6.constraints[axis]);\n        }\n      });\n      /**\r\n       * Update the layout of this element and resolve the latest drag constraints\r\n       */\n\n      var _this$visualElement$g = this.visualElement.getProps(),\n          transformTemplate = _this$visualElement$g.transformTemplate;\n\n      this.visualElement.getInstance().style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n      (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n      projection.updateLayout();\n      this.resolveConstraints();\n      /**\r\n       * For each axis, calculate the current progress of the layout axis\r\n       * within the new constraints.\r\n       */\n\n      eachAxis(function (axis) {\n        if (!shouldDrag(axis, drag, null)) return;\n        /**\r\n         * Calculate a new transform based on the previous box progress\r\n         */\n\n        var axisValue = _this6.getAxisMotionValue(axis);\n\n        var _this6$constraints$ax = _this6.constraints[axis],\n            min = _this6$constraints$ax.min,\n            max = _this6$constraints$ax.max;\n        axisValue.set(mix(min, max, boxProgress[axis]));\n      });\n    }\n  }, {\n    key: \"addListeners\",\n    value: function addListeners() {\n      var _this7 = this;\n\n      var _a;\n\n      elementDragControls.set(this.visualElement, this);\n      var element = this.visualElement.getInstance();\n      /**\r\n       * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\r\n       */\n\n      var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n        var _this7$getProps = _this7.getProps(),\n            drag = _this7$getProps.drag,\n            _this7$getProps$dragL = _this7$getProps.dragListener,\n            dragListener = _this7$getProps$dragL === void 0 ? true : _this7$getProps$dragL;\n\n        drag && dragListener && _this7.start(event);\n      });\n\n      var measureDragConstraints = function measureDragConstraints() {\n        var _this7$getProps2 = _this7.getProps(),\n            dragConstraints = _this7$getProps2.dragConstraints;\n\n        if (isRefObject(dragConstraints)) {\n          _this7.constraints = _this7.resolveRefConstraints();\n        }\n      };\n\n      var projection = this.visualElement.projection;\n      var stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n\n      if (projection && !projection.layout) {\n        (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n        projection.updateLayout();\n      }\n\n      measureDragConstraints();\n      /**\r\n       * Attach a window resize listener to scale the draggable target within its defined\r\n       * constraints as the window resizes.\r\n       */\n\n      var stopResizeListener = addDomEvent(window, \"resize\", function () {\n        return _this7.scalePositionWithinConstraints();\n      });\n      /**\r\n       * If the element's layout changes, calculate the delta and apply that to\r\n       * the drag gesture's origin point.\r\n       */\n\n      var stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", function (_ref3) {\n        var delta = _ref3.delta,\n            hasLayoutChanged = _ref3.hasLayoutChanged;\n\n        if (_this7.isDragging && hasLayoutChanged) {\n          eachAxis(function (axis) {\n            var motionValue = _this7.getAxisMotionValue(axis);\n\n            if (!motionValue) return;\n            _this7.originPoint[axis] += delta[axis].translate;\n            motionValue.set(motionValue.get() + delta[axis].translate);\n          });\n\n          _this7.visualElement.syncRender();\n        }\n      });\n      return function () {\n        stopResizeListener();\n        stopPointerListener();\n        stopMeasureLayoutListener();\n        stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n      };\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      var props = this.visualElement.getProps();\n      var _props$drag = props.drag,\n          drag = _props$drag === void 0 ? false : _props$drag,\n          _props$dragDirectionL = props.dragDirectionLock,\n          dragDirectionLock = _props$dragDirectionL === void 0 ? false : _props$dragDirectionL,\n          _props$dragPropagatio = props.dragPropagation,\n          dragPropagation = _props$dragPropagatio === void 0 ? false : _props$dragPropagatio,\n          _props$dragConstraint = props.dragConstraints,\n          dragConstraints = _props$dragConstraint === void 0 ? false : _props$dragConstraint,\n          _props$dragElastic = props.dragElastic,\n          dragElastic = _props$dragElastic === void 0 ? defaultElastic : _props$dragElastic,\n          _props$dragMomentum = props.dragMomentum,\n          dragMomentum = _props$dragMomentum === void 0 ? true : _props$dragMomentum;\n      return Object.assign(Object.assign({}, props), {\n        drag: drag,\n        dragDirectionLock: dragDirectionLock,\n        dragPropagation: dragPropagation,\n        dragConstraints: dragConstraints,\n        dragElastic: dragElastic,\n        dragMomentum: dragMomentum\n      });\n    }\n  }]);\n\n  return VisualElementDragControls;\n}();\n\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\r\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\r\n * than the provided threshold, return `null`.\r\n *\r\n * @param offset - The x/y offset from origin.\r\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\r\n */\n\n\nfunction getCurrentDirection(offset) {\n  var lockThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  var direction = null;\n\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n\n  return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"names":["invariant","PanSession","getGlobalLock","isRefObject","addPointerEvent","applyConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","calcOrigin","defaultElastic","AnimationType","createBox","eachAxis","measurePageBox","extractEventInfo","startAnimation","convertBoxToBoundingBox","convertBoundingBoxToBox","addDomEvent","mix","percent","calcLength","elementDragControls","WeakMap","VisualElementDragControls","visualElement","openGlobalLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","isPresent","onSessionStart","event","stopAnimation","point","onStart","info","_a","getProps","drag","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","target","undefined","axis","_b","current","getAxisMotionValue","get","test","measuredAxis","layout","actual","length","parseFloat","animationState","setActive","Drag","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","syncRender","onSessionEnd","stop","panSession","transformPagePoint","getTransformPagePoint","cancel","velocity","onDragEnd","end","_point","shouldDrag","axisValue","next","set","dragConstraints","dragElastic","prevConstraints","resolveRefConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","userConstraints","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","Object","assign","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","dragKey","toUpperCase","externalMotionValue","getValue","initial","boxProgress","latest","transformTemplate","getInstance","style","transform","updateScroll","updateLayout","element","stopPointerListener","dragListener","start","measureDragConstraints","stopMeasureLayoutListener","addEventListener","stopResizeListener","window","scalePositionWithinConstraints","stopLayoutUpdateListener","delta","hasLayoutChanged","motionValue","translate","props","direction","lockThreshold","Math","abs"],"sources":["C:/Users/bittu/Desktop/React-Unit4-Project/premium-grade-140/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"sourcesContent":["import { invariant } from 'hey-listen';\r\nimport { PanSession } from '../PanSession.mjs';\r\nimport { getGlobalLock } from './utils/lock.mjs';\r\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\r\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\r\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\r\nimport { AnimationType } from '../../render/utils/types.mjs';\r\nimport { createBox } from '../../projection/geometry/models.mjs';\r\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\r\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\r\nimport { extractEventInfo } from '../../events/event-info.mjs';\r\nimport { startAnimation } from '../../animation/utils/transitions.mjs';\r\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\r\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\r\nimport { mix } from 'popmotion';\r\nimport { percent } from 'style-value-types';\r\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\r\n\r\nconst elementDragControls = new WeakMap();\r\n/**\r\n *\r\n */\r\n// let latestPointerEvent: AnyPointerEvent\r\nclass VisualElementDragControls {\r\n    constructor(visualElement) {\r\n        // This is a reference to the global drag gesture lock, ensuring only one component\r\n        // can \"capture\" the drag of one or both axes.\r\n        // TODO: Look into moving this into pansession?\r\n        this.openGlobalLock = null;\r\n        this.isDragging = false;\r\n        this.currentDirection = null;\r\n        this.originPoint = { x: 0, y: 0 };\r\n        /**\r\n         * The permitted boundaries of travel, in pixels.\r\n         */\r\n        this.constraints = false;\r\n        this.hasMutatedConstraints = false;\r\n        /**\r\n         * The per-axis resolved elastic values.\r\n         */\r\n        this.elastic = createBox();\r\n        this.visualElement = visualElement;\r\n    }\r\n    start(originEvent, { snapToCursor = false } = {}) {\r\n        /**\r\n         * Don't start dragging if this component is exiting\r\n         */\r\n        if (this.visualElement.isPresent === false)\r\n            return;\r\n        const onSessionStart = (event) => {\r\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\r\n            // the component.\r\n            this.stopAnimation();\r\n            if (snapToCursor) {\r\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\r\n            }\r\n        };\r\n        const onStart = (event, info) => {\r\n            var _a;\r\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\r\n            const { drag, dragPropagation, onDragStart } = this.getProps();\r\n            if (drag && !dragPropagation) {\r\n                if (this.openGlobalLock)\r\n                    this.openGlobalLock();\r\n                this.openGlobalLock = getGlobalLock(drag);\r\n                // If we don 't have the lock, don't start dragging\r\n                if (!this.openGlobalLock)\r\n                    return;\r\n            }\r\n            this.isDragging = true;\r\n            this.currentDirection = null;\r\n            this.resolveConstraints();\r\n            if (this.visualElement.projection) {\r\n                this.visualElement.projection.isAnimationBlocked = true;\r\n                this.visualElement.projection.target = undefined;\r\n            }\r\n            /**\r\n             * Record gesture origin\r\n             */\r\n            eachAxis((axis) => {\r\n                var _a, _b;\r\n                let current = this.getAxisMotionValue(axis).get() || 0;\r\n                /**\r\n                 * If the MotionValue is a percentage value convert to px\r\n                 */\r\n                if (percent.test(current)) {\r\n                    const measuredAxis = (_b = (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.actual[axis];\r\n                    if (measuredAxis) {\r\n                        const length = calcLength(measuredAxis);\r\n                        current = length * (parseFloat(current) / 100);\r\n                    }\r\n                }\r\n                this.originPoint[axis] = current;\r\n            });\r\n            // Fire onDragStart event\r\n            onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\r\n            (_a = this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\r\n        };\r\n        const onMove = (event, info) => {\r\n            // latestPointerEvent = event\r\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\r\n            // If we didn't successfully receive the gesture lock, early return.\r\n            if (!dragPropagation && !this.openGlobalLock)\r\n                return;\r\n            const { offset } = info;\r\n            // Attempt to detect drag direction if directionLock is true\r\n            if (dragDirectionLock && this.currentDirection === null) {\r\n                this.currentDirection = getCurrentDirection(offset);\r\n                // If we've successfully set a direction, notify listener\r\n                if (this.currentDirection !== null) {\r\n                    onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(this.currentDirection);\r\n                }\r\n                return;\r\n            }\r\n            // Update each point with the latest position\r\n            this.updateAxis(\"x\", info.point, offset);\r\n            this.updateAxis(\"y\", info.point, offset);\r\n            /**\r\n             * Ideally we would leave the renderer to fire naturally at the end of\r\n             * this frame but if the element is about to change layout as the result\r\n             * of a re-render we want to ensure the browser can read the latest\r\n             * bounding box to ensure the pointer and element don't fall out of sync.\r\n             */\r\n            this.visualElement.syncRender();\r\n            /**\r\n             * This must fire after the syncRender call as it might trigger a state\r\n             * change which itself might trigger a layout update.\r\n             */\r\n            onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\r\n        };\r\n        const onSessionEnd = (event, info) => this.stop(event, info);\r\n        this.panSession = new PanSession(originEvent, {\r\n            onSessionStart,\r\n            onStart,\r\n            onMove,\r\n            onSessionEnd,\r\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\r\n    }\r\n    stop(event, info) {\r\n        const isDragging = this.isDragging;\r\n        this.cancel();\r\n        if (!isDragging)\r\n            return;\r\n        const { velocity } = info;\r\n        this.startAnimation(velocity);\r\n        const { onDragEnd } = this.getProps();\r\n        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\r\n    }\r\n    cancel() {\r\n        var _a, _b;\r\n        this.isDragging = false;\r\n        if (this.visualElement.projection) {\r\n            this.visualElement.projection.isAnimationBlocked = false;\r\n        }\r\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\r\n        this.panSession = undefined;\r\n        const { dragPropagation } = this.getProps();\r\n        if (!dragPropagation && this.openGlobalLock) {\r\n            this.openGlobalLock();\r\n            this.openGlobalLock = null;\r\n        }\r\n        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\r\n    }\r\n    updateAxis(axis, _point, offset) {\r\n        const { drag } = this.getProps();\r\n        // If we're not dragging this axis, do an early return.\r\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\r\n            return;\r\n        const axisValue = this.getAxisMotionValue(axis);\r\n        let next = this.originPoint[axis] + offset[axis];\r\n        // Apply constraints\r\n        if (this.constraints && this.constraints[axis]) {\r\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\r\n        }\r\n        axisValue.set(next);\r\n    }\r\n    resolveConstraints() {\r\n        const { dragConstraints, dragElastic } = this.getProps();\r\n        const { layout } = this.visualElement.projection || {};\r\n        const prevConstraints = this.constraints;\r\n        if (dragConstraints && isRefObject(dragConstraints)) {\r\n            if (!this.constraints) {\r\n                this.constraints = this.resolveRefConstraints();\r\n            }\r\n        }\r\n        else {\r\n            if (dragConstraints && layout) {\r\n                this.constraints = calcRelativeConstraints(layout.actual, dragConstraints);\r\n            }\r\n            else {\r\n                this.constraints = false;\r\n            }\r\n        }\r\n        this.elastic = resolveDragElastic(dragElastic);\r\n        /**\r\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\r\n         * from viewport-relative to component-relative.\r\n         */\r\n        if (prevConstraints !== this.constraints &&\r\n            layout &&\r\n            this.constraints &&\r\n            !this.hasMutatedConstraints) {\r\n            eachAxis((axis) => {\r\n                if (this.getAxisMotionValue(axis)) {\r\n                    this.constraints[axis] = rebaseAxisConstraints(layout.actual[axis], this.constraints[axis]);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    resolveRefConstraints() {\r\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\r\n        if (!constraints || !isRefObject(constraints))\r\n            return false;\r\n        const constraintsElement = constraints.current;\r\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\r\n        const { projection } = this.visualElement;\r\n        // TODO\r\n        if (!projection || !projection.layout)\r\n            return false;\r\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\r\n        let measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);\r\n        /**\r\n         * If there's an onMeasureDragConstraints listener we call it and\r\n         * if different constraints are returned, set constraints to that\r\n         */\r\n        if (onMeasureDragConstraints) {\r\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\r\n            this.hasMutatedConstraints = !!userConstraints;\r\n            if (userConstraints) {\r\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\r\n            }\r\n        }\r\n        return measuredConstraints;\r\n    }\r\n    startAnimation(velocity) {\r\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\r\n        const constraints = this.constraints || {};\r\n        const momentumAnimations = eachAxis((axis) => {\r\n            var _a;\r\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\r\n                return;\r\n            }\r\n            let transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\r\n            if (dragSnapToOrigin)\r\n                transition = { min: 0, max: 0 };\r\n            /**\r\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\r\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\r\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\r\n             * using the value of `dragElastic`.\r\n             */\r\n            const bounceStiffness = dragElastic ? 200 : 1000000;\r\n            const bounceDamping = dragElastic ? 40 : 10000000;\r\n            const inertia = Object.assign(Object.assign({ type: \"inertia\", velocity: dragMomentum ? velocity[axis] : 0, bounceStiffness,\r\n                bounceDamping, timeConstant: 750, restDelta: 1, restSpeed: 10 }, dragTransition), transition);\r\n            // If we're not animating on an externally-provided `MotionValue` we can use the\r\n            // component's animation controls which will handle interactions with whileHover (etc),\r\n            // otherwise we just have to animate the `MotionValue` itself.\r\n            return this.startAxisValueAnimation(axis, inertia);\r\n        });\r\n        // Run all animations and then resolve the new drag constraints.\r\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\r\n    }\r\n    startAxisValueAnimation(axis, transition) {\r\n        const axisValue = this.getAxisMotionValue(axis);\r\n        return startAnimation(axis, axisValue, 0, transition);\r\n    }\r\n    stopAnimation() {\r\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\r\n    }\r\n    /**\r\n     * Drag works differently depending on which props are provided.\r\n     *\r\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\r\n     * - Otherwise, we apply the delta to the x/y motion values.\r\n     */\r\n    getAxisMotionValue(axis) {\r\n        var _a, _b;\r\n        const dragKey = \"_drag\" + axis.toUpperCase();\r\n        const externalMotionValue = this.visualElement.getProps()[dragKey];\r\n        return externalMotionValue\r\n            ? externalMotionValue\r\n            : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);\r\n    }\r\n    snapToCursor(point) {\r\n        eachAxis((axis) => {\r\n            const { drag } = this.getProps();\r\n            // If we're not dragging this axis, do an early return.\r\n            if (!shouldDrag(axis, drag, this.currentDirection))\r\n                return;\r\n            const { projection } = this.visualElement;\r\n            const axisValue = this.getAxisMotionValue(axis);\r\n            if (projection && projection.layout) {\r\n                const { min, max } = projection.layout.actual[axis];\r\n                axisValue.set(point[axis] - mix(min, max, 0.5));\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * When the viewport resizes we want to check if the measured constraints\r\n     * have changed and, if so, reposition the element within those new constraints\r\n     * relative to where it was before the resize.\r\n     */\r\n    scalePositionWithinConstraints() {\r\n        var _a;\r\n        const { drag, dragConstraints } = this.getProps();\r\n        const { projection } = this.visualElement;\r\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\r\n            return;\r\n        /**\r\n         * Stop current animations as there can be visual glitching if we try to do\r\n         * this mid-animation\r\n         */\r\n        this.stopAnimation();\r\n        /**\r\n         * Record the relative position of the dragged element relative to the\r\n         * constraints box and save as a progress value.\r\n         */\r\n        const boxProgress = { x: 0, y: 0 };\r\n        eachAxis((axis) => {\r\n            const axisValue = this.getAxisMotionValue(axis);\r\n            if (axisValue) {\r\n                const latest = axisValue.get();\r\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\r\n            }\r\n        });\r\n        /**\r\n         * Update the layout of this element and resolve the latest drag constraints\r\n         */\r\n        const { transformTemplate } = this.visualElement.getProps();\r\n        this.visualElement.getInstance().style.transform = transformTemplate\r\n            ? transformTemplate({}, \"\")\r\n            : \"none\";\r\n        (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\r\n        projection.updateLayout();\r\n        this.resolveConstraints();\r\n        /**\r\n         * For each axis, calculate the current progress of the layout axis\r\n         * within the new constraints.\r\n         */\r\n        eachAxis((axis) => {\r\n            if (!shouldDrag(axis, drag, null))\r\n                return;\r\n            /**\r\n             * Calculate a new transform based on the previous box progress\r\n             */\r\n            const axisValue = this.getAxisMotionValue(axis);\r\n            const { min, max } = this.constraints[axis];\r\n            axisValue.set(mix(min, max, boxProgress[axis]));\r\n        });\r\n    }\r\n    addListeners() {\r\n        var _a;\r\n        elementDragControls.set(this.visualElement, this);\r\n        const element = this.visualElement.getInstance();\r\n        /**\r\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\r\n         */\r\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\r\n            const { drag, dragListener = true } = this.getProps();\r\n            drag && dragListener && this.start(event);\r\n        });\r\n        const measureDragConstraints = () => {\r\n            const { dragConstraints } = this.getProps();\r\n            if (isRefObject(dragConstraints)) {\r\n                this.constraints = this.resolveRefConstraints();\r\n            }\r\n        };\r\n        const { projection } = this.visualElement;\r\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\r\n        if (projection && !projection.layout) {\r\n            (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\r\n            projection.updateLayout();\r\n        }\r\n        measureDragConstraints();\r\n        /**\r\n         * Attach a window resize listener to scale the draggable target within its defined\r\n         * constraints as the window resizes.\r\n         */\r\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\r\n        /**\r\n         * If the element's layout changes, calculate the delta and apply that to\r\n         * the drag gesture's origin point.\r\n         */\r\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\r\n            if (this.isDragging && hasLayoutChanged) {\r\n                eachAxis((axis) => {\r\n                    const motionValue = this.getAxisMotionValue(axis);\r\n                    if (!motionValue)\r\n                        return;\r\n                    this.originPoint[axis] += delta[axis].translate;\r\n                    motionValue.set(motionValue.get() + delta[axis].translate);\r\n                });\r\n                this.visualElement.syncRender();\r\n            }\r\n        }));\r\n        return () => {\r\n            stopResizeListener();\r\n            stopPointerListener();\r\n            stopMeasureLayoutListener();\r\n            stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\r\n        };\r\n    }\r\n    getProps() {\r\n        const props = this.visualElement.getProps();\r\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\r\n        return Object.assign(Object.assign({}, props), { drag,\r\n            dragDirectionLock,\r\n            dragPropagation,\r\n            dragConstraints,\r\n            dragElastic,\r\n            dragMomentum });\r\n    }\r\n}\r\nfunction shouldDrag(direction, drag, currentDirection) {\r\n    return ((drag === true || drag === direction) &&\r\n        (currentDirection === null || currentDirection === direction));\r\n}\r\n/**\r\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\r\n * than the provided threshold, return `null`.\r\n *\r\n * @param offset - The x/y offset from origin.\r\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\r\n */\r\nfunction getCurrentDirection(offset, lockThreshold = 10) {\r\n    let direction = null;\r\n    if (Math.abs(offset.y) > lockThreshold) {\r\n        direction = \"y\";\r\n    }\r\n    else if (Math.abs(offset.x) > lockThreshold) {\r\n        direction = \"x\";\r\n    }\r\n    return direction;\r\n}\r\n\r\nexport { VisualElementDragControls, elementDragControls };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}